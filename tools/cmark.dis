
cmark.exe:     file format elf32-littleriscv


Disassembly of section .text:

00000000 <_start>:
       0:	595552b7          	lui	t0,0x59555
       4:	55528293          	addi	t0,t0,1365 # 59555555 <STACK+0x5953cfa5>
       8:	7c029073          	csrw	0x7c0,t0
       c:	00018117          	auipc	sp,0x18
      10:	5a410113          	addi	sp,sp,1444 # 185b0 <STACK>
      14:	0a4080ef          	jal	ra,80b8 <main>

00000018 <_finish>:
      18:	d0580297          	auipc	t0,0xd0580
      1c:	fe828293          	addi	t0,t0,-24 # d0580000 <tohost+0x0>
      20:	0ff00313          	li	t1,255
      24:	00628023          	sb	t1,0(t0)
      28:	4305                	li	t1,1
      2a:	0062a023          	sw	t1,0(t0)
      2e:	fe0005e3          	beqz	zero,18 <_finish>
      32:	0001                	nop
      34:	0001                	nop
      36:	0001                	nop
      38:	0001                	nop
      3a:	0001                	nop
      3c:	0001                	nop
      3e:	0001                	nop
      40:	0001                	nop
      42:	0001                	nop
      44:	0001                	nop

00000046 <whisperPrintfImpl>:
int
whisperPrintfImpl(const char* format, va_list ap)
{
  int count = 0;  // Printed character count

  for (const char* fp = format; *fp; fp++)
      46:	00054703          	lbu	a4,0(a0)
      4a:	2c070be3          	beqz	a4,b20 <whisperPrintfImpl+0xada>
        {    // Width not yet implemented.
          while (*fp >= '0' && *fp <= '9')
            width = width * 10 + (*fp++ - '0');
        }

      switch (*fp)
      4e:	6ec1                	lui	t4,0x10
      50:	87aa                	mv	a5,a0
      if (*fp != '%')
      52:	02500893          	li	a7,37
  int count = 0;  // Printed character count
      56:	4501                	li	a0,0
  tohost = c;
      58:	d0580e37          	lui	t3,0xd0580
      while (*fp == '0')
      5c:	03000813          	li	a6,48
      if (*fp == '-')
      60:	02d00293          	li	t0,45
      if (*fp == '*')
      64:	02a00f93          	li	t6,42
      switch (*fp)
      68:	02000f13          	li	t5,32
      6c:	000e8e93          	mv	t4,t4
      else if (*fp >= '0' && *fp <= '9')
      70:	43a5                	li	t2,9
      72:	a809                	j	84 <whisperPrintfImpl+0x3e>
  tohost = c;
      74:	00ee0023          	sb	a4,0(t3) # d0580000 <tohost+0x0>
  for (const char* fp = format; *fp; fp++)
      78:	0017c703          	lbu	a4,1(a5)
          ++count;
      7c:	0505                	addi	a0,a0,1
  for (const char* fp = format; *fp; fp++)
      7e:	0785                	addi	a5,a5,1
      80:	10070e63          	beqz	a4,19c <whisperPrintfImpl+0x156>
      if (*fp == 0)
      84:	0017c603          	lbu	a2,1(a5)
      if (*fp != '%')
      88:	ff1716e3          	bne	a4,a7,74 <whisperPrintfImpl+0x2e>
      if (*fp == 0)
      8c:	10060863          	beqz	a2,19c <whisperPrintfImpl+0x156>
      ++fp;  // Skip %
      90:	0785                	addi	a5,a5,1
      if (*fp == '%')
      92:	0f160e63          	beq	a2,a7,18e <whisperPrintfImpl+0x148>
{
      96:	7139                	addi	sp,sp,-64
      98:	de22                	sw	s0,60(sp)
      9a:	dc26                	sw	s1,56(sp)
      9c:	da4a                	sw	s2,52(sp)
      9e:	d84e                	sw	s3,48(sp)
      a0:	d652                	sw	s4,44(sp)
      a2:	d456                	sw	s5,40(sp)
      a4:	d25a                	sw	s6,36(sp)
      while (*fp == '0')
      a6:	25061ee3          	bne	a2,a6,b02 <whisperPrintfImpl+0xabc>
      aa:	0017c703          	lbu	a4,1(a5)
          fp++;  // Pad zero not yet implented.
      ae:	0785                	addi	a5,a5,1
      b0:	86be                	mv	a3,a5
      while (*fp == '0')
      b2:	05071b63          	bne	a4,a6,108 <whisperPrintfImpl+0xc2>
      b6:	0017c703          	lbu	a4,1(a5)
          fp++;  // Pad zero not yet implented.
      ba:	0785                	addi	a5,a5,1
      while (*fp == '0')
      bc:	05071663          	bne	a4,a6,108 <whisperPrintfImpl+0xc2>
      c0:	0026c703          	lbu	a4,2(a3)
          fp++;  // Pad zero not yet implented.
      c4:	00268793          	addi	a5,a3,2
      while (*fp == '0')
      c8:	05071063          	bne	a4,a6,108 <whisperPrintfImpl+0xc2>
      cc:	0036c703          	lbu	a4,3(a3)
          fp++;  // Pad zero not yet implented.
      d0:	00368793          	addi	a5,a3,3
      while (*fp == '0')
      d4:	03071a63          	bne	a4,a6,108 <whisperPrintfImpl+0xc2>
      d8:	0046c703          	lbu	a4,4(a3)
          fp++;  // Pad zero not yet implented.
      dc:	00468793          	addi	a5,a3,4
      while (*fp == '0')
      e0:	03071463          	bne	a4,a6,108 <whisperPrintfImpl+0xc2>
      e4:	0056c703          	lbu	a4,5(a3)
          fp++;  // Pad zero not yet implented.
      e8:	00568793          	addi	a5,a3,5
      while (*fp == '0')
      ec:	01071e63          	bne	a4,a6,108 <whisperPrintfImpl+0xc2>
      f0:	0066c703          	lbu	a4,6(a3)
          fp++;  // Pad zero not yet implented.
      f4:	00668793          	addi	a5,a3,6
      while (*fp == '0')
      f8:	01071863          	bne	a4,a6,108 <whisperPrintfImpl+0xc2>
      fc:	0076c703          	lbu	a4,7(a3)
          fp++;  // Pad zero not yet implented.
     100:	00768793          	addi	a5,a3,7
      while (*fp == '0')
     104:	fb0703e3          	beq	a4,a6,aa <whisperPrintfImpl+0x64>
      if (*fp == '*')
     108:	0017c303          	lbu	t1,1(a5)
      if (*fp == '-')
     10c:	00571463          	bne	a4,t0,114 <whisperPrintfImpl+0xce>
          fp++;  // Pad right not yet implemented.
     110:	0785                	addi	a5,a5,1
     112:	871a                	mv	a4,t1
          while (*fp >= '0' && *fp <= '9')
     114:	0017c403          	lbu	s0,1(a5)
      if (*fp == '*')
     118:	07f70663          	beq	a4,t6,184 <whisperPrintfImpl+0x13e>
      else if (*fp >= '0' && *fp <= '9')
     11c:	fd070413          	addi	s0,a4,-48
     120:	0ff47493          	zext.b	s1,s0
      int width = 0;  // Field width
     124:	4681                	li	a3,0
      else if (*fp >= '0' && *fp <= '9')
     126:	0693fc63          	bgeu	t2,s1,19e <whisperPrintfImpl+0x158>
      switch (*fp)
     12a:	fa870713          	addi	a4,a4,-88
     12e:	0ff77a13          	zext.b	s4,a4
     132:	014f6f63          	bltu	t5,s4,150 <whisperPrintfImpl+0x10a>
     136:	002a1313          	slli	t1,s4,0x2
     13a:	01d30933          	add	s2,t1,t4
     13e:	00092b03          	lw	s6,0(s2)
     142:	8b02                	jr	s6
      if (*fp == 0)
     144:	c61d                	beqz	a2,172 <whisperPrintfImpl+0x12c>
      ++fp;  // Skip %
     146:	0785                	addi	a5,a5,1
      if (*fp == '%')
     148:	f5161fe3          	bne	a2,a7,a6 <whisperPrintfImpl+0x60>
  tohost = c;
     14c:	011e0023          	sb	a7,0(t3)
  for (const char* fp = format; *fp; fp++)
     150:	0017cb03          	lbu	s6,1(a5)
     154:	0785                	addi	a5,a5,1
     156:	000b0e63          	beqz	s6,172 <whisperPrintfImpl+0x12c>
      if (*fp == 0)
     15a:	0017c603          	lbu	a2,1(a5)
      if (*fp != '%')
     15e:	ff1b03e3          	beq	s6,a7,144 <whisperPrintfImpl+0xfe>
  tohost = c;
     162:	016e0023          	sb	s6,0(t3)
  for (const char* fp = format; *fp; fp++)
     166:	0017cb03          	lbu	s6,1(a5)
          ++count;
     16a:	0505                	addi	a0,a0,1
  for (const char* fp = format; *fp; fp++)
     16c:	0785                	addi	a5,a5,1
     16e:	fe0b16e3          	bnez	s6,15a <whisperPrintfImpl+0x114>
*/
        }
    }

  return count;
}
     172:	5472                	lw	s0,60(sp)
     174:	54e2                	lw	s1,56(sp)
     176:	5952                	lw	s2,52(sp)
     178:	59c2                	lw	s3,48(sp)
     17a:	5a32                	lw	s4,44(sp)
     17c:	5aa2                	lw	s5,40(sp)
     17e:	5b12                	lw	s6,36(sp)
     180:	6121                	addi	sp,sp,64
     182:	8082                	ret
          fp++;  // Width not yet implemented.
     184:	0785                	addi	a5,a5,1
          int outWidth = va_arg(ap, int);
     186:	0591                	addi	a1,a1,4
          fp++;  // Width not yet implemented.
     188:	8722                	mv	a4,s0
      int width = 0;  // Field width
     18a:	4681                	li	a3,0
     18c:	bf79                	j	12a <whisperPrintfImpl+0xe4>
  for (const char* fp = format; *fp; fp++)
     18e:	0017c703          	lbu	a4,1(a5)
  tohost = c;
     192:	011e0023          	sb	a7,0(t3)
  for (const char* fp = format; *fp; fp++)
     196:	0785                	addi	a5,a5,1
     198:	ee0716e3          	bnez	a4,84 <whisperPrintfImpl+0x3e>
}
     19c:	8082                	ret
          while (*fp >= '0' && *fp <= '9')
     19e:	4a25                	li	s4,9
     1a0:	0017c703          	lbu	a4,1(a5)
            width = width * 10 + (*fp++ - '0');
     1a4:	00269913          	slli	s2,a3,0x2
     1a8:	00d909b3          	add	s3,s2,a3
          while (*fp >= '0' && *fp <= '9')
     1ac:	fd070a93          	addi	s5,a4,-48
            width = width * 10 + (*fp++ - '0');
     1b0:	0785                	addi	a5,a5,1
     1b2:	00199b13          	slli	s6,s3,0x1
          while (*fp >= '0' && *fp <= '9')
     1b6:	0ffaf493          	zext.b	s1,s5
            width = width * 10 + (*fp++ - '0');
     1ba:	833e                	mv	t1,a5
     1bc:	016406b3          	add	a3,s0,s6
          while (*fp >= '0' && *fp <= '9')
     1c0:	f69a65e3          	bltu	s4,s1,12a <whisperPrintfImpl+0xe4>
     1c4:	0017c703          	lbu	a4,1(a5)
            width = width * 10 + (*fp++ - '0');
     1c8:	00269413          	slli	s0,a3,0x2
     1cc:	96a2                	add	a3,a3,s0
          while (*fp >= '0' && *fp <= '9')
     1ce:	fd070b13          	addi	s6,a4,-48
            width = width * 10 + (*fp++ - '0');
     1d2:	00169913          	slli	s2,a3,0x1
          while (*fp >= '0' && *fp <= '9')
     1d6:	0ffb7993          	zext.b	s3,s6
            width = width * 10 + (*fp++ - '0');
     1da:	0785                	addi	a5,a5,1
     1dc:	012a86b3          	add	a3,s5,s2
          while (*fp >= '0' && *fp <= '9')
     1e0:	f53a65e3          	bltu	s4,s3,12a <whisperPrintfImpl+0xe4>
     1e4:	00234703          	lbu	a4,2(t1)
            width = width * 10 + (*fp++ - '0');
     1e8:	00269793          	slli	a5,a3,0x2
     1ec:	00d78ab3          	add	s5,a5,a3
          while (*fp >= '0' && *fp <= '9')
     1f0:	fd070493          	addi	s1,a4,-48
            width = width * 10 + (*fp++ - '0');
     1f4:	001a9413          	slli	s0,s5,0x1
          while (*fp >= '0' && *fp <= '9')
     1f8:	0ff4f913          	zext.b	s2,s1
            width = width * 10 + (*fp++ - '0');
     1fc:	00230793          	addi	a5,t1,2
     200:	008b06b3          	add	a3,s6,s0
          while (*fp >= '0' && *fp <= '9')
     204:	f32a63e3          	bltu	s4,s2,12a <whisperPrintfImpl+0xe4>
     208:	00334703          	lbu	a4,3(t1)
            width = width * 10 + (*fp++ - '0');
     20c:	00269b13          	slli	s6,a3,0x2
     210:	96da                	add	a3,a3,s6
          while (*fp >= '0' && *fp <= '9')
     212:	fd070a93          	addi	s5,a4,-48
            width = width * 10 + (*fp++ - '0');
     216:	00169413          	slli	s0,a3,0x1
          while (*fp >= '0' && *fp <= '9')
     21a:	0ffaf993          	zext.b	s3,s5
            width = width * 10 + (*fp++ - '0');
     21e:	00330793          	addi	a5,t1,3
     222:	008486b3          	add	a3,s1,s0
          while (*fp >= '0' && *fp <= '9')
     226:	f13a62e3          	bltu	s4,s3,12a <whisperPrintfImpl+0xe4>
     22a:	00434703          	lbu	a4,4(t1)
            width = width * 10 + (*fp++ - '0');
     22e:	00269793          	slli	a5,a3,0x2
     232:	00d784b3          	add	s1,a5,a3
          while (*fp >= '0' && *fp <= '9')
     236:	fd070913          	addi	s2,a4,-48
            width = width * 10 + (*fp++ - '0');
     23a:	00149b13          	slli	s6,s1,0x1
          while (*fp >= '0' && *fp <= '9')
     23e:	0ff97413          	zext.b	s0,s2
            width = width * 10 + (*fp++ - '0');
     242:	00430793          	addi	a5,t1,4
     246:	016a86b3          	add	a3,s5,s6
          while (*fp >= '0' && *fp <= '9')
     24a:	ee8a60e3          	bltu	s4,s0,12a <whisperPrintfImpl+0xe4>
     24e:	00534703          	lbu	a4,5(t1)
            width = width * 10 + (*fp++ - '0');
     252:	00269a93          	slli	s5,a3,0x2
     256:	96d6                	add	a3,a3,s5
          while (*fp >= '0' && *fp <= '9')
     258:	fd070493          	addi	s1,a4,-48
            width = width * 10 + (*fp++ - '0');
     25c:	00169b13          	slli	s6,a3,0x1
          while (*fp >= '0' && *fp <= '9')
     260:	0ff4f993          	zext.b	s3,s1
            width = width * 10 + (*fp++ - '0');
     264:	00530793          	addi	a5,t1,5
     268:	016906b3          	add	a3,s2,s6
          while (*fp >= '0' && *fp <= '9')
     26c:	eb3a6fe3          	bltu	s4,s3,12a <whisperPrintfImpl+0xe4>
     270:	00634703          	lbu	a4,6(t1)
            width = width * 10 + (*fp++ - '0');
     274:	00269793          	slli	a5,a3,0x2
     278:	00d78433          	add	s0,a5,a3
          while (*fp >= '0' && *fp <= '9')
     27c:	fd070913          	addi	s2,a4,-48
            width = width * 10 + (*fp++ - '0');
     280:	00141a93          	slli	s5,s0,0x1
          while (*fp >= '0' && *fp <= '9')
     284:	0ff97b13          	zext.b	s6,s2
            width = width * 10 + (*fp++ - '0');
     288:	00630793          	addi	a5,t1,6
     28c:	015486b3          	add	a3,s1,s5
          while (*fp >= '0' && *fp <= '9')
     290:	e96a6de3          	bltu	s4,s6,12a <whisperPrintfImpl+0xe4>
     294:	00734703          	lbu	a4,7(t1)
            width = width * 10 + (*fp++ - '0');
     298:	00269493          	slli	s1,a3,0x2
     29c:	96a6                	add	a3,a3,s1
          while (*fp >= '0' && *fp <= '9')
     29e:	fd070413          	addi	s0,a4,-48
            width = width * 10 + (*fp++ - '0');
     2a2:	00169a93          	slli	s5,a3,0x1
          while (*fp >= '0' && *fp <= '9')
     2a6:	0ff47993          	zext.b	s3,s0
            width = width * 10 + (*fp++ - '0');
     2aa:	00730793          	addi	a5,t1,7
     2ae:	015906b3          	add	a3,s2,s5
          while (*fp >= '0' && *fp <= '9')
     2b2:	ef3a77e3          	bgeu	s4,s3,1a0 <whisperPrintfImpl+0x15a>
     2b6:	bd95                	j	12a <whisperPrintfImpl+0xe4>
  unsigned uu = value;
     2b8:	4198                	lw	a4,0(a1)
  int charCount = 0;
     2ba:	4981                	li	s3,0
          count += whisperPrintInt(va_arg(ap, int), width, pad, 16);
     2bc:	0591                	addi	a1,a1,4
          char c = digit < 10 ? '0' + digit : 'a' + digit - 10;
     2be:	46a5                	li	a3,9
     2c0:	a011                	j	2c4 <whisperPrintfImpl+0x27e>
          buffer[charCount++] = c;
     2c2:	89da                	mv	s3,s6
          char c = digit < 10 ? '0' + digit : 'a' + digit - 10;
     2c4:	00f77913          	andi	s2,a4,15
     2c8:	05790613          	addi	a2,s2,87
     2cc:	0126e463          	bltu	a3,s2,2d4 <whisperPrintfImpl+0x28e>
     2d0:	03090613          	addi	a2,s2,48
          buffer[charCount++] = c;
     2d4:	00198b13          	addi	s6,s3,1
     2d8:	00c10a93          	addi	s5,sp,12
     2dc:	016a8a33          	add	s4,s5,s6
     2e0:	feca0fa3          	sb	a2,-1(s4)
          uu >>= 4;
     2e4:	8311                	srli	a4,a4,0x4
      while (uu);
     2e6:	ff71                	bnez	a4,2c2 <whisperPrintfImpl+0x27c>
  char* p = buffer + charCount - 1;
     2e8:	0064                	addi	s1,sp,12
     2ea:	01348733          	add	a4,s1,s3
  for (unsigned i = 0; i < charCount; ++i)
     2ee:	00b10693          	addi	a3,sp,11
     2f2:	40d709b3          	sub	s3,a4,a3
     2f6:	0079f413          	andi	s0,s3,7
     2fa:	d0580637          	lui	a2,0xd0580
     2fe:	c825                	beqz	s0,36e <whisperPrintfImpl+0x328>
     300:	4905                	li	s2,1
     302:	05240f63          	beq	s0,s2,360 <whisperPrintfImpl+0x31a>
     306:	4309                	li	t1,2
     308:	04640763          	beq	s0,t1,356 <whisperPrintfImpl+0x310>
     30c:	4a8d                	li	s5,3
     30e:	03540f63          	beq	s0,s5,34c <whisperPrintfImpl+0x306>
     312:	4a11                	li	s4,4
     314:	03440763          	beq	s0,s4,342 <whisperPrintfImpl+0x2fc>
     318:	4495                	li	s1,5
     31a:	00940f63          	beq	s0,s1,338 <whisperPrintfImpl+0x2f2>
     31e:	4999                	li	s3,6
     320:	01340763          	beq	s0,s3,32e <whisperPrintfImpl+0x2e8>
    whisperPutc(*p--);
     324:	00074403          	lbu	s0,0(a4)
     328:	177d                	addi	a4,a4,-1
  tohost = c;
     32a:	00860023          	sb	s0,0(a2) # d0580000 <tohost+0x0>
    whisperPutc(*p--);
     32e:	00074903          	lbu	s2,0(a4)
     332:	177d                	addi	a4,a4,-1
  tohost = c;
     334:	01260023          	sb	s2,0(a2)
    whisperPutc(*p--);
     338:	00074303          	lbu	t1,0(a4)
     33c:	177d                	addi	a4,a4,-1
  tohost = c;
     33e:	00660023          	sb	t1,0(a2)
    whisperPutc(*p--);
     342:	00074a83          	lbu	s5,0(a4)
     346:	177d                	addi	a4,a4,-1
  tohost = c;
     348:	01560023          	sb	s5,0(a2)
    whisperPutc(*p--);
     34c:	00074a03          	lbu	s4,0(a4)
     350:	177d                	addi	a4,a4,-1
  tohost = c;
     352:	01460023          	sb	s4,0(a2)
    whisperPutc(*p--);
     356:	00074483          	lbu	s1,0(a4)
     35a:	177d                	addi	a4,a4,-1
  tohost = c;
     35c:	00960023          	sb	s1,0(a2)
    whisperPutc(*p--);
     360:	00074983          	lbu	s3,0(a4)
     364:	177d                	addi	a4,a4,-1
  tohost = c;
     366:	01360023          	sb	s3,0(a2)
  for (unsigned i = 0; i < charCount; ++i)
     36a:	04d70563          	beq	a4,a3,3b4 <whisperPrintfImpl+0x36e>
    whisperPutc(*p--);
     36e:	00074403          	lbu	s0,0(a4)
     372:	fff74903          	lbu	s2,-1(a4)
     376:	ffe74303          	lbu	t1,-2(a4)
  tohost = c;
     37a:	00860023          	sb	s0,0(a2)
    whisperPutc(*p--);
     37e:	ffd74a83          	lbu	s5,-3(a4)
  tohost = c;
     382:	01260023          	sb	s2,0(a2)
    whisperPutc(*p--);
     386:	ffc74a03          	lbu	s4,-4(a4)
  tohost = c;
     38a:	00660023          	sb	t1,0(a2)
    whisperPutc(*p--);
     38e:	ffb74983          	lbu	s3,-5(a4)
  tohost = c;
     392:	01560023          	sb	s5,0(a2)
    whisperPutc(*p--);
     396:	ffa74483          	lbu	s1,-6(a4)
  tohost = c;
     39a:	01460023          	sb	s4,0(a2)
    whisperPutc(*p--);
     39e:	ff974403          	lbu	s0,-7(a4)
  tohost = c;
     3a2:	01360023          	sb	s3,0(a2)
     3a6:	00960023          	sb	s1,0(a2)
    whisperPutc(*p--);
     3aa:	1761                	addi	a4,a4,-8
  tohost = c;
     3ac:	00860023          	sb	s0,0(a2)
  for (unsigned i = 0; i < charCount; ++i)
     3b0:	fad71fe3          	bne	a4,a3,36e <whisperPrintfImpl+0x328>
          count += whisperPrintInt(va_arg(ap, int), width, pad, 16);
     3b4:	955a                	add	a0,a0,s6
          break;
     3b6:	bb69                	j	150 <whisperPrintfImpl+0x10a>
          count += whisperPrintUnsigned((unsigned) va_arg(ap, unsigned), width, pad);
     3b8:	0005a983          	lw	s3,0(a1)
  int charCount = 0;
     3bc:	4701                	li	a4,0
          count += whisperPrintUnsigned((unsigned) va_arg(ap, unsigned), width, pad);
     3be:	0591                	addi	a1,a1,4
      char c = '0' + (value % 10);
     3c0:	4329                	li	t1,10
  while (value);
     3c2:	44a5                	li	s1,9
      char c = '0' + (value % 10);
     3c4:	0269fa33          	remu	s4,s3,t1
     3c8:	843a                	mv	s0,a4
      buffer[charCount++] = c;
     3ca:	00c10a93          	addi	s5,sp,12
     3ce:	0705                	addi	a4,a4,1
     3d0:	00ea8b33          	add	s6,s5,a4
     3d4:	893a                	mv	s2,a4
      char c = '0' + (value % 10);
     3d6:	030a0a13          	addi	s4,s4,48
      buffer[charCount++] = c;
     3da:	ff4b0fa3          	sb	s4,-1(s6)
      value = value / 10;
     3de:	0269db33          	divu	s6,s3,t1
  while (value);
     3e2:	0f34f863          	bgeu	s1,s3,4d2 <whisperPrintfImpl+0x48c>
      char c = '0' + (value % 10);
     3e6:	843a                	mv	s0,a4
      buffer[charCount++] = c;
     3e8:	00c10a93          	addi	s5,sp,12
     3ec:	0705                	addi	a4,a4,1
     3ee:	00ea8a33          	add	s4,s5,a4
      char c = '0' + (value % 10);
     3f2:	026b79b3          	remu	s3,s6,t1
     3f6:	03098993          	addi	s3,s3,48
      buffer[charCount++] = c;
     3fa:	ff3a0fa3          	sb	s3,-1(s4)
      value = value / 10;
     3fe:	026b59b3          	divu	s3,s6,t1
  while (value);
     402:	0d64f863          	bgeu	s1,s6,4d2 <whisperPrintfImpl+0x48c>
      buffer[charCount++] = c;
     406:	00c10b13          	addi	s6,sp,12
     40a:	843a                	mv	s0,a4
     40c:	00290713          	addi	a4,s2,2
     410:	00eb0ab3          	add	s5,s6,a4
      char c = '0' + (value % 10);
     414:	0269fa33          	remu	s4,s3,t1
     418:	030a0b13          	addi	s6,s4,48
      buffer[charCount++] = c;
     41c:	ff6a8fa3          	sb	s6,-1(s5)
      value = value / 10;
     420:	0269da33          	divu	s4,s3,t1
  while (value);
     424:	0b34f763          	bgeu	s1,s3,4d2 <whisperPrintfImpl+0x48c>
      buffer[charCount++] = c;
     428:	00c10993          	addi	s3,sp,12
     42c:	843a                	mv	s0,a4
     42e:	00390713          	addi	a4,s2,3
     432:	00e98ab3          	add	s5,s3,a4
      char c = '0' + (value % 10);
     436:	026a7b33          	remu	s6,s4,t1
     43a:	030b0993          	addi	s3,s6,48
      buffer[charCount++] = c;
     43e:	ff3a8fa3          	sb	s3,-1(s5)
      value = value / 10;
     442:	026a5b33          	divu	s6,s4,t1
  while (value);
     446:	0944f663          	bgeu	s1,s4,4d2 <whisperPrintfImpl+0x48c>
      buffer[charCount++] = c;
     44a:	00c10a13          	addi	s4,sp,12
     44e:	843a                	mv	s0,a4
     450:	00490713          	addi	a4,s2,4
     454:	00ea0ab3          	add	s5,s4,a4
      char c = '0' + (value % 10);
     458:	026b79b3          	remu	s3,s6,t1
     45c:	03098a13          	addi	s4,s3,48
      buffer[charCount++] = c;
     460:	ff4a8fa3          	sb	s4,-1(s5)
      value = value / 10;
     464:	026b5a33          	divu	s4,s6,t1
  while (value);
     468:	0764f563          	bgeu	s1,s6,4d2 <whisperPrintfImpl+0x48c>
      buffer[charCount++] = c;
     46c:	00c10b13          	addi	s6,sp,12
     470:	843a                	mv	s0,a4
     472:	00590713          	addi	a4,s2,5
     476:	00eb0ab3          	add	s5,s6,a4
      char c = '0' + (value % 10);
     47a:	026a79b3          	remu	s3,s4,t1
     47e:	03098b13          	addi	s6,s3,48
      buffer[charCount++] = c;
     482:	ff6a8fa3          	sb	s6,-1(s5)
      value = value / 10;
     486:	026a59b3          	divu	s3,s4,t1
  while (value);
     48a:	0544f463          	bgeu	s1,s4,4d2 <whisperPrintfImpl+0x48c>
      buffer[charCount++] = c;
     48e:	00c10a13          	addi	s4,sp,12
     492:	843a                	mv	s0,a4
     494:	00690713          	addi	a4,s2,6
     498:	00ea0ab3          	add	s5,s4,a4
      char c = '0' + (value % 10);
     49c:	0269fb33          	remu	s6,s3,t1
     4a0:	030b0a13          	addi	s4,s6,48
      buffer[charCount++] = c;
     4a4:	ff4a8fa3          	sb	s4,-1(s5)
      value = value / 10;
     4a8:	0269dab3          	divu	s5,s3,t1
  while (value);
     4ac:	0334f363          	bgeu	s1,s3,4d2 <whisperPrintfImpl+0x48c>
      char c = '0' + (value % 10);
     4b0:	843a                	mv	s0,a4
      buffer[charCount++] = c;
     4b2:	00790713          	addi	a4,s2,7
     4b6:	00c10913          	addi	s2,sp,12
     4ba:	00e909b3          	add	s3,s2,a4
      char c = '0' + (value % 10);
     4be:	026afb33          	remu	s6,s5,t1
     4c2:	030b0a13          	addi	s4,s6,48
      buffer[charCount++] = c;
     4c6:	ff498fa3          	sb	s4,-1(s3)
      value = value / 10;
     4ca:	026ad9b3          	divu	s3,s5,t1
  while (value);
     4ce:	ef54ebe3          	bltu	s1,s5,3c4 <whisperPrintfImpl+0x37e>
  char* p = buffer + charCount - 1;
     4d2:	00c10313          	addi	t1,sp,12
     4d6:	9322                	add	t1,t1,s0
      buffer[charCount++] = c;
     4d8:	84ba                	mv	s1,a4
     4da:	d0580ab7          	lui	s5,0xd0580
  for (int i = charCount; i < width; ++i)
     4de:	08d75563          	bge	a4,a3,568 <whisperPrintfImpl+0x522>
     4e2:	40e68433          	sub	s0,a3,a4
     4e6:	00747913          	andi	s2,s0,7
     4ea:	04090c63          	beqz	s2,542 <whisperPrintfImpl+0x4fc>
     4ee:	4b05                	li	s6,1
     4f0:	05690463          	beq	s2,s6,538 <whisperPrintfImpl+0x4f2>
     4f4:	4a09                	li	s4,2
     4f6:	03490e63          	beq	s2,s4,532 <whisperPrintfImpl+0x4ec>
     4fa:	498d                	li	s3,3
     4fc:	03390863          	beq	s2,s3,52c <whisperPrintfImpl+0x4e6>
     500:	4411                	li	s0,4
     502:	02890263          	beq	s2,s0,526 <whisperPrintfImpl+0x4e0>
     506:	4b15                	li	s6,5
     508:	01690c63          	beq	s2,s6,520 <whisperPrintfImpl+0x4da>
     50c:	4a19                	li	s4,6
     50e:	01490663          	beq	s2,s4,51a <whisperPrintfImpl+0x4d4>
  tohost = c;
     512:	00ca8023          	sb	a2,0(s5) # d0580000 <tohost+0x0>
  for (int i = charCount; i < width; ++i)
     516:	00170493          	addi	s1,a4,1
  tohost = c;
     51a:	00ca8023          	sb	a2,0(s5)
  for (int i = charCount; i < width; ++i)
     51e:	0485                	addi	s1,s1,1
  tohost = c;
     520:	00ca8023          	sb	a2,0(s5)
  for (int i = charCount; i < width; ++i)
     524:	0485                	addi	s1,s1,1
  tohost = c;
     526:	00ca8023          	sb	a2,0(s5)
  for (int i = charCount; i < width; ++i)
     52a:	0485                	addi	s1,s1,1
  tohost = c;
     52c:	00ca8023          	sb	a2,0(s5)
  for (int i = charCount; i < width; ++i)
     530:	0485                	addi	s1,s1,1
  tohost = c;
     532:	00ca8023          	sb	a2,0(s5)
  for (int i = charCount; i < width; ++i)
     536:	0485                	addi	s1,s1,1
  tohost = c;
     538:	00ca8023          	sb	a2,0(s5)
  for (int i = charCount; i < width; ++i)
     53c:	0485                	addi	s1,s1,1
     53e:	02968563          	beq	a3,s1,568 <whisperPrintfImpl+0x522>
  tohost = c;
     542:	00ca8023          	sb	a2,0(s5)
     546:	00ca8023          	sb	a2,0(s5)
     54a:	00ca8023          	sb	a2,0(s5)
     54e:	00ca8023          	sb	a2,0(s5)
     552:	00ca8023          	sb	a2,0(s5)
     556:	00ca8023          	sb	a2,0(s5)
     55a:	00ca8023          	sb	a2,0(s5)
     55e:	00ca8023          	sb	a2,0(s5)
  for (int i = charCount; i < width; ++i)
     562:	04a1                	addi	s1,s1,8
     564:	fc969fe3          	bne	a3,s1,542 <whisperPrintfImpl+0x4fc>
     568:	00b10613          	addi	a2,sp,11
     56c:	40c306b3          	sub	a3,t1,a2
     570:	0076f913          	andi	s2,a3,7
     574:	06090963          	beqz	s2,5e6 <whisperPrintfImpl+0x5a0>
     578:	4985                	li	s3,1
     57a:	05390f63          	beq	s2,s3,5d8 <whisperPrintfImpl+0x592>
     57e:	4409                	li	s0,2
     580:	04890763          	beq	s2,s0,5ce <whisperPrintfImpl+0x588>
     584:	4b0d                	li	s6,3
     586:	03690f63          	beq	s2,s6,5c4 <whisperPrintfImpl+0x57e>
     58a:	4a11                	li	s4,4
     58c:	03490763          	beq	s2,s4,5ba <whisperPrintfImpl+0x574>
     590:	4495                	li	s1,5
     592:	00990f63          	beq	s2,s1,5b0 <whisperPrintfImpl+0x56a>
     596:	4699                	li	a3,6
     598:	00d90763          	beq	s2,a3,5a6 <whisperPrintfImpl+0x560>
    whisperPutc(*p--);
     59c:	00034903          	lbu	s2,0(t1)
     5a0:	137d                	addi	t1,t1,-1
  tohost = c;
     5a2:	012a8023          	sb	s2,0(s5)
    whisperPutc(*p--);
     5a6:	00034983          	lbu	s3,0(t1)
     5aa:	137d                	addi	t1,t1,-1
  tohost = c;
     5ac:	013a8023          	sb	s3,0(s5)
    whisperPutc(*p--);
     5b0:	00034403          	lbu	s0,0(t1)
     5b4:	137d                	addi	t1,t1,-1
  tohost = c;
     5b6:	008a8023          	sb	s0,0(s5)
    whisperPutc(*p--);
     5ba:	00034b03          	lbu	s6,0(t1)
     5be:	137d                	addi	t1,t1,-1
  tohost = c;
     5c0:	016a8023          	sb	s6,0(s5)
    whisperPutc(*p--);
     5c4:	00034a03          	lbu	s4,0(t1)
     5c8:	137d                	addi	t1,t1,-1
  tohost = c;
     5ca:	014a8023          	sb	s4,0(s5)
    whisperPutc(*p--);
     5ce:	00034483          	lbu	s1,0(t1)
     5d2:	137d                	addi	t1,t1,-1
  tohost = c;
     5d4:	009a8023          	sb	s1,0(s5)
    whisperPutc(*p--);
     5d8:	00034683          	lbu	a3,0(t1)
     5dc:	137d                	addi	t1,t1,-1
  tohost = c;
     5de:	00da8023          	sb	a3,0(s5)
  for (int i = 0; i < charCount; ++i)
     5e2:	04c30563          	beq	t1,a2,62c <whisperPrintfImpl+0x5e6>
    whisperPutc(*p--);
     5e6:	00034983          	lbu	s3,0(t1)
     5ea:	fff34903          	lbu	s2,-1(t1)
     5ee:	ffe34403          	lbu	s0,-2(t1)
  tohost = c;
     5f2:	013a8023          	sb	s3,0(s5)
    whisperPutc(*p--);
     5f6:	ffd34b03          	lbu	s6,-3(t1)
  tohost = c;
     5fa:	012a8023          	sb	s2,0(s5)
    whisperPutc(*p--);
     5fe:	ffc34a03          	lbu	s4,-4(t1)
  tohost = c;
     602:	008a8023          	sb	s0,0(s5)
    whisperPutc(*p--);
     606:	ffb34683          	lbu	a3,-5(t1)
  tohost = c;
     60a:	016a8023          	sb	s6,0(s5)
    whisperPutc(*p--);
     60e:	ffa34483          	lbu	s1,-6(t1)
  tohost = c;
     612:	014a8023          	sb	s4,0(s5)
    whisperPutc(*p--);
     616:	ff934983          	lbu	s3,-7(t1)
  tohost = c;
     61a:	00da8023          	sb	a3,0(s5)
     61e:	009a8023          	sb	s1,0(s5)
    whisperPutc(*p--);
     622:	1361                	addi	t1,t1,-8
  tohost = c;
     624:	013a8023          	sb	s3,0(s5)
  for (int i = 0; i < charCount; ++i)
     628:	fac31fe3          	bne	t1,a2,5e6 <whisperPrintfImpl+0x5a0>
          count += whisperPrintInt(va_arg(ap, int), width, pad, 8);
     62c:	953a                	add	a0,a0,a4
          break;
     62e:	b60d                	j	150 <whisperPrintfImpl+0x10a>
          count += whisperPuts(va_arg(ap, char*));
     630:	4198                	lw	a4,0(a1)
     632:	d0580ab7          	lui	s5,0xd0580
     636:	0591                	addi	a1,a1,4
  while (*s)
     638:	00074483          	lbu	s1,0(a4)
     63c:	ccb1                	beqz	s1,698 <whisperPrintfImpl+0x652>
  tohost = c;
     63e:	009a8023          	sb	s1,0(s5) # d0580000 <tohost+0x0>
  while (*s)
     642:	00174603          	lbu	a2,1(a4)
     646:	ca29                	beqz	a2,698 <whisperPrintfImpl+0x652>
  tohost = c;
     648:	00ca8023          	sb	a2,0(s5)
  while (*s)
     64c:	00274303          	lbu	t1,2(a4)
     650:	04030463          	beqz	t1,698 <whisperPrintfImpl+0x652>
  tohost = c;
     654:	006a8023          	sb	t1,0(s5)
  while (*s)
     658:	00374903          	lbu	s2,3(a4)
     65c:	02090e63          	beqz	s2,698 <whisperPrintfImpl+0x652>
  tohost = c;
     660:	012a8023          	sb	s2,0(s5)
  while (*s)
     664:	00474403          	lbu	s0,4(a4)
     668:	c805                	beqz	s0,698 <whisperPrintfImpl+0x652>
  tohost = c;
     66a:	008a8023          	sb	s0,0(s5)
  while (*s)
     66e:	00574b03          	lbu	s6,5(a4)
     672:	020b0363          	beqz	s6,698 <whisperPrintfImpl+0x652>
  tohost = c;
     676:	016a8023          	sb	s6,0(s5)
  while (*s)
     67a:	00674a03          	lbu	s4,6(a4)
     67e:	000a0d63          	beqz	s4,698 <whisperPrintfImpl+0x652>
  tohost = c;
     682:	014a8023          	sb	s4,0(s5)
  while (*s)
     686:	00774683          	lbu	a3,7(a4)
     68a:	c699                	beqz	a3,698 <whisperPrintfImpl+0x652>
    whisperPutc(*s++);
     68c:	0721                	addi	a4,a4,8
  tohost = c;
     68e:	00da8023          	sb	a3,0(s5)
  while (*s)
     692:	00074483          	lbu	s1,0(a4)
     696:	f4c5                	bnez	s1,63e <whisperPrintfImpl+0x5f8>
  tohost = c;
     698:	49a9                	li	s3,10
     69a:	013a8023          	sb	s3,0(s5)
          count += whisperPuts(va_arg(ap, char*));
     69e:	0505                	addi	a0,a0,1
          break;
     6a0:	bc45                	j	150 <whisperPrintfImpl+0x10a>
          count += whisperPrintDecimal(va_arg(ap, int), width, pad);
     6a2:	0005a983          	lw	s3,0(a1)
     6a6:	0591                	addi	a1,a1,4
  if (neg)
     6a8:	4609c263          	bltz	s3,b0c <whisperPrintfImpl+0xac6>
     6ac:	834e                	mv	t1,s3
     6ae:	d0580437          	lui	s0,0xd0580
     6b2:	4701                	li	a4,0
      char c = '0' + (value % 10);
     6b4:	44a9                	li	s1,10
     6b6:	02936ab3          	rem	s5,t1,s1
     6ba:	893a                	mv	s2,a4
      buffer[charCount++] = c;
     6bc:	00c10b13          	addi	s6,sp,12
     6c0:	0705                	addi	a4,a4,1
     6c2:	9b3a                	add	s6,s6,a4
     6c4:	8a3a                	mv	s4,a4
      value = value / 10;
     6c6:	02934333          	div	t1,t1,s1
      char c = '0' + (value % 10);
     6ca:	030a8a93          	addi	s5,s5,48
      buffer[charCount++] = c;
     6ce:	ff5b0fa3          	sb	s5,-1(s6)
  while (value);
     6d2:	0e030263          	beqz	t1,7b6 <whisperPrintfImpl+0x770>
      char c = '0' + (value % 10);
     6d6:	02936ab3          	rem	s5,t1,s1
     6da:	893a                	mv	s2,a4
      buffer[charCount++] = c;
     6dc:	00c10b13          	addi	s6,sp,12
     6e0:	0705                	addi	a4,a4,1
     6e2:	9b3a                	add	s6,s6,a4
      value = value / 10;
     6e4:	02934333          	div	t1,t1,s1
      char c = '0' + (value % 10);
     6e8:	030a8a93          	addi	s5,s5,48
      buffer[charCount++] = c;
     6ec:	ff5b0fa3          	sb	s5,-1(s6)
  while (value);
     6f0:	0c030363          	beqz	t1,7b6 <whisperPrintfImpl+0x770>
      char c = '0' + (value % 10);
     6f4:	02936ab3          	rem	s5,t1,s1
     6f8:	893a                	mv	s2,a4
      buffer[charCount++] = c;
     6fa:	00c10b13          	addi	s6,sp,12
     6fe:	002a0713          	addi	a4,s4,2
     702:	9b3a                	add	s6,s6,a4
      value = value / 10;
     704:	02934333          	div	t1,t1,s1
      char c = '0' + (value % 10);
     708:	030a8a93          	addi	s5,s5,48
      buffer[charCount++] = c;
     70c:	ff5b0fa3          	sb	s5,-1(s6)
  while (value);
     710:	0a030363          	beqz	t1,7b6 <whisperPrintfImpl+0x770>
      char c = '0' + (value % 10);
     714:	02936ab3          	rem	s5,t1,s1
     718:	893a                	mv	s2,a4
      buffer[charCount++] = c;
     71a:	00c10b13          	addi	s6,sp,12
     71e:	003a0713          	addi	a4,s4,3
     722:	9b3a                	add	s6,s6,a4
      value = value / 10;
     724:	02934333          	div	t1,t1,s1
      char c = '0' + (value % 10);
     728:	030a8a93          	addi	s5,s5,48
      buffer[charCount++] = c;
     72c:	ff5b0fa3          	sb	s5,-1(s6)
  while (value);
     730:	08030363          	beqz	t1,7b6 <whisperPrintfImpl+0x770>
      char c = '0' + (value % 10);
     734:	02936ab3          	rem	s5,t1,s1
     738:	893a                	mv	s2,a4
      buffer[charCount++] = c;
     73a:	00c10b13          	addi	s6,sp,12
     73e:	004a0713          	addi	a4,s4,4
     742:	9b3a                	add	s6,s6,a4
      value = value / 10;
     744:	02934333          	div	t1,t1,s1
      char c = '0' + (value % 10);
     748:	030a8a93          	addi	s5,s5,48
      buffer[charCount++] = c;
     74c:	ff5b0fa3          	sb	s5,-1(s6)
  while (value);
     750:	06030363          	beqz	t1,7b6 <whisperPrintfImpl+0x770>
      char c = '0' + (value % 10);
     754:	02936ab3          	rem	s5,t1,s1
     758:	893a                	mv	s2,a4
      buffer[charCount++] = c;
     75a:	00c10b13          	addi	s6,sp,12
     75e:	005a0713          	addi	a4,s4,5
     762:	9b3a                	add	s6,s6,a4
      value = value / 10;
     764:	02934333          	div	t1,t1,s1
      char c = '0' + (value % 10);
     768:	030a8a93          	addi	s5,s5,48
      buffer[charCount++] = c;
     76c:	ff5b0fa3          	sb	s5,-1(s6)
  while (value);
     770:	04030363          	beqz	t1,7b6 <whisperPrintfImpl+0x770>
      char c = '0' + (value % 10);
     774:	02936ab3          	rem	s5,t1,s1
     778:	893a                	mv	s2,a4
      buffer[charCount++] = c;
     77a:	00c10b13          	addi	s6,sp,12
     77e:	006a0713          	addi	a4,s4,6
     782:	9b3a                	add	s6,s6,a4
      value = value / 10;
     784:	02934333          	div	t1,t1,s1
      char c = '0' + (value % 10);
     788:	030a8a93          	addi	s5,s5,48
      buffer[charCount++] = c;
     78c:	ff5b0fa3          	sb	s5,-1(s6)
  while (value);
     790:	02030363          	beqz	t1,7b6 <whisperPrintfImpl+0x770>
      char c = '0' + (value % 10);
     794:	02936ab3          	rem	s5,t1,s1
     798:	893a                	mv	s2,a4
      buffer[charCount++] = c;
     79a:	007a0713          	addi	a4,s4,7
     79e:	00c10a13          	addi	s4,sp,12
     7a2:	00ea0b33          	add	s6,s4,a4
      value = value / 10;
     7a6:	02934333          	div	t1,t1,s1
      char c = '0' + (value % 10);
     7aa:	030a8a93          	addi	s5,s5,48
      buffer[charCount++] = c;
     7ae:	ff5b0fa3          	sb	s5,-1(s6)
  while (value);
     7b2:	f00312e3          	bnez	t1,6b6 <whisperPrintfImpl+0x670>
  char* p = buffer + charCount - 1;
     7b6:	0064                	addi	s1,sp,12
     7b8:	01248333          	add	t1,s1,s2
      buffer[charCount++] = c;
     7bc:	84ba                	mv	s1,a4
  for (int i = charCount; i < width; ++i)
     7be:	08d75563          	bge	a4,a3,848 <whisperPrintfImpl+0x802>
     7c2:	40e68a33          	sub	s4,a3,a4
     7c6:	007a7b13          	andi	s6,s4,7
     7ca:	040b0c63          	beqz	s6,822 <whisperPrintfImpl+0x7dc>
     7ce:	4a85                	li	s5,1
     7d0:	055b0463          	beq	s6,s5,818 <whisperPrintfImpl+0x7d2>
     7d4:	4a09                	li	s4,2
     7d6:	034b0e63          	beq	s6,s4,812 <whisperPrintfImpl+0x7cc>
     7da:	4a8d                	li	s5,3
     7dc:	035b0863          	beq	s6,s5,80c <whisperPrintfImpl+0x7c6>
     7e0:	4a11                	li	s4,4
     7e2:	034b0263          	beq	s6,s4,806 <whisperPrintfImpl+0x7c0>
     7e6:	4a95                	li	s5,5
     7e8:	015b0c63          	beq	s6,s5,800 <whisperPrintfImpl+0x7ba>
     7ec:	4a19                	li	s4,6
     7ee:	014b0663          	beq	s6,s4,7fa <whisperPrintfImpl+0x7b4>
  tohost = c;
     7f2:	00c40023          	sb	a2,0(s0) # d0580000 <tohost+0x0>
  for (int i = charCount; i < width; ++i)
     7f6:	00170493          	addi	s1,a4,1
  tohost = c;
     7fa:	00c40023          	sb	a2,0(s0)
  for (int i = charCount; i < width; ++i)
     7fe:	0485                	addi	s1,s1,1
  tohost = c;
     800:	00c40023          	sb	a2,0(s0)
  for (int i = charCount; i < width; ++i)
     804:	0485                	addi	s1,s1,1
  tohost = c;
     806:	00c40023          	sb	a2,0(s0)
  for (int i = charCount; i < width; ++i)
     80a:	0485                	addi	s1,s1,1
  tohost = c;
     80c:	00c40023          	sb	a2,0(s0)
  for (int i = charCount; i < width; ++i)
     810:	0485                	addi	s1,s1,1
  tohost = c;
     812:	00c40023          	sb	a2,0(s0)
  for (int i = charCount; i < width; ++i)
     816:	0485                	addi	s1,s1,1
  tohost = c;
     818:	00c40023          	sb	a2,0(s0)
  for (int i = charCount; i < width; ++i)
     81c:	0485                	addi	s1,s1,1
     81e:	02d48563          	beq	s1,a3,848 <whisperPrintfImpl+0x802>
  tohost = c;
     822:	00c40023          	sb	a2,0(s0)
     826:	00c40023          	sb	a2,0(s0)
     82a:	00c40023          	sb	a2,0(s0)
     82e:	00c40023          	sb	a2,0(s0)
     832:	00c40023          	sb	a2,0(s0)
     836:	00c40023          	sb	a2,0(s0)
     83a:	00c40023          	sb	a2,0(s0)
     83e:	00c40023          	sb	a2,0(s0)
  for (int i = charCount; i < width; ++i)
     842:	04a1                	addi	s1,s1,8
     844:	fcd49fe3          	bne	s1,a3,822 <whisperPrintfImpl+0x7dc>
     848:	00b10613          	addi	a2,sp,11
     84c:	40c306b3          	sub	a3,t1,a2
     850:	0076fb13          	andi	s6,a3,7
     854:	060b0963          	beqz	s6,8c6 <whisperPrintfImpl+0x880>
     858:	4a85                	li	s5,1
     85a:	055b0f63          	beq	s6,s5,8b8 <whisperPrintfImpl+0x872>
     85e:	4a09                	li	s4,2
     860:	054b0763          	beq	s6,s4,8ae <whisperPrintfImpl+0x868>
     864:	448d                	li	s1,3
     866:	029b0f63          	beq	s6,s1,8a4 <whisperPrintfImpl+0x85e>
     86a:	4691                	li	a3,4
     86c:	02db0763          	beq	s6,a3,89a <whisperPrintfImpl+0x854>
     870:	4a95                	li	s5,5
     872:	015b0f63          	beq	s6,s5,890 <whisperPrintfImpl+0x84a>
     876:	4a19                	li	s4,6
     878:	014b0763          	beq	s6,s4,886 <whisperPrintfImpl+0x840>
    whisperPutc(*p--);
     87c:	00034b03          	lbu	s6,0(t1)
     880:	137d                	addi	t1,t1,-1
  tohost = c;
     882:	01640023          	sb	s6,0(s0)
    whisperPutc(*p--);
     886:	00034483          	lbu	s1,0(t1)
     88a:	137d                	addi	t1,t1,-1
  tohost = c;
     88c:	00940023          	sb	s1,0(s0)
    whisperPutc(*p--);
     890:	00034683          	lbu	a3,0(t1)
     894:	137d                	addi	t1,t1,-1
  tohost = c;
     896:	00d40023          	sb	a3,0(s0)
    whisperPutc(*p--);
     89a:	00034a83          	lbu	s5,0(t1)
     89e:	137d                	addi	t1,t1,-1
  tohost = c;
     8a0:	01540023          	sb	s5,0(s0)
    whisperPutc(*p--);
     8a4:	00034a03          	lbu	s4,0(t1)
     8a8:	137d                	addi	t1,t1,-1
  tohost = c;
     8aa:	01440023          	sb	s4,0(s0)
    whisperPutc(*p--);
     8ae:	00034b03          	lbu	s6,0(t1)
     8b2:	137d                	addi	t1,t1,-1
  tohost = c;
     8b4:	01640023          	sb	s6,0(s0)
    whisperPutc(*p--);
     8b8:	00034483          	lbu	s1,0(t1)
     8bc:	137d                	addi	t1,t1,-1
  tohost = c;
     8be:	00940023          	sb	s1,0(s0)
  for (int i = 0; i < charCount; ++i)
     8c2:	04c30563          	beq	t1,a2,90c <whisperPrintfImpl+0x8c6>
    whisperPutc(*p--);
     8c6:	00034a83          	lbu	s5,0(t1)
     8ca:	fff34a03          	lbu	s4,-1(t1)
     8ce:	ffe34683          	lbu	a3,-2(t1)
  tohost = c;
     8d2:	01540023          	sb	s5,0(s0)
    whisperPutc(*p--);
     8d6:	ffd34b03          	lbu	s6,-3(t1)
  tohost = c;
     8da:	01440023          	sb	s4,0(s0)
    whisperPutc(*p--);
     8de:	ffc34a83          	lbu	s5,-4(t1)
  tohost = c;
     8e2:	00d40023          	sb	a3,0(s0)
    whisperPutc(*p--);
     8e6:	ffb34a03          	lbu	s4,-5(t1)
  tohost = c;
     8ea:	01640023          	sb	s6,0(s0)
    whisperPutc(*p--);
     8ee:	ffa34483          	lbu	s1,-6(t1)
  tohost = c;
     8f2:	01540023          	sb	s5,0(s0)
    whisperPutc(*p--);
     8f6:	ff934683          	lbu	a3,-7(t1)
  tohost = c;
     8fa:	01440023          	sb	s4,0(s0)
     8fe:	00940023          	sb	s1,0(s0)
    whisperPutc(*p--);
     902:	1361                	addi	t1,t1,-8
  tohost = c;
     904:	00d40023          	sb	a3,0(s0)
  for (int i = 0; i < charCount; ++i)
     908:	fac31fe3          	bne	t1,a2,8c6 <whisperPrintfImpl+0x880>
  if (neg)
     90c:	d209d0e3          	bgez	s3,62c <whisperPrintfImpl+0x5e6>
    charCount++;
     910:	00290713          	addi	a4,s2,2
          count += whisperPrintInt(va_arg(ap, int), width, pad, 8);
     914:	953a                	add	a0,a0,a4
          break;
     916:	b82d                	j	150 <whisperPrintfImpl+0x10a>
  unsigned uu = value;
     918:	4194                	lw	a3,0(a1)
  int charCount = 0;
     91a:	4701                	li	a4,0
          count += whisperPrintInt(va_arg(ap, int), width, pad, 8);
     91c:	0591                	addi	a1,a1,4
          buffer[charCount++] = c;
     91e:	833a                	mv	t1,a4
          char c = '0' + (uu & 7);
     920:	0076fa93          	andi	s5,a3,7
          buffer[charCount++] = c;
     924:	0705                	addi	a4,a4,1
     926:	0070                	addi	a2,sp,12
     928:	00e60933          	add	s2,a2,a4
          char c = '0' + (uu & 7);
     92c:	030a8413          	addi	s0,s5,48
          buffer[charCount++] = c;
     930:	fe890fa3          	sb	s0,-1(s2)
          uu >>= 3;
     934:	0036db13          	srli	s6,a3,0x3
          buffer[charCount++] = c;
     938:	8a3a                	mv	s4,a4
      while (uu);
     93a:	0e0b0263          	beqz	s6,a1e <whisperPrintfImpl+0x9d8>
          buffer[charCount++] = c;
     93e:	833a                	mv	t1,a4
          char c = '0' + (uu & 7);
     940:	007b7993          	andi	s3,s6,7
          buffer[charCount++] = c;
     944:	0705                	addi	a4,a4,1
     946:	0064                	addi	s1,sp,12
     948:	00e48ab3          	add	s5,s1,a4
          char c = '0' + (uu & 7);
     94c:	03098613          	addi	a2,s3,48
          buffer[charCount++] = c;
     950:	feca8fa3          	sb	a2,-1(s5)
          uu >>= 3;
     954:	0066d913          	srli	s2,a3,0x6
      while (uu);
     958:	0c090363          	beqz	s2,a1e <whisperPrintfImpl+0x9d8>
          buffer[charCount++] = c;
     95c:	833a                	mv	t1,a4
          char c = '0' + (uu & 7);
     95e:	00797413          	andi	s0,s2,7
          buffer[charCount++] = c;
     962:	002a0713          	addi	a4,s4,2
     966:	00c10b13          	addi	s6,sp,12
     96a:	00eb09b3          	add	s3,s6,a4
          char c = '0' + (uu & 7);
     96e:	03040493          	addi	s1,s0,48
          buffer[charCount++] = c;
     972:	fe998fa3          	sb	s1,-1(s3)
          uu >>= 3;
     976:	0096da93          	srli	s5,a3,0x9
      while (uu);
     97a:	0a0a8263          	beqz	s5,a1e <whisperPrintfImpl+0x9d8>
          buffer[charCount++] = c;
     97e:	833a                	mv	t1,a4
          char c = '0' + (uu & 7);
     980:	007af613          	andi	a2,s5,7
          buffer[charCount++] = c;
     984:	003a0713          	addi	a4,s4,3
     988:	00c10913          	addi	s2,sp,12
     98c:	00e90433          	add	s0,s2,a4
          char c = '0' + (uu & 7);
     990:	03060b13          	addi	s6,a2,48
          buffer[charCount++] = c;
     994:	ff640fa3          	sb	s6,-1(s0)
          uu >>= 3;
     998:	00c6d993          	srli	s3,a3,0xc
      while (uu);
     99c:	08098163          	beqz	s3,a1e <whisperPrintfImpl+0x9d8>
          buffer[charCount++] = c;
     9a0:	833a                	mv	t1,a4
          char c = '0' + (uu & 7);
     9a2:	0079fa93          	andi	s5,s3,7
          buffer[charCount++] = c;
     9a6:	004a0713          	addi	a4,s4,4
     9aa:	0064                	addi	s1,sp,12
     9ac:	00e48933          	add	s2,s1,a4
          char c = '0' + (uu & 7);
     9b0:	030a8613          	addi	a2,s5,48
          buffer[charCount++] = c;
     9b4:	fec90fa3          	sb	a2,-1(s2)
          uu >>= 3;
     9b8:	00f6d413          	srli	s0,a3,0xf
      while (uu);
     9bc:	c02d                	beqz	s0,a1e <whisperPrintfImpl+0x9d8>
          buffer[charCount++] = c;
     9be:	833a                	mv	t1,a4
          char c = '0' + (uu & 7);
     9c0:	00747b13          	andi	s6,s0,7
          buffer[charCount++] = c;
     9c4:	005a0713          	addi	a4,s4,5
     9c8:	00c10993          	addi	s3,sp,12
     9cc:	00e98ab3          	add	s5,s3,a4
          char c = '0' + (uu & 7);
     9d0:	030b0493          	addi	s1,s6,48
          buffer[charCount++] = c;
     9d4:	fe9a8fa3          	sb	s1,-1(s5)
          uu >>= 3;
     9d8:	0126d913          	srli	s2,a3,0x12
      while (uu);
     9dc:	04090163          	beqz	s2,a1e <whisperPrintfImpl+0x9d8>
          buffer[charCount++] = c;
     9e0:	833a                	mv	t1,a4
          char c = '0' + (uu & 7);
     9e2:	00797613          	andi	a2,s2,7
          buffer[charCount++] = c;
     9e6:	006a0713          	addi	a4,s4,6
     9ea:	0060                	addi	s0,sp,12
     9ec:	00e40b33          	add	s6,s0,a4
          char c = '0' + (uu & 7);
     9f0:	03060993          	addi	s3,a2,48
          buffer[charCount++] = c;
     9f4:	ff3b0fa3          	sb	s3,-1(s6)
          uu >>= 3;
     9f8:	0156da93          	srli	s5,a3,0x15
      while (uu);
     9fc:	020a8163          	beqz	s5,a1e <whisperPrintfImpl+0x9d8>
          buffer[charCount++] = c;
     a00:	833a                	mv	t1,a4
          char c = '0' + (uu & 7);
     a02:	007af493          	andi	s1,s5,7
          buffer[charCount++] = c;
     a06:	007a0713          	addi	a4,s4,7
     a0a:	00c10a13          	addi	s4,sp,12
     a0e:	00ea0933          	add	s2,s4,a4
          char c = '0' + (uu & 7);
     a12:	03048613          	addi	a2,s1,48
          buffer[charCount++] = c;
     a16:	fec90fa3          	sb	a2,-1(s2)
          uu >>= 3;
     a1a:	82e1                	srli	a3,a3,0x18
      while (uu);
     a1c:	f289                	bnez	a3,91e <whisperPrintfImpl+0x8d8>
  char* p = buffer + charCount - 1;
     a1e:	0060                	addi	s0,sp,12
     a20:	006406b3          	add	a3,s0,t1
  for (unsigned i = 0; i < charCount; ++i)
     a24:	00b10b13          	addi	s6,sp,11
     a28:	416689b3          	sub	s3,a3,s6
     a2c:	0079fa93          	andi	s5,s3,7
     a30:	d0580a37          	lui	s4,0xd0580
     a34:	060a8963          	beqz	s5,aa6 <whisperPrintfImpl+0xa60>
     a38:	4305                	li	t1,1
     a3a:	046a8f63          	beq	s5,t1,a98 <whisperPrintfImpl+0xa52>
     a3e:	4489                	li	s1,2
     a40:	049a8763          	beq	s5,s1,a8e <whisperPrintfImpl+0xa48>
     a44:	490d                	li	s2,3
     a46:	032a8f63          	beq	s5,s2,a84 <whisperPrintfImpl+0xa3e>
     a4a:	4611                	li	a2,4
     a4c:	02ca8763          	beq	s5,a2,a7a <whisperPrintfImpl+0xa34>
     a50:	4415                	li	s0,5
     a52:	008a8f63          	beq	s5,s0,a70 <whisperPrintfImpl+0xa2a>
     a56:	4999                	li	s3,6
     a58:	013a8763          	beq	s5,s3,a66 <whisperPrintfImpl+0xa20>
    whisperPutc(*p--);
     a5c:	0006ca83          	lbu	s5,0(a3)
     a60:	16fd                	addi	a3,a3,-1
  tohost = c;
     a62:	015a0023          	sb	s5,0(s4) # d0580000 <tohost+0x0>
    whisperPutc(*p--);
     a66:	0006c303          	lbu	t1,0(a3)
     a6a:	16fd                	addi	a3,a3,-1
  tohost = c;
     a6c:	006a0023          	sb	t1,0(s4)
    whisperPutc(*p--);
     a70:	0006c483          	lbu	s1,0(a3)
     a74:	16fd                	addi	a3,a3,-1
  tohost = c;
     a76:	009a0023          	sb	s1,0(s4)
    whisperPutc(*p--);
     a7a:	0006c903          	lbu	s2,0(a3)
     a7e:	16fd                	addi	a3,a3,-1
  tohost = c;
     a80:	012a0023          	sb	s2,0(s4)
    whisperPutc(*p--);
     a84:	0006c603          	lbu	a2,0(a3)
     a88:	16fd                	addi	a3,a3,-1
  tohost = c;
     a8a:	00ca0023          	sb	a2,0(s4)
    whisperPutc(*p--);
     a8e:	0006c403          	lbu	s0,0(a3)
     a92:	16fd                	addi	a3,a3,-1
  tohost = c;
     a94:	008a0023          	sb	s0,0(s4)
    whisperPutc(*p--);
     a98:	0006c983          	lbu	s3,0(a3)
     a9c:	16fd                	addi	a3,a3,-1
  tohost = c;
     a9e:	013a0023          	sb	s3,0(s4)
  for (unsigned i = 0; i < charCount; ++i)
     aa2:	b96685e3          	beq	a3,s6,62c <whisperPrintfImpl+0x5e6>
    whisperPutc(*p--);
     aa6:	0006ca83          	lbu	s5,0(a3)
     aaa:	fff6c903          	lbu	s2,-1(a3)
     aae:	ffe6c303          	lbu	t1,-2(a3)
  tohost = c;
     ab2:	015a0023          	sb	s5,0(s4)
    whisperPutc(*p--);
     ab6:	ffd6c483          	lbu	s1,-3(a3)
  tohost = c;
     aba:	012a0023          	sb	s2,0(s4)
    whisperPutc(*p--);
     abe:	ffc6c603          	lbu	a2,-4(a3)
  tohost = c;
     ac2:	006a0023          	sb	t1,0(s4)
    whisperPutc(*p--);
     ac6:	ffb6c403          	lbu	s0,-5(a3)
  tohost = c;
     aca:	009a0023          	sb	s1,0(s4)
    whisperPutc(*p--);
     ace:	ffa6c983          	lbu	s3,-6(a3)
  tohost = c;
     ad2:	00ca0023          	sb	a2,0(s4)
    whisperPutc(*p--);
     ad6:	ff96ca83          	lbu	s5,-7(a3)
  tohost = c;
     ada:	008a0023          	sb	s0,0(s4)
     ade:	013a0023          	sb	s3,0(s4)
    whisperPutc(*p--);
     ae2:	16e1                	addi	a3,a3,-8
  tohost = c;
     ae4:	015a0023          	sb	s5,0(s4)
  for (unsigned i = 0; i < charCount; ++i)
     ae8:	fb669fe3          	bne	a3,s6,aa6 <whisperPrintfImpl+0xa60>
     aec:	b681                	j	62c <whisperPrintfImpl+0x5e6>
          whisperPutc(va_arg(ap, int));
     aee:	0005c983          	lbu	s3,0(a1)
  tohost = c;
     af2:	d0580437          	lui	s0,0xd0580
          ++count;
     af6:	0505                	addi	a0,a0,1
  tohost = c;
     af8:	01340023          	sb	s3,0(s0) # d0580000 <tohost+0x0>
          whisperPutc(va_arg(ap, int));
     afc:	0591                	addi	a1,a1,4
          break;
     afe:	e52ff06f          	j	150 <whisperPrintfImpl+0x10a>
      while (*fp == '0')
     b02:	8732                	mv	a4,a2
      char pad = ' ';
     b04:	02000613          	li	a2,32
     b08:	e00ff06f          	j	108 <whisperPrintfImpl+0xc2>
  tohost = c;
     b0c:	d0580437          	lui	s0,0xd0580
     b10:	02d00713          	li	a4,45
      value = -value;
     b14:	41300333          	neg	t1,s3
  tohost = c;
     b18:	00e40023          	sb	a4,0(s0) # d0580000 <tohost+0x0>
      width--;
     b1c:	16fd                	addi	a3,a3,-1
     b1e:	be51                	j	6b2 <whisperPrintfImpl+0x66c>
  int count = 0;  // Printed character count
     b20:	4501                	li	a0,0
  return count;
     b22:	8082                	ret

00000b24 <whisperPrintf>:


int
whisperPrintf(const char* format, ...)
{
     b24:	7139                	addi	sp,sp,-64
  va_list ap;

  va_start(ap, format);
     b26:	02410313          	addi	t1,sp,36
{
     b2a:	d22e                	sw	a1,36(sp)
  int code = whisperPrintfImpl(format, ap);
     b2c:	859a                	mv	a1,t1
{
     b2e:	ce06                	sw	ra,28(sp)
     b30:	d432                	sw	a2,40(sp)
     b32:	d636                	sw	a3,44(sp)
     b34:	d83a                	sw	a4,48(sp)
     b36:	da3e                	sw	a5,52(sp)
     b38:	dc42                	sw	a6,56(sp)
     b3a:	de46                	sw	a7,60(sp)
  va_start(ap, format);
     b3c:	c61a                	sw	t1,12(sp)
  int code = whisperPrintfImpl(format, ap);
     b3e:	d08ff0ef          	jal	ra,46 <whisperPrintfImpl>
  va_end(ap);

  return code;
}
     b42:	40f2                	lw	ra,28(sp)
     b44:	6121                	addi	sp,sp,64
     b46:	8082                	ret

00000b48 <putchar>:

int
putchar(int c)
{
  return whisperPutc(c);
     b48:	0ff57513          	zext.b	a0,a0
  tohost = c;
     b4c:	d05807b7          	lui	a5,0xd0580
     b50:	00a78023          	sb	a0,0(a5) # d0580000 <tohost+0x0>
}
     b54:	8082                	ret

00000b56 <putc>:
struct FILE;

int
putc(int c, struct FILE* f)
{
  return whisperPutc(c);
     b56:	0ff57513          	zext.b	a0,a0
  tohost = c;
     b5a:	d05807b7          	lui	a5,0xd0580
     b5e:	00a78023          	sb	a0,0(a5) # d0580000 <tohost+0x0>
}
     b62:	8082                	ret

00000b64 <puts>:
  while (*s)
     b64:	00054803          	lbu	a6,0(a0)
     b68:	d05807b7          	lui	a5,0xd0580
     b6c:	04080f63          	beqz	a6,bca <puts+0x66>
  tohost = c;
     b70:	01078023          	sb	a6,0(a5) # d0580000 <tohost+0x0>
  while (*s)
     b74:	00154703          	lbu	a4,1(a0)
     b78:	cb29                	beqz	a4,bca <puts+0x66>
  tohost = c;
     b7a:	00e78023          	sb	a4,0(a5)
  while (*s)
     b7e:	00254283          	lbu	t0,2(a0)
     b82:	04028463          	beqz	t0,bca <puts+0x66>
  tohost = c;
     b86:	00578023          	sb	t0,0(a5)
  while (*s)
     b8a:	00354303          	lbu	t1,3(a0)
     b8e:	02030e63          	beqz	t1,bca <puts+0x66>
  tohost = c;
     b92:	00678023          	sb	t1,0(a5)
  while (*s)
     b96:	00454383          	lbu	t2,4(a0)
     b9a:	02038863          	beqz	t2,bca <puts+0x66>
  tohost = c;
     b9e:	00778023          	sb	t2,0(a5)
  while (*s)
     ba2:	00554583          	lbu	a1,5(a0)
     ba6:	c195                	beqz	a1,bca <puts+0x66>
  tohost = c;
     ba8:	00b78023          	sb	a1,0(a5)
  while (*s)
     bac:	00654603          	lbu	a2,6(a0)
     bb0:	ce09                	beqz	a2,bca <puts+0x66>
  tohost = c;
     bb2:	00c78023          	sb	a2,0(a5)
  while (*s)
     bb6:	00754683          	lbu	a3,7(a0)
    whisperPutc(*s++);
     bba:	0521                	addi	a0,a0,8
  while (*s)
     bbc:	c699                	beqz	a3,bca <puts+0x66>
  tohost = c;
     bbe:	00d78023          	sb	a3,0(a5)
  while (*s)
     bc2:	00054803          	lbu	a6,0(a0)
     bc6:	fa0815e3          	bnez	a6,b70 <puts+0xc>
  tohost = c;
     bca:	4529                	li	a0,10
     bcc:	00a78023          	sb	a0,0(a5)

int
puts(const char* s)
{
  return whisperPuts(s);
}
     bd0:	4505                	li	a0,1
     bd2:	8082                	ret

00000bd4 <printf>:

int
printf(const char* format, ...)
{
     bd4:	7139                	addi	sp,sp,-64
  va_list ap;

  va_start(ap, format);
     bd6:	02410313          	addi	t1,sp,36
{
     bda:	d22e                	sw	a1,36(sp)
  int code = whisperPrintfImpl(format, ap);
     bdc:	859a                	mv	a1,t1
{
     bde:	ce06                	sw	ra,28(sp)
     be0:	d432                	sw	a2,40(sp)
     be2:	d636                	sw	a3,44(sp)
     be4:	d83a                	sw	a4,48(sp)
     be6:	da3e                	sw	a5,52(sp)
     be8:	dc42                	sw	a6,56(sp)
     bea:	de46                	sw	a7,60(sp)
  va_start(ap, format);
     bec:	c61a                	sw	t1,12(sp)
  int code = whisperPrintfImpl(format, ap);
     bee:	c58ff0ef          	jal	ra,46 <whisperPrintfImpl>
  va_end(ap);

  return code;
}
     bf2:	40f2                	lw	ra,28(sp)
     bf4:	6121                	addi	sp,sp,64
     bf6:	8082                	ret

00000bf8 <get_mcycle>:
unsigned int mcyclel;
unsigned int mcycleh0 = 0, mcycleh1=1;
uint64_t cycles;

while(mcycleh0 != mcycleh1) {
    asm volatile ("csrr %0,mcycleh"  : "=r" (mcycleh0) );
     bf8:	b80025f3          	csrr	a1,mcycleh
    asm volatile ("csrr %0,mcycle"   : "=r" (mcyclel)  );
     bfc:	b0002573          	csrr	a0,mcycle
    asm volatile ("csrr %0,mcycleh"  : "=r" (mcycleh1) );
     c00:	b80027f3          	csrr	a5,mcycleh
while(mcycleh0 != mcycleh1) {
     c04:	06f58b63          	beq	a1,a5,c7a <get_mcycle+0x82>
    asm volatile ("csrr %0,mcycleh"  : "=r" (mcycleh0) );
     c08:	b80025f3          	csrr	a1,mcycleh
    asm volatile ("csrr %0,mcycle"   : "=r" (mcyclel)  );
     c0c:	b0002573          	csrr	a0,mcycle
    asm volatile ("csrr %0,mcycleh"  : "=r" (mcycleh1) );
     c10:	b80022f3          	csrr	t0,mcycleh
while(mcycleh0 != mcycleh1) {
     c14:	06558363          	beq	a1,t0,c7a <get_mcycle+0x82>
    asm volatile ("csrr %0,mcycleh"  : "=r" (mcycleh0) );
     c18:	b80025f3          	csrr	a1,mcycleh
    asm volatile ("csrr %0,mcycle"   : "=r" (mcyclel)  );
     c1c:	b0002573          	csrr	a0,mcycle
    asm volatile ("csrr %0,mcycleh"  : "=r" (mcycleh1) );
     c20:	b8002373          	csrr	t1,mcycleh
while(mcycleh0 != mcycleh1) {
     c24:	04658b63          	beq	a1,t1,c7a <get_mcycle+0x82>
    asm volatile ("csrr %0,mcycleh"  : "=r" (mcycleh0) );
     c28:	b80025f3          	csrr	a1,mcycleh
    asm volatile ("csrr %0,mcycle"   : "=r" (mcyclel)  );
     c2c:	b0002573          	csrr	a0,mcycle
    asm volatile ("csrr %0,mcycleh"  : "=r" (mcycleh1) );
     c30:	b80023f3          	csrr	t2,mcycleh
while(mcycleh0 != mcycleh1) {
     c34:	04758363          	beq	a1,t2,c7a <get_mcycle+0x82>
    asm volatile ("csrr %0,mcycleh"  : "=r" (mcycleh0) );
     c38:	b80025f3          	csrr	a1,mcycleh
    asm volatile ("csrr %0,mcycle"   : "=r" (mcyclel)  );
     c3c:	b0002573          	csrr	a0,mcycle
    asm volatile ("csrr %0,mcycleh"  : "=r" (mcycleh1) );
     c40:	b8002673          	csrr	a2,mcycleh
while(mcycleh0 != mcycleh1) {
     c44:	02c58b63          	beq	a1,a2,c7a <get_mcycle+0x82>
    asm volatile ("csrr %0,mcycleh"  : "=r" (mcycleh0) );
     c48:	b80025f3          	csrr	a1,mcycleh
    asm volatile ("csrr %0,mcycle"   : "=r" (mcyclel)  );
     c4c:	b0002573          	csrr	a0,mcycle
    asm volatile ("csrr %0,mcycleh"  : "=r" (mcycleh1) );
     c50:	b80026f3          	csrr	a3,mcycleh
while(mcycleh0 != mcycleh1) {
     c54:	02d58363          	beq	a1,a3,c7a <get_mcycle+0x82>
    asm volatile ("csrr %0,mcycleh"  : "=r" (mcycleh0) );
     c58:	b80025f3          	csrr	a1,mcycleh
    asm volatile ("csrr %0,mcycle"   : "=r" (mcyclel)  );
     c5c:	b0002573          	csrr	a0,mcycle
    asm volatile ("csrr %0,mcycleh"  : "=r" (mcycleh1) );
     c60:	b8002773          	csrr	a4,mcycleh
while(mcycleh0 != mcycleh1) {
     c64:	00e58b63          	beq	a1,a4,c7a <get_mcycle+0x82>
    asm volatile ("csrr %0,mcycleh"  : "=r" (mcycleh0) );
     c68:	b80025f3          	csrr	a1,mcycleh
    asm volatile ("csrr %0,mcycle"   : "=r" (mcyclel)  );
     c6c:	b0002573          	csrr	a0,mcycle
    asm volatile ("csrr %0,mcycleh"  : "=r" (mcycleh1) );
     c70:	b8002873          	csrr	a6,mcycleh
while(mcycleh0 != mcycleh1) {
     c74:	f90592e3          	bne	a1,a6,bf8 <get_mcycle>
     c78:	8082                	ret
}
cycles = mcycleh1;
return (cycles << 32) | mcyclel;

}
     c7a:	8082                	ret

00000c7c <cmp_idx>:
        Compare the idx item in a list cell, and regen the data.

        Can be used by mergesort.
*/
ee_s32 cmp_idx(list_data *a, list_data *b, core_results *res) {
        if (res==NULL) {
     c7c:	c619                	beqz	a2,c8a <cmp_idx+0xe>
                a->data16 = (a->data16 & 0xff00) | (0x00ff & (a->data16>>8));
                b->data16 = (b->data16 & 0xff00) | (0x00ff & (b->data16>>8));
        }
        return a->idx - b->idx;
     c7e:	00251503          	lh	a0,2(a0)
     c82:	00259583          	lh	a1,2(a1)
}
     c86:	8d0d                	sub	a0,a0,a1
     c88:	8082                	ret
                a->data16 = (a->data16 & 0xff00) | (0x00ff & (a->data16>>8));
     c8a:	00051783          	lh	a5,0(a0)
     c8e:	01079713          	slli	a4,a5,0x10
     c92:	01075293          	srli	t0,a4,0x10
     c96:	f007f313          	andi	t1,a5,-256
     c9a:	0082d393          	srli	t2,t0,0x8
     c9e:	00736633          	or	a2,t1,t2
     ca2:	00c51023          	sh	a2,0(a0)
                b->data16 = (b->data16 & 0xff00) | (0x00ff & (b->data16>>8));
     ca6:	00059683          	lh	a3,0(a1)
        return a->idx - b->idx;
     caa:	00251503          	lh	a0,2(a0)
                b->data16 = (b->data16 & 0xff00) | (0x00ff & (b->data16>>8));
     cae:	01069813          	slli	a6,a3,0x10
     cb2:	01085893          	srli	a7,a6,0x10
     cb6:	f006fe13          	andi	t3,a3,-256
     cba:	0088de93          	srli	t4,a7,0x8
     cbe:	01de6f33          	or	t5,t3,t4
     cc2:	01e59023          	sh	t5,0(a1)
        return a->idx - b->idx;
     cc6:	00259583          	lh	a1,2(a1)
}
     cca:	8d0d                	sub	a0,a0,a1
     ccc:	8082                	ret

00000cce <copy_info>:

void copy_info(list_data *to,list_data *from) {
        to->data16=from->data16;
     cce:	00059703          	lh	a4,0(a1)
        to->idx=from->idx;
     cd2:	00259783          	lh	a5,2(a1)
        to->data16=from->data16;
     cd6:	00e51023          	sh	a4,0(a0)
        to->idx=from->idx;
     cda:	00f51123          	sh	a5,2(a0)
}
     cde:	8082                	ret

00000ce0 <core_list_init>:

*/
list_head *core_list_init(ee_u32 blksize, list_head *memblock, ee_s16 seed) {
        /* calculated pointers for the list */
        ee_u32 per_item=16+sizeof(struct list_data_s);
        ee_u32 size=(blksize/per_item)-2; /* to accomodate systems with 64b pointers, and make sure same code is executed, set max list elements */
     ce0:	47d1                	li	a5,20
     ce2:	02f55533          	divu	a0,a0,a5
        ee_u32 i;
        list_head *finder,*list=memblock;
        list_data info;

        /* create a fake items for the list head and tail */
        list->next=NULL;
     ce6:	0005a023          	sw	zero,0(a1)
list_head *core_list_init(ee_u32 blksize, list_head *memblock, ee_s16 seed) {
     cea:	87ae                	mv	a5,a1
*/
list_head *core_list_insert_new(list_head *insert_point, list_data *info, list_head **memblock, list_data **datablock
        , list_head *memblock_end, list_data *datablock_end) {
        list_head *newitem;

        if ((*memblock+1) >= memblock_end)
     cec:	01058813          	addi	a6,a1,16
        memblock++;
     cf0:	00858713          	addi	a4,a1,8
        list->info->data16=(ee_s16)0x8080;
     cf4:	76e1                	lui	a3,0xffff8
     cf6:	08068893          	addi	a7,a3,128 # ffff8080 <tohost+0x2fa78080>
list_head *core_list_init(ee_u32 blksize, list_head *memblock, ee_s16 seed) {
     cfa:	8332                	mv	t1,a2
        ee_u32 size=(blksize/per_item)-2; /* to accomodate systems with 64b pointers, and make sure same code is executed, set max list elements */
     cfc:	1579                	addi	a0,a0,-2
        list_head *memblock_end=memblock+size;
     cfe:	00351593          	slli	a1,a0,0x3
     d02:	95be                	add	a1,a1,a5
        list->info=datablock;
     d04:	c3cc                	sw	a1,4(a5)
        list_data *datablock_end=datablock+size;
     d06:	00251e13          	slli	t3,a0,0x2
        list->info->idx=0x0000;
     d0a:	00059123          	sh	zero,2(a1)
        list->info->data16=(ee_s16)0x8080;
     d0e:	01159023          	sh	a7,0(a1)
        list_data *datablock_end=datablock+size;
     d12:	9e2e                	add	t3,t3,a1
        datablock++;
     d14:	00458613          	addi	a2,a1,4
        if ((*memblock+1) >= memblock_end)
     d18:	2cb87b63          	bgeu	a6,a1,fee <core_list_init+0x30e>
                return NULL;
        if ((*datablock+1) >= datablock_end)
     d1c:	00858293          	addi	t0,a1,8
     d20:	2dc2f763          	bgeu	t0,t3,fee <core_list_init+0x30e>
                return NULL;

        newitem=*memblock;
        (*memblock)++;
        newitem->next=insert_point->next;
        insert_point->next=newitem;
     d24:	c398                	sw	a4,0(a5)

        newitem->info=*datablock;
     d26:	c7d0                	sw	a2,12(a5)
        newitem->next=insert_point->next;
     d28:	0007a423          	sw	zero,8(a5)
        to->idx=from->idx;
     d2c:	fff6c613          	not	a2,a3
        (*datablock)++;
        copy_info(newitem->info,info);

        return newitem;
     d30:	86ba                	mv	a3,a4
        to->data16=from->data16;
     d32:	577d                	li	a4,-1
     d34:	00e59223          	sh	a4,4(a1)
        to->idx=from->idx;
     d38:	00c59323          	sh	a2,6(a1)
        return newitem;
     d3c:	8742                	mv	a4,a6
     d3e:	8616                	mv	a2,t0
        for (i=0; i<size; i++) {
     d40:	c55d                	beqz	a0,dee <core_list_init+0x10e>
                        ee_u16 pat=(ee_u16)(i++ ^ seed); /* get a pseudo random number */
     d42:	01031f93          	slli	t6,t1,0x10
        to->idx=from->idx;
     d46:	7ee1                	lui	t4,0xffff8
     d48:	00157393          	andi	t2,a0,1
                        ee_u16 pat=(ee_u16)(i++ ^ seed); /* get a pseudo random number */
     d4c:	010fdf93          	srli	t6,t6,0x10
     d50:	4801                	li	a6,0
        to->idx=from->idx;
     d52:	fffece93          	not	t4,t4
     d56:	24039e63          	bnez	t2,fb2 <core_list_init+0x2d2>
        if ((*memblock+1) >= memblock_end)
     d5a:	00870293          	addi	t0,a4,8
     d5e:	08b2f863          	bgeu	t0,a1,dee <core_list_init+0x10e>
        if ((*datablock+1) >= datablock_end)
     d62:	00460393          	addi	t2,a2,4
     d66:	03c3fd63          	bgeu	t2,t3,da0 <core_list_init+0xc0>
     d6a:	01081893          	slli	a7,a6,0x10
     d6e:	0108df13          	srli	t5,a7,0x10
                ee_u16 datpat=((ee_u16)(seed^i) & 0xf);
     d72:	01ff48b3          	xor	a7,t5,t6
                ee_u16 dat=(datpat<<3) | (i&0x7); /* alternate between algorithms */
     d76:	088e                	slli	a7,a7,0x3
     d78:	0788f893          	andi	a7,a7,120
     d7c:	007f7f13          	andi	t5,t5,7
        newitem->next=insert_point->next;
     d80:	c314                	sw	a3,0(a4)
                ee_u16 dat=(datpat<<3) | (i&0x7); /* alternate between algorithms */
     d82:	01e8e6b3          	or	a3,a7,t5
        insert_point->next=newitem;
     d86:	c398                	sw	a4,0(a5)
                info.data16=(dat<<8) | dat;             /* fill the data with actual data and upper bits with rebuild value */
     d88:	00869893          	slli	a7,a3,0x8
        newitem->info=*datablock;
     d8c:	c350                	sw	a2,4(a4)
                info.data16=(dat<<8) | dat;             /* fill the data with actual data and upper bits with rebuild value */
     d8e:	00d8ef33          	or	t5,a7,a3
        to->data16=from->data16;
     d92:	01e61023          	sh	t5,0(a2)
        to->idx=from->idx;
     d96:	01d61123          	sh	t4,2(a2)
        return newitem;
     d9a:	86ba                	mv	a3,a4
        if ((*datablock+1) >= datablock_end)
     d9c:	861e                	mv	a2,t2
        if ((*memblock+1) >= memblock_end)
     d9e:	8716                	mv	a4,t0
     da0:	00870293          	addi	t0,a4,8
        for (i=0; i<size; i++) {
     da4:	0805                	addi	a6,a6,1
        if ((*memblock+1) >= memblock_end)
     da6:	04b2f463          	bgeu	t0,a1,dee <core_list_init+0x10e>
        if ((*datablock+1) >= datablock_end)
     daa:	00460393          	addi	t2,a2,4
     dae:	03c3fd63          	bgeu	t2,t3,de8 <core_list_init+0x108>
     db2:	01081893          	slli	a7,a6,0x10
     db6:	0108df13          	srli	t5,a7,0x10
                ee_u16 datpat=((ee_u16)(seed^i) & 0xf);
     dba:	01ff48b3          	xor	a7,t5,t6
                ee_u16 dat=(datpat<<3) | (i&0x7); /* alternate between algorithms */
     dbe:	088e                	slli	a7,a7,0x3
     dc0:	0788f893          	andi	a7,a7,120
     dc4:	007f7f13          	andi	t5,t5,7
        newitem->next=insert_point->next;
     dc8:	c314                	sw	a3,0(a4)
                ee_u16 dat=(datpat<<3) | (i&0x7); /* alternate between algorithms */
     dca:	01e8e6b3          	or	a3,a7,t5
        insert_point->next=newitem;
     dce:	c398                	sw	a4,0(a5)
                info.data16=(dat<<8) | dat;             /* fill the data with actual data and upper bits with rebuild value */
     dd0:	00869893          	slli	a7,a3,0x8
        newitem->info=*datablock;
     dd4:	c350                	sw	a2,4(a4)
                info.data16=(dat<<8) | dat;             /* fill the data with actual data and upper bits with rebuild value */
     dd6:	00d8ef33          	or	t5,a7,a3
        to->data16=from->data16;
     dda:	01e61023          	sh	t5,0(a2)
        to->idx=from->idx;
     dde:	01d61123          	sh	t4,2(a2)
        return newitem;
     de2:	86ba                	mv	a3,a4
        if ((*datablock+1) >= datablock_end)
     de4:	861e                	mv	a2,t2
        if ((*memblock+1) >= memblock_end)
     de6:	8716                	mv	a4,t0
        for (i=0; i<size; i++) {
     de8:	0805                	addi	a6,a6,1
     dea:	f70518e3          	bne	a0,a6,d5a <core_list_init+0x7a>
        while (finder->next!=NULL) {
     dee:	428c                	lw	a1,0(a3)
     df0:	c1bd                	beqz	a1,e56 <core_list_init+0x176>
                if (i<size/5) /* first 20% of the list in order */
     df2:	4e15                	li	t3,5
     df4:	03c55fb3          	divu	t6,a0,t3
                        finder->info->idx=0x3fff & (((i & 0x07) << 8) | pat); /* make sure the mixed items end up after the ones in sequence */
     df8:	6511                	lui	a0,0x4
                if (i<size/5) /* first 20% of the list in order */
     dfa:	20000713          	li	a4,512
     dfe:	4605                	li	a2,1
                        finder->info->idx=0x3fff & (((i & 0x07) << 8) | pat); /* make sure the mixed items end up after the ones in sequence */
     e00:	fff50e93          	addi	t4,a0,-1 # 3fff <matrix_add_const+0x21>
     e04:	a005                	j	e24 <core_list_init+0x144>
        while (finder->next!=NULL) {
     e06:	0005a803          	lw	a6,0(a1)
     e0a:	10070513          	addi	a0,a4,256
                        finder->info->idx=i++;
     e0e:	00c29123          	sh	a2,2(t0)
        while (finder->next!=NULL) {
     e12:	01051293          	slli	t0,a0,0x10
     e16:	0605                	addi	a2,a2,1
     e18:	0102d713          	srli	a4,t0,0x10
     e1c:	02080d63          	beqz	a6,e56 <core_list_init+0x176>
                if (i<size/5) /* first 20% of the list in order */
     e20:	86ae                	mv	a3,a1
     e22:	85c2                	mv	a1,a6
                        finder->info->idx=i++;
     e24:	0046a283          	lw	t0,4(a3)
                if (i<size/5) /* first 20% of the list in order */
     e28:	fdf66fe3          	bltu	a2,t6,e06 <core_list_init+0x126>
                        ee_u16 pat=(ee_u16)(i++ ^ seed); /* get a pseudo random number */
     e2c:	00c343b3          	xor	t2,t1,a2
                        finder->info->idx=0x3fff & (((i & 0x07) << 8) | pat); /* make sure the mixed items end up after the ones in sequence */
     e30:	70077893          	andi	a7,a4,1792
        while (finder->next!=NULL) {
     e34:	0005a803          	lw	a6,0(a1)
                        finder->info->idx=0x3fff & (((i & 0x07) << 8) | pat); /* make sure the mixed items end up after the ones in sequence */
     e38:	0113ef33          	or	t5,t2,a7
        while (finder->next!=NULL) {
     e3c:	10070713          	addi	a4,a4,256
                        finder->info->idx=0x3fff & (((i & 0x07) << 8) | pat); /* make sure the mixed items end up after the ones in sequence */
     e40:	01df76b3          	and	a3,t5,t4
        while (finder->next!=NULL) {
     e44:	01071e13          	slli	t3,a4,0x10
                        finder->info->idx=i++;
     e48:	00d29123          	sh	a3,2(t0)
        while (finder->next!=NULL) {
     e4c:	0605                	addi	a2,a2,1
     e4e:	010e5713          	srli	a4,t3,0x10
     e52:	fc0817e3          	bnez	a6,e20 <core_list_init+0x140>
 */
list_head *core_list_mergesort(list_head *list, list_cmp cmp, core_results *res) {
    list_head *p, *q, *e, *tail;
    ee_s32 insize, nmerges, psize, qsize, i;

    insize = 1;
     e56:	4f85                	li	t6,1

    while (1) {
        p = list;
        list = NULL;
        tail = NULL;
     e58:	4801                	li	a6,0
        list = NULL;
     e5a:	4501                	li	a0,0

        nmerges = 0;  /* count number of merges we do in this pass */
     e5c:	4281                	li	t0,0
        }

            tail->next = NULL;

        /* If we have done only one merge, we're finished. */
        if (nmerges <= 1)   /* allow for nmerges==0, the empty list case */
     e5e:	4385                	li	t2,1
            nmerges++;  /* there exists a merge to be done */
     e60:	007ff313          	andi	t1,t6,7
     e64:	0285                	addi	t0,t0,1
     e66:	873e                	mv	a4,a5
            psize = 0;
     e68:	4681                	li	a3,0
     e6a:	04030b63          	beqz	t1,ec0 <core_list_init+0x1e0>
     e6e:	4585                	li	a1,1
     e70:	04b30363          	beq	t1,a1,eb6 <core_list_init+0x1d6>
     e74:	4e89                	li	t4,2
     e76:	03d30d63          	beq	t1,t4,eb0 <core_list_init+0x1d0>
     e7a:	488d                	li	a7,3
     e7c:	03130763          	beq	t1,a7,eaa <core_list_init+0x1ca>
     e80:	4f11                	li	t5,4
     e82:	03e30163          	beq	t1,t5,ea4 <core_list_init+0x1c4>
     e86:	4615                	li	a2,5
     e88:	00c30b63          	beq	t1,a2,e9e <core_list_init+0x1be>
     e8c:	4e19                	li	t3,6
     e8e:	01c30563          	beq	t1,t3,e98 <core_list_init+0x1b8>
                            q = q->next;
     e92:	4398                	lw	a4,0(a5)
                psize++;
     e94:	4685                	li	a3,1
                if (!q) break;
     e96:	c725                	beqz	a4,efe <core_list_init+0x21e>
                            q = q->next;
     e98:	4318                	lw	a4,0(a4)
                psize++;
     e9a:	0685                	addi	a3,a3,1
                if (!q) break;
     e9c:	c32d                	beqz	a4,efe <core_list_init+0x21e>
                            q = q->next;
     e9e:	4318                	lw	a4,0(a4)
                psize++;
     ea0:	0685                	addi	a3,a3,1
                if (!q) break;
     ea2:	cf31                	beqz	a4,efe <core_list_init+0x21e>
                            q = q->next;
     ea4:	4318                	lw	a4,0(a4)
                psize++;
     ea6:	0685                	addi	a3,a3,1
                if (!q) break;
     ea8:	cb39                	beqz	a4,efe <core_list_init+0x21e>
                            q = q->next;
     eaa:	4318                	lw	a4,0(a4)
                psize++;
     eac:	0685                	addi	a3,a3,1
                if (!q) break;
     eae:	cb21                	beqz	a4,efe <core_list_init+0x21e>
                            q = q->next;
     eb0:	4318                	lw	a4,0(a4)
                psize++;
     eb2:	0685                	addi	a3,a3,1
                if (!q) break;
     eb4:	c729                	beqz	a4,efe <core_list_init+0x21e>
                            q = q->next;
     eb6:	4318                	lw	a4,0(a4)
                psize++;
     eb8:	0685                	addi	a3,a3,1
                if (!q) break;
     eba:	c331                	beqz	a4,efe <core_list_init+0x21e>
            for (i = 0; i < insize; i++) {
     ebc:	05f68163          	beq	a3,t6,efe <core_list_init+0x21e>
                            q = q->next;
     ec0:	4318                	lw	a4,0(a4)
                psize++;
     ec2:	0685                	addi	a3,a3,1
     ec4:	8336                	mv	t1,a3
                if (!q) break;
     ec6:	cf05                	beqz	a4,efe <core_list_init+0x21e>
                            q = q->next;
     ec8:	4318                	lw	a4,0(a4)
                psize++;
     eca:	0685                	addi	a3,a3,1
                if (!q) break;
     ecc:	cb0d                	beqz	a4,efe <core_list_init+0x21e>
                            q = q->next;
     ece:	4318                	lw	a4,0(a4)
                psize++;
     ed0:	00230693          	addi	a3,t1,2
                if (!q) break;
     ed4:	c70d                	beqz	a4,efe <core_list_init+0x21e>
                            q = q->next;
     ed6:	4318                	lw	a4,0(a4)
                psize++;
     ed8:	00330693          	addi	a3,t1,3
                if (!q) break;
     edc:	c30d                	beqz	a4,efe <core_list_init+0x21e>
                            q = q->next;
     ede:	4318                	lw	a4,0(a4)
                psize++;
     ee0:	00430693          	addi	a3,t1,4
                if (!q) break;
     ee4:	cf09                	beqz	a4,efe <core_list_init+0x21e>
                            q = q->next;
     ee6:	4318                	lw	a4,0(a4)
                psize++;
     ee8:	00530693          	addi	a3,t1,5
                if (!q) break;
     eec:	cb09                	beqz	a4,efe <core_list_init+0x21e>
                            q = q->next;
     eee:	4318                	lw	a4,0(a4)
                psize++;
     ef0:	00630693          	addi	a3,t1,6
                if (!q) break;
     ef4:	c709                	beqz	a4,efe <core_list_init+0x21e>
                            q = q->next;
     ef6:	4318                	lw	a4,0(a4)
                psize++;
     ef8:	00730693          	addi	a3,t1,7
                if (!q) break;
     efc:	f361                	bnez	a4,ebc <core_list_init+0x1dc>
                                    list = e;
     efe:	85fe                	mv	a1,t6
            while (psize > 0 || (qsize > 0 && q)) {
     f00:	00d05e63          	blez	a3,f1c <core_list_init+0x23c>
                                } else if (qsize == 0 || !q) {
     f04:	e985                	bnez	a1,f34 <core_list_init+0x254>
                                    e = p; p = p->next; psize--;
     f06:	0007a883          	lw	a7,0(a5)
     f0a:	16fd                	addi	a3,a3,-1
                                if (tail) {
     f0c:	02080263          	beqz	a6,f30 <core_list_init+0x250>
                                    tail->next = e;
     f10:	00f82023          	sw	a5,0(a6)
                                    list = e;
     f14:	883e                	mv	a6,a5
     f16:	87c6                	mv	a5,a7
            while (psize > 0 || (qsize > 0 && q)) {
     f18:	fed046e3          	bgtz	a3,f04 <core_list_init+0x224>
     f1c:	06b05863          	blez	a1,f8c <core_list_init+0x2ac>
     f20:	cb2d                	beqz	a4,f92 <core_list_init+0x2b2>
                                if (psize == 0) {
     f22:	ea91                	bnez	a3,f36 <core_list_init+0x256>
                                    e = q; q = q->next; qsize--;
     f24:	88be                	mv	a7,a5
     f26:	15fd                	addi	a1,a1,-1
     f28:	87ba                	mv	a5,a4
     f2a:	4318                	lw	a4,0(a4)
                                if (tail) {
     f2c:	fe0812e3          	bnez	a6,f10 <core_list_init+0x230>
                                    list = e;
     f30:	853e                	mv	a0,a5
     f32:	b7cd                	j	f14 <core_list_init+0x234>
                                } else if (qsize == 0 || !q) {
     f34:	db69                	beqz	a4,f06 <core_list_init+0x226>
                                } else if (cmp(p->info,q->info,res) <= 0) {
     f36:	0047a303          	lw	t1,4(a5)
     f3a:	00472883          	lw	a7,4(a4)
                a->data16 = (a->data16 & 0xff00) | (0x00ff & (a->data16>>8));
     f3e:	00031603          	lh	a2,0(t1)
        return a->idx - b->idx;
     f42:	00289e83          	lh	t4,2(a7)
     f46:	00231f03          	lh	t5,2(t1)
                a->data16 = (a->data16 & 0xff00) | (0x00ff & (a->data16>>8));
     f4a:	01061e13          	slli	t3,a2,0x10
     f4e:	010e5e13          	srli	t3,t3,0x10
     f52:	008e5e13          	srli	t3,t3,0x8
     f56:	f0067613          	andi	a2,a2,-256
     f5a:	01c66633          	or	a2,a2,t3
     f5e:	00c31023          	sh	a2,0(t1)
                b->data16 = (b->data16 & 0xff00) | (0x00ff & (b->data16>>8));
     f62:	00089e03          	lh	t3,0(a7)
     f66:	010e1313          	slli	t1,t3,0x10
     f6a:	01035313          	srli	t1,t1,0x10
     f6e:	f00e7613          	andi	a2,t3,-256
     f72:	00835e13          	srli	t3,t1,0x8
     f76:	01c66333          	or	t1,a2,t3
     f7a:	00689023          	sh	t1,0(a7)
                                } else if (cmp(p->info,q->info,res) <= 0) {
     f7e:	f9eed4e3          	bge	t4,t5,f06 <core_list_init+0x226>
                                    e = q; q = q->next; qsize--;
     f82:	88be                	mv	a7,a5
     f84:	15fd                	addi	a1,a1,-1
     f86:	87ba                	mv	a5,a4
     f88:	4318                	lw	a4,0(a4)
     f8a:	b749                	j	f0c <core_list_init+0x22c>
        while (p) {
     f8c:	c319                	beqz	a4,f92 <core_list_init+0x2b2>
        nmerges = 0;  /* count number of merges we do in this pass */
     f8e:	87ba                	mv	a5,a4
     f90:	bdc1                	j	e60 <core_list_init+0x180>
            tail->next = NULL;
     f92:	00082023          	sw	zero,0(a6)
        if (nmerges <= 1)   /* allow for nmerges==0, the empty list case */
     f96:	00728a63          	beq	t0,t2,faa <core_list_init+0x2ca>
            return list;

        /* Otherwise repeat, merging lists twice the size */
        insize *= 2;
     f9a:	0f86                	slli	t6,t6,0x1
        while (p) {
     f9c:	c901                	beqz	a0,fac <core_list_init+0x2cc>
     f9e:	872a                	mv	a4,a0
        tail = NULL;
     fa0:	4801                	li	a6,0
        list = NULL;
     fa2:	4501                	li	a0,0
        nmerges = 0;  /* count number of merges we do in this pass */
     fa4:	4281                	li	t0,0
     fa6:	87ba                	mv	a5,a4
     fa8:	bd65                	j	e60 <core_list_init+0x180>
}
     faa:	8082                	ret
            tail->next = NULL;
     fac:	00002023          	sw	zero,0(zero) # 0 <_start>
     fb0:	9002                	ebreak
        if ((*memblock+1) >= memblock_end)
     fb2:	00870893          	addi	a7,a4,8
     fb6:	e2b8fce3          	bgeu	a7,a1,dee <core_list_init+0x10e>
        if ((*datablock+1) >= datablock_end)
     fba:	00460f13          	addi	t5,a2,4
     fbe:	03cf7463          	bgeu	t5,t3,fe6 <core_list_init+0x306>
                ee_u16 dat=(datpat<<3) | (i&0x7); /* alternate between algorithms */
     fc2:	003f9813          	slli	a6,t6,0x3
        newitem->next=insert_point->next;
     fc6:	c314                	sw	a3,0(a4)
                ee_u16 dat=(datpat<<3) | (i&0x7); /* alternate between algorithms */
     fc8:	07887693          	andi	a3,a6,120
        insert_point->next=newitem;
     fcc:	c398                	sw	a4,0(a5)
                info.data16=(dat<<8) | dat;             /* fill the data with actual data and upper bits with rebuild value */
     fce:	00869293          	slli	t0,a3,0x8
        newitem->info=*datablock;
     fd2:	c350                	sw	a2,4(a4)
                info.data16=(dat<<8) | dat;             /* fill the data with actual data and upper bits with rebuild value */
     fd4:	00d2e3b3          	or	t2,t0,a3
        to->data16=from->data16;
     fd8:	00761023          	sh	t2,0(a2)
        to->idx=from->idx;
     fdc:	01d61123          	sh	t4,2(a2)
        return newitem;
     fe0:	86ba                	mv	a3,a4
        if ((*datablock+1) >= datablock_end)
     fe2:	867a                	mv	a2,t5
        if ((*memblock+1) >= memblock_end)
     fe4:	8746                	mv	a4,a7
        for (i=0; i<size; i++) {
     fe6:	4805                	li	a6,1
     fe8:	d70519e3          	bne	a0,a6,d5a <core_list_init+0x7a>
     fec:	b509                	j	dee <core_list_init+0x10e>
     fee:	4681                	li	a3,0
     ff0:	bb81                	j	d40 <core_list_init+0x60>

00000ff2 <core_list_insert_new>:
        if ((*memblock+1) >= memblock_end)
     ff2:	00062803          	lw	a6,0(a2)
     ff6:	00880893          	addi	a7,a6,8
     ffa:	04e8f163          	bgeu	a7,a4,103c <core_list_insert_new+0x4a>
        if ((*datablock+1) >= datablock_end)
     ffe:	4298                	lw	a4,0(a3)
    1000:	00470313          	addi	t1,a4,4
    1004:	02f37c63          	bgeu	t1,a5,103c <core_list_insert_new+0x4a>
        (*memblock)++;
    1008:	01162023          	sw	a7,0(a2)
        newitem->next=insert_point->next;
    100c:	411c                	lw	a5,0(a0)
        to->data16=from->data16;
    100e:	00059283          	lh	t0,0(a1)
        to->idx=from->idx;
    1012:	00259603          	lh	a2,2(a1)
        newitem->next=insert_point->next;
    1016:	00f82023          	sw	a5,0(a6)
        insert_point->next=newitem;
    101a:	01052023          	sw	a6,0(a0)
        newitem->info=*datablock;
    101e:	00e82223          	sw	a4,4(a6)
        (*datablock)++;
    1022:	0006a383          	lw	t2,0(a3)
    1026:	00438513          	addi	a0,t2,4
    102a:	c288                	sw	a0,0(a3)
        copy_info(newitem->info,info);
    102c:	00482583          	lw	a1,4(a6)
}
    1030:	8542                	mv	a0,a6
        to->data16=from->data16;
    1032:	00559023          	sh	t0,0(a1)
        to->idx=from->idx;
    1036:	00c59123          	sh	a2,2(a1)
}
    103a:	8082                	ret
                return NULL;
    103c:	4801                	li	a6,0
}
    103e:	8542                	mv	a0,a6
    1040:	8082                	ret

00001042 <core_list_remove>:
list_head *core_list_remove(list_head *item) {
    1042:	87aa                	mv	a5,a0
        list_head *ret=item->next;
    1044:	4108                	lw	a0,0(a0)
        tmp=item->info;
    1046:	43d4                	lw	a3,4(a5)
        item->info=ret->info;
    1048:	4150                	lw	a2,4(a0)
        item->next=item->next->next;
    104a:	4118                	lw	a4,0(a0)
        item->info=ret->info;
    104c:	c3d0                	sw	a2,4(a5)
        ret->info=tmp;
    104e:	c154                	sw	a3,4(a0)
        item->next=item->next->next;
    1050:	c398                	sw	a4,0(a5)
        ret->next=NULL;
    1052:	00052023          	sw	zero,0(a0)
}
    1056:	8082                	ret

00001058 <core_list_undo_remove>:
        item_removed->info=item_modified->info;
    1058:	41d0                	lw	a2,4(a1)
        tmp=item_removed->info;
    105a:	4154                	lw	a3,4(a0)
        item_removed->next=item_modified->next;
    105c:	4198                	lw	a4,0(a1)
        item_removed->info=item_modified->info;
    105e:	c150                	sw	a2,4(a0)
        item_modified->info=tmp;
    1060:	c1d4                	sw	a3,4(a1)
        item_removed->next=item_modified->next;
    1062:	c118                	sw	a4,0(a0)
        item_modified->next=item_removed;
    1064:	c188                	sw	a0,0(a1)
}
    1066:	8082                	ret

00001068 <core_list_find>:
        if (info->idx>=0) {
    1068:	00259603          	lh	a2,2(a1)
    106c:	00064d63          	bltz	a2,1086 <core_list_find+0x1e>
                while (list && (list->info->idx != info->idx))
    1070:	e501                	bnez	a0,1078 <core_list_find+0x10>
    1072:	a805                	j	10a2 <core_list_find+0x3a>
                        list=list->next;
    1074:	4108                	lw	a0,0(a0)
                while (list && (list->info->idx != info->idx))
    1076:	c505                	beqz	a0,109e <core_list_find+0x36>
    1078:	00452303          	lw	t1,4(a0)
    107c:	00231383          	lh	t2,2(t1)
    1080:	fec39ae3          	bne	t2,a2,1074 <core_list_find+0xc>
    1084:	8082                	ret
                while (list && ((list->info->data16 & 0xff) != info->data16))
    1086:	cd01                	beqz	a0,109e <core_list_find+0x36>
    1088:	00059703          	lh	a4,0(a1)
    108c:	a019                	j	1092 <core_list_find+0x2a>
                        list=list->next;
    108e:	4108                	lw	a0,0(a0)
                while (list && ((list->info->data16 & 0xff) != info->data16))
    1090:	c901                	beqz	a0,10a0 <core_list_find+0x38>
    1092:	415c                	lw	a5,4(a0)
    1094:	0007c283          	lbu	t0,0(a5)
    1098:	fee29be3          	bne	t0,a4,108e <core_list_find+0x26>
    109c:	8082                	ret
    109e:	4501                	li	a0,0
}
    10a0:	8082                	ret
    10a2:	8082                	ret

000010a4 <core_list_reverse>:
        while (list) {
    10a4:	c92d                	beqz	a0,1116 <core_list_reverse+0x72>
                tmp=list->next;
    10a6:	411c                	lw	a5,0(a0)
        list_head *next=NULL, *tmp;
    10a8:	4881                	li	a7,0
                list->next=next;
    10aa:	01152023          	sw	a7,0(a0)
        while (list) {
    10ae:	86aa                	mv	a3,a0
    10b0:	c3bd                	beqz	a5,1116 <core_list_reverse+0x72>
                tmp=list->next;
    10b2:	4398                	lw	a4,0(a5)
                list->next=next;
    10b4:	c394                	sw	a3,0(a5)
                list=tmp;
    10b6:	853e                	mv	a0,a5
        while (list) {
    10b8:	c325                	beqz	a4,1118 <core_list_reverse+0x74>
                tmp=list->next;
    10ba:	00072283          	lw	t0,0(a4)
                list->next=next;
    10be:	c31c                	sw	a5,0(a4)
                list=tmp;
    10c0:	853a                	mv	a0,a4
        while (list) {
    10c2:	04028a63          	beqz	t0,1116 <core_list_reverse+0x72>
                tmp=list->next;
    10c6:	0002a303          	lw	t1,0(t0)
                list->next=next;
    10ca:	00e2a023          	sw	a4,0(t0)
                list=tmp;
    10ce:	8516                	mv	a0,t0
        while (list) {
    10d0:	04030363          	beqz	t1,1116 <core_list_reverse+0x72>
                tmp=list->next;
    10d4:	00032383          	lw	t2,0(t1)
                list->next=next;
    10d8:	00532023          	sw	t0,0(t1)
                list=tmp;
    10dc:	851a                	mv	a0,t1
        while (list) {
    10de:	02038c63          	beqz	t2,1116 <core_list_reverse+0x72>
                tmp=list->next;
    10e2:	0003a583          	lw	a1,0(t2)
                list->next=next;
    10e6:	0063a023          	sw	t1,0(t2)
                list=tmp;
    10ea:	851e                	mv	a0,t2
        while (list) {
    10ec:	c58d                	beqz	a1,1116 <core_list_reverse+0x72>
                tmp=list->next;
    10ee:	0005a803          	lw	a6,0(a1)
                list->next=next;
    10f2:	0075a023          	sw	t2,0(a1)
                list=tmp;
    10f6:	852e                	mv	a0,a1
        while (list) {
    10f8:	00080f63          	beqz	a6,1116 <core_list_reverse+0x72>
                tmp=list->next;
    10fc:	00082603          	lw	a2,0(a6)
                list->next=next;
    1100:	00b82023          	sw	a1,0(a6)
                list=tmp;
    1104:	8542                	mv	a0,a6
        while (list) {
    1106:	88c2                	mv	a7,a6
    1108:	c619                	beqz	a2,1116 <core_list_reverse+0x72>
                list=tmp;
    110a:	8532                	mv	a0,a2
                tmp=list->next;
    110c:	411c                	lw	a5,0(a0)
                list->next=next;
    110e:	01152023          	sw	a7,0(a0)
        while (list) {
    1112:	86aa                	mv	a3,a0
    1114:	ffd9                	bnez	a5,10b2 <core_list_reverse+0xe>
}
    1116:	8082                	ret
    1118:	8082                	ret

0000111a <core_list_mergesort>:
list_head *core_list_mergesort(list_head *list, list_cmp cmp, core_results *res) {
    111a:	7179                	addi	sp,sp,-48
    111c:	ce4e                	sw	s3,28(sp)
    111e:	c85a                	sw	s6,16(sp)
    1120:	c65e                	sw	s7,12(sp)
    1122:	c462                	sw	s8,8(sp)
    1124:	c06a                	sw	s10,0(sp)
    1126:	d606                	sw	ra,44(sp)
    1128:	d422                	sw	s0,40(sp)
    112a:	d226                	sw	s1,36(sp)
    112c:	d04a                	sw	s2,32(sp)
    112e:	cc52                	sw	s4,24(sp)
    1130:	ca56                	sw	s5,20(sp)
    1132:	c266                	sw	s9,4(sp)
    1134:	89aa                	mv	s3,a0
    1136:	8bae                	mv	s7,a1
    1138:	8b32                	mv	s6,a2
    insize = 1;
    113a:	4c05                	li	s8,1
        if (nmerges <= 1)   /* allow for nmerges==0, the empty list case */
    113c:	4d05                	li	s10,1
        while (p) {
    113e:	10098a63          	beqz	s3,1252 <core_list_mergesort+0x138>
        nmerges = 0;  /* count number of merges we do in this pass */
    1142:	4c81                	li	s9,0
        tail = NULL;
    1144:	4481                	li	s1,0
        list = NULL;
    1146:	4a81                	li	s5,0
            nmerges++;  /* there exists a merge to be done */
    1148:	007c7713          	andi	a4,s8,7
    114c:	0c85                	addi	s9,s9,1
    114e:	87ce                	mv	a5,s3
            psize = 0;
    1150:	4401                	li	s0,0
    1152:	cb39                	beqz	a4,11a8 <core_list_mergesort+0x8e>
    1154:	4685                	li	a3,1
    1156:	04d70463          	beq	a4,a3,119e <core_list_mergesort+0x84>
    115a:	4089                	li	ra,2
    115c:	02170e63          	beq	a4,ra,1198 <core_list_mergesort+0x7e>
    1160:	428d                	li	t0,3
    1162:	02570863          	beq	a4,t0,1192 <core_list_mergesort+0x78>
    1166:	4311                	li	t1,4
    1168:	02670263          	beq	a4,t1,118c <core_list_mergesort+0x72>
    116c:	4395                	li	t2,5
    116e:	00770c63          	beq	a4,t2,1186 <core_list_mergesort+0x6c>
    1172:	4519                	li	a0,6
    1174:	00a70663          	beq	a4,a0,1180 <core_list_mergesort+0x66>
                            q = q->next;
    1178:	0009a783          	lw	a5,0(s3)
                psize++;
    117c:	4405                	li	s0,1
                if (!q) break;
    117e:	c7a5                	beqz	a5,11e6 <core_list_mergesort+0xcc>
                            q = q->next;
    1180:	439c                	lw	a5,0(a5)
                psize++;
    1182:	0405                	addi	s0,s0,1
                if (!q) break;
    1184:	c3ad                	beqz	a5,11e6 <core_list_mergesort+0xcc>
                            q = q->next;
    1186:	439c                	lw	a5,0(a5)
                psize++;
    1188:	0405                	addi	s0,s0,1
                if (!q) break;
    118a:	cfb1                	beqz	a5,11e6 <core_list_mergesort+0xcc>
                            q = q->next;
    118c:	439c                	lw	a5,0(a5)
                psize++;
    118e:	0405                	addi	s0,s0,1
                if (!q) break;
    1190:	cbb9                	beqz	a5,11e6 <core_list_mergesort+0xcc>
                            q = q->next;
    1192:	439c                	lw	a5,0(a5)
                psize++;
    1194:	0405                	addi	s0,s0,1
                if (!q) break;
    1196:	cba1                	beqz	a5,11e6 <core_list_mergesort+0xcc>
                            q = q->next;
    1198:	439c                	lw	a5,0(a5)
                psize++;
    119a:	0405                	addi	s0,s0,1
                if (!q) break;
    119c:	c7a9                	beqz	a5,11e6 <core_list_mergesort+0xcc>
                            q = q->next;
    119e:	439c                	lw	a5,0(a5)
                psize++;
    11a0:	0405                	addi	s0,s0,1
                if (!q) break;
    11a2:	c3b1                	beqz	a5,11e6 <core_list_mergesort+0xcc>
            for (i = 0; i < insize; i++) {
    11a4:	048c0163          	beq	s8,s0,11e6 <core_list_mergesort+0xcc>
                            q = q->next;
    11a8:	439c                	lw	a5,0(a5)
                psize++;
    11aa:	0405                	addi	s0,s0,1
    11ac:	85a2                	mv	a1,s0
                if (!q) break;
    11ae:	cf85                	beqz	a5,11e6 <core_list_mergesort+0xcc>
                            q = q->next;
    11b0:	439c                	lw	a5,0(a5)
                psize++;
    11b2:	0405                	addi	s0,s0,1
                if (!q) break;
    11b4:	cb8d                	beqz	a5,11e6 <core_list_mergesort+0xcc>
                            q = q->next;
    11b6:	439c                	lw	a5,0(a5)
                psize++;
    11b8:	00258413          	addi	s0,a1,2
                if (!q) break;
    11bc:	c78d                	beqz	a5,11e6 <core_list_mergesort+0xcc>
                            q = q->next;
    11be:	439c                	lw	a5,0(a5)
                psize++;
    11c0:	00358413          	addi	s0,a1,3
                if (!q) break;
    11c4:	c38d                	beqz	a5,11e6 <core_list_mergesort+0xcc>
                            q = q->next;
    11c6:	439c                	lw	a5,0(a5)
                psize++;
    11c8:	00458413          	addi	s0,a1,4
                if (!q) break;
    11cc:	cf89                	beqz	a5,11e6 <core_list_mergesort+0xcc>
                            q = q->next;
    11ce:	439c                	lw	a5,0(a5)
                psize++;
    11d0:	00558413          	addi	s0,a1,5
                if (!q) break;
    11d4:	cb89                	beqz	a5,11e6 <core_list_mergesort+0xcc>
                            q = q->next;
    11d6:	439c                	lw	a5,0(a5)
                psize++;
    11d8:	00658413          	addi	s0,a1,6
                if (!q) break;
    11dc:	c789                	beqz	a5,11e6 <core_list_mergesort+0xcc>
                            q = q->next;
    11de:	439c                	lw	a5,0(a5)
                psize++;
    11e0:	00758413          	addi	s0,a1,7
                if (!q) break;
    11e4:	f3e1                	bnez	a5,11a4 <core_list_mergesort+0x8a>
                                    list = e;
    11e6:	894e                	mv	s2,s3
    11e8:	8a62                	mv	s4,s8
    11ea:	89be                	mv	s3,a5
            while (psize > 0 || (qsize > 0 && q)) {
    11ec:	00805d63          	blez	s0,1206 <core_list_mergesort+0xec>
                                } else if (qsize == 0 || !q) {
    11f0:	020a1863          	bnez	s4,1220 <core_list_mergesort+0x106>
                                    e = p; p = p->next; psize--;
    11f4:	864a                	mv	a2,s2
    11f6:	00092903          	lw	s2,0(s2)
    11fa:	147d                	addi	s0,s0,-1
                                if (tail) {
    11fc:	cc99                	beqz	s1,121a <core_list_mergesort+0x100>
                                    tail->next = e;
    11fe:	c090                	sw	a2,0(s1)
                                    list = e;
    1200:	84b2                	mv	s1,a2
            while (psize > 0 || (qsize > 0 && q)) {
    1202:	fe8047e3          	bgtz	s0,11f0 <core_list_mergesort+0xd6>
    1206:	03405c63          	blez	s4,123e <core_list_mergesort+0x124>
    120a:	02098c63          	beqz	s3,1242 <core_list_mergesort+0x128>
                                if (psize == 0) {
    120e:	e819                	bnez	s0,1224 <core_list_mergesort+0x10a>
                                    e = q; q = q->next; qsize--;
    1210:	864e                	mv	a2,s3
    1212:	1a7d                	addi	s4,s4,-1
    1214:	0009a983          	lw	s3,0(s3)
                                if (tail) {
    1218:	f0fd                	bnez	s1,11fe <core_list_mergesort+0xe4>
                                    list = e;
    121a:	8ab2                	mv	s5,a2
    121c:	84b2                	mv	s1,a2
    121e:	b7d5                	j	1202 <core_list_mergesort+0xe8>
                                } else if (qsize == 0 || !q) {
    1220:	fc098ae3          	beqz	s3,11f4 <core_list_mergesort+0xda>
                                } else if (cmp(p->info,q->info,res) <= 0) {
    1224:	0049a583          	lw	a1,4(s3)
    1228:	00492503          	lw	a0,4(s2)
    122c:	865a                	mv	a2,s6
    122e:	9b82                	jalr	s7
    1230:	fca052e3          	blez	a0,11f4 <core_list_mergesort+0xda>
                                    e = q; q = q->next; qsize--;
    1234:	864e                	mv	a2,s3
    1236:	1a7d                	addi	s4,s4,-1
    1238:	0009a983          	lw	s3,0(s3)
    123c:	b7c1                	j	11fc <core_list_mergesort+0xe2>
        while (p) {
    123e:	f00995e3          	bnez	s3,1148 <core_list_mergesort+0x2e>
            tail->next = NULL;
    1242:	0004a023          	sw	zero,0(s1)
        if (nmerges <= 1)   /* allow for nmerges==0, the empty list case */
    1246:	01ac8963          	beq	s9,s10,1258 <core_list_mergesort+0x13e>
        p = list;
    124a:	89d6                	mv	s3,s5
        insize *= 2;
    124c:	0c06                	slli	s8,s8,0x1
        while (p) {
    124e:	ee099ae3          	bnez	s3,1142 <core_list_mergesort+0x28>
            tail->next = NULL;
    1252:	00002023          	sw	zero,0(zero) # 0 <_start>
    1256:	9002                	ebreak
    }
#if COMPILER_REQUIRES_SORT_RETURN
        return list;
#endif
}
    1258:	50b2                	lw	ra,44(sp)
    125a:	5422                	lw	s0,40(sp)
    125c:	5492                	lw	s1,36(sp)
    125e:	5902                	lw	s2,32(sp)
    1260:	49f2                	lw	s3,28(sp)
    1262:	4a62                	lw	s4,24(sp)
    1264:	4b42                	lw	s6,16(sp)
    1266:	4bb2                	lw	s7,12(sp)
    1268:	4c22                	lw	s8,8(sp)
    126a:	4c92                	lw	s9,4(sp)
    126c:	4d02                	lw	s10,0(sp)
    126e:	8556                	mv	a0,s5
    1270:	4ad2                	lw	s5,20(sp)
    1272:	6145                	addi	sp,sp,48
    1274:	8082                	ret

00001276 <matrix_test>:
        4 - Multiply a matrix by a matrix.
        5 - Add a constant value to all elements of a matrix.

        After the last step, matrix A is back to original contents.
*/
ee_s16 matrix_test(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B, MATDAT val) {
    1276:	715d                	addi	sp,sp,-80
    1278:	c6a2                	sw	s0,76(sp)
    127a:	c0ce                	sw	s3,64(sp)
    127c:	da5a                	sw	s6,52(sp)
    127e:	8f2e                	mv	t5,a1
    1280:	89b6                	mv	s3,a3
        ee_u16 crc=0;
        MATDAT clipval=matrix_big(val);
    1282:	75fd                	lui	a1,0xfffff
        crc=crc16(matrix_sum(N,C,clipval),crc);
#if CORE_DEBUG
        printmatC(C,N,"matrix_mul_matrix_bitextract");
#endif

        matrix_add_const(N,A,-val); /* return matrix to initial value */
    1284:	01071693          	slli	a3,a4,0x10
ee_s16 matrix_test(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B, MATDAT val) {
    1288:	c4a6                	sw	s1,72(sp)
    128a:	c2ca                	sw	s2,68(sp)
    128c:	de52                	sw	s4,60(sp)
    128e:	dc56                	sw	s5,56(sp)
    1290:	d85e                	sw	s7,48(sp)
    1292:	d662                	sw	s8,44(sp)
    1294:	d466                	sw	s9,40(sp)
    1296:	d26a                	sw	s10,36(sp)
    1298:	d06e                	sw	s11,32(sp)
    129a:	842a                	mv	s0,a0
    129c:	8b32                	mv	s6,a2
        MATDAT clipval=matrix_big(val);
    129e:	8dd9                	or	a1,a1,a4
        matrix_add_const(N,A,-val); /* return matrix to initial value */
    12a0:	82c1                	srli	a3,a3,0x10
/* Function: matrix_add_const
        Add a constant value to all elements of a matrix.
*/
void matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val) {
        ee_u32 i,j;
        for (i=0; i<N; i++) {
    12a2:	e119                	bnez	a0,12a8 <matrix_test+0x32>
    12a4:	2220206f          	j	34c6 <matrix_test+0x2250>
    12a8:	00151e13          	slli	t3,a0,0x1
    12ac:	01c60533          	add	a0,a2,t3
    12b0:	408008b3          	neg	a7,s0
    12b4:	833a                	mv	t1,a4
    12b6:	4801                	li	a6,0
    12b8:	872a                	mv	a4,a0
    12ba:	088a                	slli	a7,a7,0x2
                for (j=0; j<N; j++) {
    12bc:	41c70eb3          	sub	t4,a4,t3
    12c0:	41d702b3          	sub	t0,a4,t4
    12c4:	ffe28393          	addi	t2,t0,-2
    12c8:	0013d493          	srli	s1,t2,0x1
    12cc:	00148913          	addi	s2,s1,1
    12d0:	00797a13          	andi	s4,s2,7
ee_s16 matrix_test(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B, MATDAT val) {
    12d4:	87f6                	mv	a5,t4
    12d6:	080a0863          	beqz	s4,1366 <matrix_test+0xf0>
    12da:	4f85                	li	t6,1
    12dc:	07fa0c63          	beq	s4,t6,1354 <matrix_test+0xde>
    12e0:	4a89                	li	s5,2
    12e2:	075a0263          	beq	s4,s5,1346 <matrix_test+0xd0>
    12e6:	4b8d                	li	s7,3
    12e8:	057a0863          	beq	s4,s7,1338 <matrix_test+0xc2>
    12ec:	4c11                	li	s8,4
    12ee:	038a0e63          	beq	s4,s8,132a <matrix_test+0xb4>
    12f2:	4c95                	li	s9,5
    12f4:	039a0463          	beq	s4,s9,131c <matrix_test+0xa6>
    12f8:	4d19                	li	s10,6
    12fa:	01aa0a63          	beq	s4,s10,130e <matrix_test+0x98>
                        A[i*N+j] += val;
    12fe:	000edd83          	lhu	s11,0(t4) # ffff8000 <tohost+0x2fa78000>
                for (j=0; j<N; j++) {
    1302:	002e8793          	addi	a5,t4,2
                        A[i*N+j] += val;
    1306:	01b68633          	add	a2,a3,s11
    130a:	00ce9023          	sh	a2,0(t4)
    130e:	0007d283          	lhu	t0,0(a5)
                for (j=0; j<N; j++) {
    1312:	0789                	addi	a5,a5,2
                        A[i*N+j] += val;
    1314:	005683b3          	add	t2,a3,t0
    1318:	fe779f23          	sh	t2,-2(a5)
    131c:	0007d483          	lhu	s1,0(a5)
                for (j=0; j<N; j++) {
    1320:	0789                	addi	a5,a5,2
                        A[i*N+j] += val;
    1322:	00968933          	add	s2,a3,s1
    1326:	ff279f23          	sh	s2,-2(a5)
    132a:	0007da03          	lhu	s4,0(a5)
                for (j=0; j<N; j++) {
    132e:	0789                	addi	a5,a5,2
                        A[i*N+j] += val;
    1330:	01468fb3          	add	t6,a3,s4
    1334:	fff79f23          	sh	t6,-2(a5)
    1338:	0007da83          	lhu	s5,0(a5)
                for (j=0; j<N; j++) {
    133c:	0789                	addi	a5,a5,2
                        A[i*N+j] += val;
    133e:	01568bb3          	add	s7,a3,s5
    1342:	ff779f23          	sh	s7,-2(a5)
    1346:	0007dc03          	lhu	s8,0(a5)
                for (j=0; j<N; j++) {
    134a:	0789                	addi	a5,a5,2
                        A[i*N+j] += val;
    134c:	01868cb3          	add	s9,a3,s8
    1350:	ff979f23          	sh	s9,-2(a5)
    1354:	0007dd03          	lhu	s10,0(a5)
                for (j=0; j<N; j++) {
    1358:	0789                	addi	a5,a5,2
                        A[i*N+j] += val;
    135a:	01a68db3          	add	s11,a3,s10
    135e:	ffb79f23          	sh	s11,-2(a5)
                for (j=0; j<N; j++) {
    1362:	06f70563          	beq	a4,a5,13cc <matrix_test+0x156>
                        A[i*N+j] += val;
    1366:	0007da83          	lhu	s5,0(a5)
    136a:	0027da03          	lhu	s4,2(a5)
    136e:	0047d903          	lhu	s2,4(a5)
    1372:	0067d483          	lhu	s1,6(a5)
    1376:	0087d383          	lhu	t2,8(a5)
    137a:	00a7d283          	lhu	t0,10(a5)
    137e:	00c7df83          	lhu	t6,12(a5)
    1382:	00e7d603          	lhu	a2,14(a5)
    1386:	01568bb3          	add	s7,a3,s5
    138a:	01468c33          	add	s8,a3,s4
    138e:	01268cb3          	add	s9,a3,s2
    1392:	00968d33          	add	s10,a3,s1
    1396:	00768db3          	add	s11,a3,t2
    139a:	00568ab3          	add	s5,a3,t0
    139e:	01f68a33          	add	s4,a3,t6
    13a2:	00c68933          	add	s2,a3,a2
    13a6:	01779023          	sh	s7,0(a5)
    13aa:	01879123          	sh	s8,2(a5)
    13ae:	01979223          	sh	s9,4(a5)
    13b2:	01a79323          	sh	s10,6(a5)
    13b6:	01b79423          	sh	s11,8(a5)
    13ba:	01579523          	sh	s5,10(a5)
    13be:	01479623          	sh	s4,12(a5)
    13c2:	01279723          	sh	s2,14(a5)
                for (j=0; j<N; j++) {
    13c6:	07c1                	addi	a5,a5,16
    13c8:	f8f71fe3          	bne	a4,a5,1366 <matrix_test+0xf0>
        for (i=0; i<N; i++) {
    13cc:	00180f93          	addi	t6,a6,1
    13d0:	411e8733          	sub	a4,t4,a7
    13d4:	01f40463          	beq	s0,t6,13dc <matrix_test+0x166>
    13d8:	887e                	mv	a6,t6
    13da:	b5cd                	j	12bc <matrix_test+0x46>
                        C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
    13dc:	4381                	li	t2,0
        for (i=0; i<N; i++) {
    13de:	4481                	li	s1,0
                for (j=0; j<N; j++) {
    13e0:	41c50eb3          	sub	t4,a0,t3
    13e4:	41d507b3          	sub	a5,a0,t4
    13e8:	ffe78293          	addi	t0,a5,-2
    13ec:	0012d613          	srli	a2,t0,0x1
    13f0:	00160b93          	addi	s7,a2,1
    13f4:	00239c13          	slli	s8,t2,0x2
    13f8:	007bfc93          	andi	s9,s7,7
    13fc:	01ec07b3          	add	a5,s8,t5
        for (i=0; i<N; i++) {
    1400:	8776                	mv	a4,t4
    1402:	080c8f63          	beqz	s9,14a0 <matrix_test+0x22a>
    1406:	4d05                	li	s10,1
    1408:	09ac8263          	beq	s9,s10,148c <matrix_test+0x216>
    140c:	4d89                	li	s11,2
    140e:	07bc8763          	beq	s9,s11,147c <matrix_test+0x206>
    1412:	4a8d                	li	s5,3
    1414:	055c8c63          	beq	s9,s5,146c <matrix_test+0x1f6>
    1418:	4a11                	li	s4,4
    141a:	054c8163          	beq	s9,s4,145c <matrix_test+0x1e6>
    141e:	4915                	li	s2,5
    1420:	032c8663          	beq	s9,s2,144c <matrix_test+0x1d6>
    1424:	4299                	li	t0,6
    1426:	005c8b63          	beq	s9,t0,143c <matrix_test+0x1c6>
                        C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
    142a:	000e9603          	lh	a2,0(t4)
                for (j=0; j<N; j++) {
    142e:	002e8713          	addi	a4,t4,2
    1432:	0791                	addi	a5,a5,4
                        C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
    1434:	02660bb3          	mul	s7,a2,t1
    1438:	ff77ae23          	sw	s7,-4(a5)
    143c:	00071c03          	lh	s8,0(a4)
                for (j=0; j<N; j++) {
    1440:	0791                	addi	a5,a5,4
    1442:	0709                	addi	a4,a4,2
                        C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
    1444:	026c0cb3          	mul	s9,s8,t1
    1448:	ff97ae23          	sw	s9,-4(a5)
    144c:	00071d03          	lh	s10,0(a4)
                for (j=0; j<N; j++) {
    1450:	0791                	addi	a5,a5,4
    1452:	0709                	addi	a4,a4,2
                        C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
    1454:	026d0db3          	mul	s11,s10,t1
    1458:	ffb7ae23          	sw	s11,-4(a5)
    145c:	00071a83          	lh	s5,0(a4)
                for (j=0; j<N; j++) {
    1460:	0791                	addi	a5,a5,4
    1462:	0709                	addi	a4,a4,2
                        C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
    1464:	026a8a33          	mul	s4,s5,t1
    1468:	ff47ae23          	sw	s4,-4(a5)
    146c:	00071903          	lh	s2,0(a4)
                for (j=0; j<N; j++) {
    1470:	0791                	addi	a5,a5,4
    1472:	0709                	addi	a4,a4,2
                        C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
    1474:	026902b3          	mul	t0,s2,t1
    1478:	fe57ae23          	sw	t0,-4(a5)
    147c:	00071603          	lh	a2,0(a4)
                for (j=0; j<N; j++) {
    1480:	0791                	addi	a5,a5,4
    1482:	0709                	addi	a4,a4,2
                        C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
    1484:	02660bb3          	mul	s7,a2,t1
    1488:	ff77ae23          	sw	s7,-4(a5)
    148c:	00071c03          	lh	s8,0(a4)
                for (j=0; j<N; j++) {
    1490:	0791                	addi	a5,a5,4
    1492:	0709                	addi	a4,a4,2
                        C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
    1494:	026c0cb3          	mul	s9,s8,t1
    1498:	ff97ae23          	sw	s9,-4(a5)
                for (j=0; j<N; j++) {
    149c:	06e50763          	beq	a0,a4,150a <matrix_test+0x294>
                        C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
    14a0:	00071d03          	lh	s10,0(a4)
    14a4:	00271d83          	lh	s11,2(a4)
    14a8:	00471b83          	lh	s7,4(a4)
    14ac:	00671a83          	lh	s5,6(a4)
    14b0:	00871a03          	lh	s4,8(a4)
    14b4:	00a71903          	lh	s2,10(a4)
    14b8:	00c71283          	lh	t0,12(a4)
    14bc:	00e71603          	lh	a2,14(a4)
    14c0:	026d0cb3          	mul	s9,s10,t1
                for (j=0; j<N; j++) {
    14c4:	0741                	addi	a4,a4,16
    14c6:	02078793          	addi	a5,a5,32
                        C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
    14ca:	026d8c33          	mul	s8,s11,t1
    14ce:	ff97a023          	sw	s9,-32(a5)
    14d2:	026b8d33          	mul	s10,s7,t1
    14d6:	ff87a223          	sw	s8,-28(a5)
    14da:	026a8db3          	mul	s11,s5,t1
    14de:	ffa7a423          	sw	s10,-24(a5)
    14e2:	026a0bb3          	mul	s7,s4,t1
    14e6:	ffb7a623          	sw	s11,-20(a5)
    14ea:	02690ab3          	mul	s5,s2,t1
    14ee:	ff77a823          	sw	s7,-16(a5)
    14f2:	02628a33          	mul	s4,t0,t1
    14f6:	ff57aa23          	sw	s5,-12(a5)
    14fa:	02660933          	mul	s2,a2,t1
    14fe:	ff47ac23          	sw	s4,-8(a5)
    1502:	ff27ae23          	sw	s2,-4(a5)
                for (j=0; j<N; j++) {
    1506:	f8e51de3          	bne	a0,a4,14a0 <matrix_test+0x22a>
        for (i=0; i<N; i++) {
    150a:	00148713          	addi	a4,s1,1
    150e:	93fe                	add	t2,t2,t6
    1510:	411e8533          	sub	a0,t4,a7
    1514:	01048463          	beq	s1,a6,151c <matrix_test+0x2a6>
    1518:	84ba                	mv	s1,a4
    151a:	b5d9                	j	13e0 <matrix_test+0x16a>
    151c:	41f004b3          	neg	s1,t6
    1520:	411f0633          	sub	a2,t5,a7
        ee_s16 ret=0;
    1524:	4781                	li	a5,0
        MATRES tmp=0,prev=0,cur=0;
    1526:	4281                	li	t0,0
    1528:	4e81                	li	t4,0
        for (i=0; i<N; i++) {
    152a:	4301                	li	t1,0
    152c:	00349713          	slli	a4,s1,0x3
                for (j=0; j<N; j++) {
    1530:	01160e33          	add	t3,a2,a7
    1534:	41c60fb3          	sub	t6,a2,t3
    1538:	ffcf8c93          	addi	s9,t6,-4
    153c:	002cdc13          	srli	s8,s9,0x2
    1540:	001c0d13          	addi	s10,s8,1
    1544:	007d7d93          	andi	s11,s10,7
        for (i=0; i<N; i++) {
    1548:	8572                	mv	a0,t3
    154a:	240d8063          	beqz	s11,178a <matrix_test+0x514>
    154e:	4b85                	li	s7,1
    1550:	0f7d8e63          	beq	s11,s7,164c <matrix_test+0x3d6>
    1554:	4a89                	li	s5,2
    1556:	0d5d8a63          	beq	s11,s5,162a <matrix_test+0x3b4>
    155a:	4a0d                	li	s4,3
    155c:	0b4d8563          	beq	s11,s4,1606 <matrix_test+0x390>
    1560:	4911                	li	s2,4
    1562:	092d8063          	beq	s11,s2,15e2 <matrix_test+0x36c>
    1566:	4395                	li	t2,5
    1568:	047d8b63          	beq	s11,t2,15be <matrix_test+0x348>
    156c:	4499                	li	s1,6
    156e:	029d8663          	beq	s11,s1,159a <matrix_test+0x324>
                        cur=C[i*N+j];
    1572:	8516                	mv	a0,t0
    1574:	000e2283          	lw	t0,0(t3)
                                ret+=10;
    1578:	07c2                	slli	a5,a5,0x10
    157a:	0107df93          	srli	t6,a5,0x10
                        tmp+=cur;
    157e:	9e96                	add	t4,t4,t0
                        if (tmp>clipval) {
    1580:	01d5c463          	blt	a1,t4,1588 <matrix_test+0x312>
    1584:	7100106f          	j	2c94 <matrix_test+0x1a1e>
                                ret+=10;
    1588:	00af8e93          	addi	t4,t6,10
    158c:	010e9d93          	slli	s11,t4,0x10
    1590:	410dd793          	srai	a5,s11,0x10
                                tmp=0;
    1594:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
    1596:	004e0513          	addi	a0,t3,4
                        cur=C[i*N+j];
    159a:	8b96                	mv	s7,t0
    159c:	00052283          	lw	t0,0(a0)
                                ret+=10;
    15a0:	01079a93          	slli	s5,a5,0x10
    15a4:	010ada13          	srli	s4,s5,0x10
                        tmp+=cur;
    15a8:	9e96                	add	t4,t4,t0
                        if (tmp>clipval) {
    15aa:	35d5dd63          	bge	a1,t4,1904 <matrix_test+0x68e>
                                ret+=10;
    15ae:	00aa0793          	addi	a5,s4,10
    15b2:	01079f93          	slli	t6,a5,0x10
    15b6:	410fd793          	srai	a5,t6,0x10
                                tmp=0;
    15ba:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
    15bc:	0511                	addi	a0,a0,4
                        cur=C[i*N+j];
    15be:	8c96                	mv	s9,t0
    15c0:	00052283          	lw	t0,0(a0)
                                ret+=10;
    15c4:	01079c13          	slli	s8,a5,0x10
    15c8:	010c5d13          	srli	s10,s8,0x10
                        tmp+=cur;
    15cc:	9e96                	add	t4,t4,t0
                        if (tmp>clipval) {
    15ce:	33d5d263          	bge	a1,t4,18f2 <matrix_test+0x67c>
                                ret+=10;
    15d2:	00ad0e93          	addi	t4,s10,10
    15d6:	010e9a13          	slli	s4,t4,0x10
    15da:	410a5793          	srai	a5,s4,0x10
                                tmp=0;
    15de:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
    15e0:	0511                	addi	a0,a0,4
                        cur=C[i*N+j];
    15e2:	8916                	mv	s2,t0
    15e4:	00052283          	lw	t0,0(a0)
                                ret+=10;
    15e8:	01079393          	slli	t2,a5,0x10
    15ec:	0103d493          	srli	s1,t2,0x10
                        tmp+=cur;
    15f0:	9e96                	add	t4,t4,t0
                        if (tmp>clipval) {
    15f2:	2fd5d763          	bge	a1,t4,18e0 <matrix_test+0x66a>
                                ret+=10;
    15f6:	00a48c13          	addi	s8,s1,10
    15fa:	010c1d13          	slli	s10,s8,0x10
    15fe:	410d5793          	srai	a5,s10,0x10
                                tmp=0;
    1602:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
    1604:	0511                	addi	a0,a0,4
                        cur=C[i*N+j];
    1606:	8d96                	mv	s11,t0
    1608:	00052283          	lw	t0,0(a0)
                                ret+=10;
    160c:	01079b93          	slli	s7,a5,0x10
    1610:	010bda93          	srli	s5,s7,0x10
                        tmp+=cur;
    1614:	9e96                	add	t4,t4,t0
                        if (tmp>clipval) {
    1616:	2bd5dc63          	bge	a1,t4,18ce <matrix_test+0x658>
                                ret+=10;
    161a:	00aa8e93          	addi	t4,s5,10
    161e:	010e9493          	slli	s1,t4,0x10
    1622:	4104d793          	srai	a5,s1,0x10
                                tmp=0;
    1626:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
    1628:	0511                	addi	a0,a0,4
                        cur=C[i*N+j];
    162a:	8f96                	mv	t6,t0
    162c:	00052283          	lw	t0,0(a0)
                                ret+=10;
    1630:	07c2                	slli	a5,a5,0x10
    1632:	0107dc93          	srli	s9,a5,0x10
                        tmp+=cur;
    1636:	9e96                	add	t4,t4,t0
                        if (tmp>clipval) {
    1638:	29d5d263          	bge	a1,t4,18bc <matrix_test+0x646>
                                ret+=10;
    163c:	00ac8b93          	addi	s7,s9,10
    1640:	010b9a93          	slli	s5,s7,0x10
    1644:	410ad793          	srai	a5,s5,0x10
                                tmp=0;
    1648:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
    164a:	0511                	addi	a0,a0,4
                        cur=C[i*N+j];
    164c:	8a16                	mv	s4,t0
    164e:	00052283          	lw	t0,0(a0)
                                ret+=10;
    1652:	01079913          	slli	s2,a5,0x10
    1656:	01095393          	srli	t2,s2,0x10
                        tmp+=cur;
    165a:	9e96                	add	t4,t4,t0
                        if (tmp>clipval) {
    165c:	25d5d863          	bge	a1,t4,18ac <matrix_test+0x636>
                                ret+=10;
    1660:	00a38e93          	addi	t4,t2,10
    1664:	010e9c93          	slli	s9,t4,0x10
    1668:	410cd793          	srai	a5,s9,0x10
                                tmp=0;
    166c:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
    166e:	0511                	addi	a0,a0,4
    1670:	10c51d63          	bne	a0,a2,178a <matrix_test+0x514>
        for (i=0; i<N; i++) {
    1674:	00130493          	addi	s1,t1,1
    1678:	40ee0633          	sub	a2,t3,a4
    167c:	28680d63          	beq	a6,t1,1916 <matrix_test+0x6a0>
    1680:	8326                	mv	t1,s1
    1682:	b57d                	j	1530 <matrix_test+0x2ba>
                                ret += (cur>prev) ? 1 : 0;
    1684:	0182a2b3          	slt	t0,t0,s8
                        cur=C[i*N+j];
    1688:	00452c83          	lw	s9,4(a0)
                                ret += (cur>prev) ? 1 : 0;
    168c:	005d8bb3          	add	s7,s11,t0
    1690:	010b9a93          	slli	s5,s7,0x10
    1694:	410ad393          	srai	t2,s5,0x10
                                ret+=10;
    1698:	01039f93          	slli	t6,t2,0x10
                        tmp+=cur;
    169c:	01948eb3          	add	t4,s1,s9
                for (j=0; j<N; j++) {
    16a0:	0511                	addi	a0,a0,4
                                ret+=10;
    16a2:	010fd793          	srli	a5,t6,0x10
                        if (tmp>clipval) {
    16a6:	11d5de63          	bge	a1,t4,17c2 <matrix_test+0x54c>
                        cur=C[i*N+j];
    16aa:	00452a03          	lw	s4,4(a0)
                                ret+=10;
    16ae:	00a78b93          	addi	s7,a5,10
    16b2:	010b9a93          	slli	s5,s7,0x10
    16b6:	410ad293          	srai	t0,s5,0x10
                                tmp=0;
    16ba:	4e81                	li	t4,0
                                ret+=10;
    16bc:	01029913          	slli	s2,t0,0x10
                        tmp+=cur;
    16c0:	014e84b3          	add	s1,t4,s4
                                ret+=10;
    16c4:	01095393          	srli	t2,s2,0x10
                        if (tmp>clipval) {
    16c8:	1095df63          	bge	a1,s1,17e6 <matrix_test+0x570>
                        cur=C[i*N+j];
    16cc:	00852d83          	lw	s11,8(a0)
                                ret+=10;
    16d0:	00a38c13          	addi	s8,t2,10
    16d4:	010c1d13          	slli	s10,s8,0x10
    16d8:	410d5e93          	srai	t4,s10,0x10
                                tmp=0;
    16dc:	4481                	li	s1,0
                                ret+=10;
    16de:	010e9293          	slli	t0,t4,0x10
                        tmp+=cur;
    16e2:	01b48ab3          	add	s5,s1,s11
                                ret+=10;
    16e6:	0102db93          	srli	s7,t0,0x10
                        if (tmp>clipval) {
    16ea:	1355d063          	bge	a1,s5,180a <matrix_test+0x594>
                        cur=C[i*N+j];
    16ee:	00c52c03          	lw	s8,12(a0)
                                ret+=10;
    16f2:	00ab8c93          	addi	s9,s7,10
    16f6:	010c9f93          	slli	t6,s9,0x10
    16fa:	410fd493          	srai	s1,t6,0x10
                                tmp=0;
    16fe:	4a81                	li	s5,0
                                ret+=10;
    1700:	01049793          	slli	a5,s1,0x10
                        tmp+=cur;
    1704:	018a8eb3          	add	t4,s5,s8
                                ret+=10;
    1708:	0107dd13          	srli	s10,a5,0x10
                        if (tmp>clipval) {
    170c:	13d5d163          	bge	a1,t4,182e <matrix_test+0x5b8>
                                ret+=10;
    1710:	00ad0a13          	addi	s4,s10,10
                        cur=C[i*N+j];
    1714:	01052383          	lw	t2,16(a0)
                                ret+=10;
    1718:	010a1913          	slli	s2,s4,0x10
    171c:	41095a93          	srai	s5,s2,0x10
                                tmp=0;
    1720:	4e81                	li	t4,0
                                ret+=10;
    1722:	010a9493          	slli	s1,s5,0x10
                        tmp+=cur;
    1726:	007e8d33          	add	s10,t4,t2
                                ret+=10;
    172a:	0104dc93          	srli	s9,s1,0x10
                        if (tmp>clipval) {
    172e:	13a5d263          	bge	a1,s10,1852 <matrix_test+0x5dc>
                        cur=C[i*N+j];
    1732:	01452b83          	lw	s7,20(a0)
                                ret+=10;
    1736:	00ac8d93          	addi	s11,s9,10
    173a:	010d9293          	slli	t0,s11,0x10
    173e:	4102de93          	srai	t4,t0,0x10
                                tmp=0;
    1742:	4d01                	li	s10,0
                                ret+=10;
    1744:	010e9a93          	slli	s5,t4,0x10
                        tmp+=cur;
    1748:	017d0933          	add	s2,s10,s7
                                ret+=10;
    174c:	010ada13          	srli	s4,s5,0x10
                        if (tmp>clipval) {
    1750:	1325d363          	bge	a1,s2,1876 <matrix_test+0x600>
                        cur=C[i*N+j];
    1754:	01852283          	lw	t0,24(a0)
                                ret+=10;
    1758:	00aa0f93          	addi	t6,s4,10
    175c:	010f9c13          	slli	s8,t6,0x10
    1760:	410c5d13          	srai	s10,s8,0x10
                                tmp=0;
    1764:	4901                	li	s2,0
                                ret+=10;
    1766:	010d1793          	slli	a5,s10,0x10
                        tmp+=cur;
    176a:	00590eb3          	add	t4,s2,t0
                                ret+=10;
    176e:	0107dd93          	srli	s11,a5,0x10
                        if (tmp>clipval) {
    1772:	13d5d463          	bge	a1,t4,189a <matrix_test+0x624>
                                ret+=10;
    1776:	00ad8913          	addi	s2,s11,10
    177a:	01091393          	slli	t2,s2,0x10
    177e:	4103d793          	srai	a5,t2,0x10
                                tmp=0;
    1782:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
    1784:	0571                	addi	a0,a0,28
    1786:	eec507e3          	beq	a0,a2,1674 <matrix_test+0x3fe>
                        cur=C[i*N+j];
    178a:	00052c03          	lw	s8,0(a0)
                                ret+=10;
    178e:	01079d13          	slli	s10,a5,0x10
    1792:	010d5d93          	srli	s11,s10,0x10
                        tmp+=cur;
    1796:	018e84b3          	add	s1,t4,s8
                        if (tmp>clipval) {
    179a:	ee95d5e3          	bge	a1,s1,1684 <matrix_test+0x40e>
                        cur=C[i*N+j];
    179e:	00452c83          	lw	s9,4(a0)
                                ret+=10;
    17a2:	00ad8a13          	addi	s4,s11,10
    17a6:	010a1913          	slli	s2,s4,0x10
    17aa:	41095393          	srai	t2,s2,0x10
                                tmp=0;
    17ae:	4481                	li	s1,0
                                ret+=10;
    17b0:	01039f93          	slli	t6,t2,0x10
                        tmp+=cur;
    17b4:	01948eb3          	add	t4,s1,s9
                for (j=0; j<N; j++) {
    17b8:	0511                	addi	a0,a0,4
                                ret+=10;
    17ba:	010fd793          	srli	a5,t6,0x10
                        if (tmp>clipval) {
    17be:	efd5c6e3          	blt	a1,t4,16aa <matrix_test+0x434>
                                ret += (cur>prev) ? 1 : 0;
    17c2:	019c2c33          	slt	s8,s8,s9
                        cur=C[i*N+j];
    17c6:	00452a03          	lw	s4,4(a0)
                                ret += (cur>prev) ? 1 : 0;
    17ca:	01878d33          	add	s10,a5,s8
    17ce:	010d1d93          	slli	s11,s10,0x10
    17d2:	410dd293          	srai	t0,s11,0x10
                                ret+=10;
    17d6:	01029913          	slli	s2,t0,0x10
                        tmp+=cur;
    17da:	014e84b3          	add	s1,t4,s4
                                ret+=10;
    17de:	01095393          	srli	t2,s2,0x10
                        if (tmp>clipval) {
    17e2:	ee95c5e3          	blt	a1,s1,16cc <matrix_test+0x456>
                                ret += (cur>prev) ? 1 : 0;
    17e6:	014cacb3          	slt	s9,s9,s4
                        cur=C[i*N+j];
    17ea:	00852d83          	lw	s11,8(a0)
                                ret += (cur>prev) ? 1 : 0;
    17ee:	01938fb3          	add	t6,t2,s9
    17f2:	010f9793          	slli	a5,t6,0x10
    17f6:	4107de93          	srai	t4,a5,0x10
                                ret+=10;
    17fa:	010e9293          	slli	t0,t4,0x10
                        tmp+=cur;
    17fe:	01b48ab3          	add	s5,s1,s11
                                ret+=10;
    1802:	0102db93          	srli	s7,t0,0x10
                        if (tmp>clipval) {
    1806:	ef55c4e3          	blt	a1,s5,16ee <matrix_test+0x478>
                                ret += (cur>prev) ? 1 : 0;
    180a:	01ba2a33          	slt	s4,s4,s11
                        cur=C[i*N+j];
    180e:	00c52c03          	lw	s8,12(a0)
                                ret += (cur>prev) ? 1 : 0;
    1812:	014b8933          	add	s2,s7,s4
    1816:	01091393          	slli	t2,s2,0x10
    181a:	4103d493          	srai	s1,t2,0x10
                                ret+=10;
    181e:	01049793          	slli	a5,s1,0x10
                        tmp+=cur;
    1822:	018a8eb3          	add	t4,s5,s8
                                ret+=10;
    1826:	0107dd13          	srli	s10,a5,0x10
                        if (tmp>clipval) {
    182a:	efd5c3e3          	blt	a1,t4,1710 <matrix_test+0x49a>
                                ret += (cur>prev) ? 1 : 0;
    182e:	018dadb3          	slt	s11,s11,s8
    1832:	01bd02b3          	add	t0,s10,s11
                        cur=C[i*N+j];
    1836:	01052383          	lw	t2,16(a0)
                                ret += (cur>prev) ? 1 : 0;
    183a:	01029b93          	slli	s7,t0,0x10
    183e:	410bda93          	srai	s5,s7,0x10
                                ret+=10;
    1842:	010a9493          	slli	s1,s5,0x10
                        tmp+=cur;
    1846:	007e8d33          	add	s10,t4,t2
                                ret+=10;
    184a:	0104dc93          	srli	s9,s1,0x10
                        if (tmp>clipval) {
    184e:	efa5c2e3          	blt	a1,s10,1732 <matrix_test+0x4bc>
                                ret += (cur>prev) ? 1 : 0;
    1852:	007c2fb3          	slt	t6,s8,t2
                        cur=C[i*N+j];
    1856:	01452b83          	lw	s7,20(a0)
                                ret += (cur>prev) ? 1 : 0;
    185a:	01fc8c33          	add	s8,s9,t6
    185e:	010c1793          	slli	a5,s8,0x10
    1862:	4107de93          	srai	t4,a5,0x10
                                ret+=10;
    1866:	010e9a93          	slli	s5,t4,0x10
                        tmp+=cur;
    186a:	017d0933          	add	s2,s10,s7
                                ret+=10;
    186e:	010ada13          	srli	s4,s5,0x10
                        if (tmp>clipval) {
    1872:	ef25c1e3          	blt	a1,s2,1754 <matrix_test+0x4de>
                                ret += (cur>prev) ? 1 : 0;
    1876:	0173a3b3          	slt	t2,t2,s7
                        cur=C[i*N+j];
    187a:	01852283          	lw	t0,24(a0)
                                ret += (cur>prev) ? 1 : 0;
    187e:	007a04b3          	add	s1,s4,t2
    1882:	01049c93          	slli	s9,s1,0x10
    1886:	410cdd13          	srai	s10,s9,0x10
                                ret+=10;
    188a:	010d1793          	slli	a5,s10,0x10
                        tmp+=cur;
    188e:	00590eb3          	add	t4,s2,t0
                                ret+=10;
    1892:	0107dd93          	srli	s11,a5,0x10
                        if (tmp>clipval) {
    1896:	efd5c0e3          	blt	a1,t4,1776 <matrix_test+0x500>
                                ret += (cur>prev) ? 1 : 0;
    189a:	005babb3          	slt	s7,s7,t0
    189e:	017d8ab3          	add	s5,s11,s7
    18a2:	010a9a13          	slli	s4,s5,0x10
    18a6:	410a5793          	srai	a5,s4,0x10
    18aa:	bde9                	j	1784 <matrix_test+0x50e>
    18ac:	005a24b3          	slt	s1,s4,t0
    18b0:	00938fb3          	add	t6,t2,s1
    18b4:	010f9793          	slli	a5,t6,0x10
    18b8:	87c1                	srai	a5,a5,0x10
    18ba:	bb55                	j	166e <matrix_test+0x3f8>
    18bc:	005fac33          	slt	s8,t6,t0
    18c0:	018c8d33          	add	s10,s9,s8
    18c4:	010d1d93          	slli	s11,s10,0x10
    18c8:	410dd793          	srai	a5,s11,0x10
    18cc:	bbbd                	j	164a <matrix_test+0x3d4>
    18ce:	005daa33          	slt	s4,s11,t0
    18d2:	014a8933          	add	s2,s5,s4
    18d6:	01091393          	slli	t2,s2,0x10
    18da:	4103d793          	srai	a5,t2,0x10
    18de:	b3a9                	j	1628 <matrix_test+0x3b2>
    18e0:	005927b3          	slt	a5,s2,t0
    18e4:	00f48fb3          	add	t6,s1,a5
    18e8:	010f9c93          	slli	s9,t6,0x10
    18ec:	410cd793          	srai	a5,s9,0x10
    18f0:	bb11                	j	1604 <matrix_test+0x38e>
    18f2:	005cadb3          	slt	s11,s9,t0
    18f6:	01bd0bb3          	add	s7,s10,s11
    18fa:	010b9a93          	slli	s5,s7,0x10
    18fe:	410ad793          	srai	a5,s5,0x10
    1902:	b9f9                	j	15e0 <matrix_test+0x36a>
    1904:	005ba933          	slt	s2,s7,t0
    1908:	012a03b3          	add	t2,s4,s2
    190c:	01039493          	slli	s1,t2,0x10
    1910:	4104d793          	srai	a5,s1,0x10
    1914:	b165                	j	15bc <matrix_test+0x346>
                   crc &= 0x7fff;
    }
        return crc;
}
ee_u16 crcu16(ee_u16 newval, ee_u16 crc) {
        crc=crcu8( (ee_u8) (newval)                             ,crc);
    1916:	0ff7f313          	zext.b	t1,a5
                crc >>= 1;
    191a:	00137e13          	andi	t3,t1,1
    191e:	6d29                	lui	s10,0xa
    1920:	41c00cb3          	neg	s9,t3
    1924:	001d0f93          	addi	t6,s10,1 # a001 <_end+0x11b5>
    1928:	019ffc33          	and	s8,t6,s9
                data >>= 1;
    192c:	00135293          	srli	t0,t1,0x1
        crc=crcu8( (ee_u8) ((newval)>>8)        ,crc);
    1930:	01079e93          	slli	t4,a5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    1934:	0182cdb3          	xor	s11,t0,s8
        crc=crcu8( (ee_u8) ((newval)>>8)        ,crc);
    1938:	010edb93          	srli	s7,t4,0x10
                if (x16 == 1)
    193c:	001dfa93          	andi	s5,s11,1
        crc=crcu8( (ee_u8) ((newval)>>8)        ,crc);
    1940:	008bd793          	srli	a5,s7,0x8
                data >>= 1;
    1944:	00235a13          	srli	s4,t1,0x2
                crc >>= 1;
    1948:	001c5813          	srli	a6,s8,0x1
                if (x16 == 1)
    194c:	000a8b63          	beqz	s5,1962 <matrix_test+0x6ec>
                   crc |= 0x8000;
    1950:	7969                	lui	s2,0xffffa
    1952:	00190393          	addi	t2,s2,1 # ffffa001 <tohost+0x2fa7a001>
    1956:	00784533          	xor	a0,a6,t2
    195a:	01051713          	slli	a4,a0,0x10
    195e:	01075813          	srli	a6,a4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    1962:	010a48b3          	xor	a7,s4,a6
                if (x16 == 1)
    1966:	0018f493          	andi	s1,a7,1
                data >>= 1;
    196a:	00335613          	srli	a2,t1,0x3
                crc >>= 1;
    196e:	00185713          	srli	a4,a6,0x1
                if (x16 == 1)
    1972:	c891                	beqz	s1,1986 <matrix_test+0x710>
                   crc |= 0x8000;
    1974:	7369                	lui	t1,0xffffa
    1976:	00130e13          	addi	t3,t1,1 # ffffa001 <tohost+0x2fa7a001>
    197a:	01c74cb3          	xor	s9,a4,t3
    197e:	010c9d13          	slli	s10,s9,0x10
    1982:	010d5713          	srli	a4,s10,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    1986:	00e64fb3          	xor	t6,a2,a4
                if (x16 == 1)
    198a:	001ffc13          	andi	s8,t6,1
                data >>= 1;
    198e:	00165293          	srli	t0,a2,0x1
                crc >>= 1;
    1992:	00175a13          	srli	s4,a4,0x1
                if (x16 == 1)
    1996:	000c0b63          	beqz	s8,19ac <matrix_test+0x736>
                   crc |= 0x8000;
    199a:	7de9                	lui	s11,0xffffa
    199c:	001d8e93          	addi	t4,s11,1 # ffffa001 <tohost+0x2fa7a001>
    19a0:	01da4bb3          	xor	s7,s4,t4
    19a4:	010b9a93          	slli	s5,s7,0x10
    19a8:	010ada13          	srli	s4,s5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    19ac:	0142c933          	xor	s2,t0,s4
                if (x16 == 1)
    19b0:	00197393          	andi	t2,s2,1
                data >>= 1;
    19b4:	00265813          	srli	a6,a2,0x2
                crc >>= 1;
    19b8:	001a5313          	srli	t1,s4,0x1
                if (x16 == 1)
    19bc:	00038b63          	beqz	t2,19d2 <matrix_test+0x75c>
                   crc |= 0x8000;
    19c0:	7569                	lui	a0,0xffffa
    19c2:	00150893          	addi	a7,a0,1 # ffffa001 <tohost+0x2fa7a001>
    19c6:	01134733          	xor	a4,t1,a7
    19ca:	01071493          	slli	s1,a4,0x10
    19ce:	0104d313          	srli	t1,s1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    19d2:	00684e33          	xor	t3,a6,t1
                if (x16 == 1)
    19d6:	001e7c93          	andi	s9,t3,1
                data >>= 1;
    19da:	00365d13          	srli	s10,a2,0x3
                crc >>= 1;
    19de:	00135e93          	srli	t4,t1,0x1
                if (x16 == 1)
    19e2:	000c8b63          	beqz	s9,19f8 <matrix_test+0x782>
                   crc |= 0x8000;
    19e6:	7fe9                	lui	t6,0xffffa
    19e8:	001f8c13          	addi	s8,t6,1 # ffffa001 <tohost+0x2fa7a001>
    19ec:	018ec2b3          	xor	t0,t4,s8
    19f0:	01029d93          	slli	s11,t0,0x10
    19f4:	010dde93          	srli	t4,s11,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    19f8:	01dd4bb3          	xor	s7,s10,t4
                if (x16 == 1)
    19fc:	001bfa93          	andi	s5,s7,1
                data >>= 1;
    1a00:	8211                	srli	a2,a2,0x4
                crc >>= 1;
    1a02:	001ed893          	srli	a7,t4,0x1
                if (x16 == 1)
    1a06:	000a8b63          	beqz	s5,1a1c <matrix_test+0x7a6>
                   crc |= 0x8000;
    1a0a:	7a69                	lui	s4,0xffffa
    1a0c:	001a0913          	addi	s2,s4,1 # ffffa001 <tohost+0x2fa7a001>
    1a10:	0128c3b3          	xor	t2,a7,s2
    1a14:	01039813          	slli	a6,t2,0x10
    1a18:	01085893          	srli	a7,a6,0x10
                if (x16 == 1)
    1a1c:	0018f513          	andi	a0,a7,1
                crc >>= 1;
    1a20:	0018dc93          	srli	s9,a7,0x1
                if (x16 == 1)
    1a24:	00c50b63          	beq	a0,a2,1a3a <matrix_test+0x7c4>
                   crc |= 0x8000;
    1a28:	74e9                	lui	s1,0xffffa
    1a2a:	00148313          	addi	t1,s1,1 # ffffa001 <tohost+0x2fa7a001>
    1a2e:	006cc733          	xor	a4,s9,t1
    1a32:	01071e13          	slli	t3,a4,0x10
    1a36:	010e5c93          	srli	s9,t3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    1a3a:	0197cd33          	xor	s10,a5,s9
                if (x16 == 1)
    1a3e:	001d7f93          	andi	t6,s10,1
                data >>= 1;
    1a42:	0017dc13          	srli	s8,a5,0x1
                if (x16 == 1)
    1a46:	001cda93          	srli	s5,s9,0x1
    1a4a:	000f8b63          	beqz	t6,1a60 <matrix_test+0x7ea>
                   crc |= 0x8000;
    1a4e:	72e9                	lui	t0,0xffffa
    1a50:	00128d93          	addi	s11,t0,1 # ffffa001 <tohost+0x2fa7a001>
    1a54:	01baceb3          	xor	t4,s5,s11
    1a58:	010e9b93          	slli	s7,t4,0x10
    1a5c:	010bda93          	srli	s5,s7,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    1a60:	015c4633          	xor	a2,s8,s5
                if (x16 == 1)
    1a64:	00167a13          	andi	s4,a2,1
                data >>= 1;
    1a68:	0027d913          	srli	s2,a5,0x2
                if (x16 == 1)
    1a6c:	001ad493          	srli	s1,s5,0x1
    1a70:	000a0b63          	beqz	s4,1a86 <matrix_test+0x810>
                   crc |= 0x8000;
    1a74:	73e9                	lui	t2,0xffffa
    1a76:	00138813          	addi	a6,t2,1 # ffffa001 <tohost+0x2fa7a001>
    1a7a:	0104c8b3          	xor	a7,s1,a6
    1a7e:	01089513          	slli	a0,a7,0x10
    1a82:	01055493          	srli	s1,a0,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    1a86:	00994333          	xor	t1,s2,s1
                if (x16 == 1)
    1a8a:	00137e13          	andi	t3,t1,1
                data >>= 1;
    1a8e:	0037dc93          	srli	s9,a5,0x3
                if (x16 == 1)
    1a92:	0014d293          	srli	t0,s1,0x1
    1a96:	000e0b63          	beqz	t3,1aac <matrix_test+0x836>
                   crc |= 0x8000;
    1a9a:	7d69                	lui	s10,0xffffa
    1a9c:	001d0f93          	addi	t6,s10,1 # ffffa001 <tohost+0x2fa7a001>
    1aa0:	01f2c733          	xor	a4,t0,t6
    1aa4:	01071c13          	slli	s8,a4,0x10
    1aa8:	010c5293          	srli	t0,s8,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    1aac:	005ccdb3          	xor	s11,s9,t0
                if (x16 == 1)
    1ab0:	001dfe93          	andi	t4,s11,1
                data >>= 1;
    1ab4:	0047db93          	srli	s7,a5,0x4
                if (x16 == 1)
    1ab8:	0012d393          	srli	t2,t0,0x1
    1abc:	000e8b63          	beqz	t4,1ad2 <matrix_test+0x85c>
                   crc |= 0x8000;
    1ac0:	7ae9                	lui	s5,0xffffa
    1ac2:	001a8613          	addi	a2,s5,1 # ffffa001 <tohost+0x2fa7a001>
    1ac6:	00c3ca33          	xor	s4,t2,a2
    1aca:	010a1913          	slli	s2,s4,0x10
    1ace:	01095393          	srli	t2,s2,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    1ad2:	007bc833          	xor	a6,s7,t2
                if (x16 == 1)
    1ad6:	00187893          	andi	a7,a6,1
                data >>= 1;
    1ada:	0057d513          	srli	a0,a5,0x5
                if (x16 == 1)
    1ade:	0013dd13          	srli	s10,t2,0x1
    1ae2:	00088b63          	beqz	a7,1af8 <matrix_test+0x882>
                   crc |= 0x8000;
    1ae6:	74e9                	lui	s1,0xffffa
    1ae8:	00148313          	addi	t1,s1,1 # ffffa001 <tohost+0x2fa7a001>
    1aec:	006d4e33          	xor	t3,s10,t1
    1af0:	010e1c93          	slli	s9,t3,0x10
    1af4:	010cdd13          	srli	s10,s9,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    1af8:	01a54fb3          	xor	t6,a0,s10
                if (x16 == 1)
    1afc:	001ffc13          	andi	s8,t6,1
                data >>= 1;
    1b00:	0067d293          	srli	t0,a5,0x6
                if (x16 == 1)
    1b04:	001d5a93          	srli	s5,s10,0x1
    1b08:	000c0b63          	beqz	s8,1b1e <matrix_test+0x8a8>
                   crc |= 0x8000;
    1b0c:	7de9                	lui	s11,0xffffa
    1b0e:	001d8e93          	addi	t4,s11,1 # ffffa001 <tohost+0x2fa7a001>
    1b12:	01dac733          	xor	a4,s5,t4
    1b16:	01071b93          	slli	s7,a4,0x10
    1b1a:	010bda93          	srli	s5,s7,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    1b1e:	0152c633          	xor	a2,t0,s5
                if (x16 == 1)
    1b22:	00167a13          	andi	s4,a2,1
                data >>= 1;
    1b26:	839d                	srli	a5,a5,0x7
                if (x16 == 1)
    1b28:	001ad513          	srli	a0,s5,0x1
    1b2c:	000a0b63          	beqz	s4,1b42 <matrix_test+0x8cc>
                   crc |= 0x8000;
    1b30:	7969                	lui	s2,0xffffa
    1b32:	00190393          	addi	t2,s2,1 # ffffa001 <tohost+0x2fa7a001>
    1b36:	00754833          	xor	a6,a0,t2
    1b3a:	01081893          	slli	a7,a6,0x10
    1b3e:	0108d513          	srli	a0,a7,0x10
                if (x16 == 1)
    1b42:	00157493          	andi	s1,a0,1
    1b46:	00155c13          	srli	s8,a0,0x1
    1b4a:	00f48b63          	beq	s1,a5,1b60 <matrix_test+0x8ea>
                   crc |= 0x8000;
    1b4e:	7369                	lui	t1,0xffffa
    1b50:	00130e13          	addi	t3,t1,1 # ffffa001 <tohost+0x2fa7a001>
    1b54:	01cc4cb3          	xor	s9,s8,t3
    1b58:	010c9d13          	slli	s10,s9,0x10
    1b5c:	010d5c13          	srli	s8,s10,0x10
        for (i=0; i<N; i++) {
    1b60:	e019                	bnez	s0,1b66 <matrix_test+0x8f0>
    1b62:	15d0106f          	j	34be <matrix_test+0x2248>
    1b66:	00241d93          	slli	s11,s0,0x2
    1b6a:	00141e93          	slli	t4,s0,0x1
    1b6e:	88fa                	mv	a7,t5
    1b70:	01ed8833          	add	a6,s11,t5
    1b74:	013e8933          	add	s2,t4,s3
    1b78:	4a01                	li	s4,0
    1b7a:	83ae                	mv	t2,a1
    1b7c:	c662                	sw	s8,12(sp)
    1b7e:	c836                	sw	a3,16(sp)
                for (j=0; j<N; j++) {
    1b80:	413905b3          	sub	a1,s2,s3
    1b84:	ffe58693          	addi	a3,a1,-2 # ffffeffe <tohost+0x2fa7effe>
    1b88:	0016d713          	srli	a4,a3,0x1
    1b8c:	00170b93          	addi	s7,a4,1
    1b90:	001a1a93          	slli	s5,s4,0x1
    1b94:	007bf513          	andi	a0,s7,7
    1b98:	015b0633          	add	a2,s6,s5
        for (i=0; i<N; i++) {
    1b9c:	85ce                	mv	a1,s3
    1b9e:	4781                	li	a5,0
    1ba0:	c545                	beqz	a0,1c48 <matrix_test+0x9d2>
    1ba2:	4485                	li	s1,1
    1ba4:	08950763          	beq	a0,s1,1c32 <matrix_test+0x9bc>
    1ba8:	4309                	li	t1,2
    1baa:	06650b63          	beq	a0,t1,1c20 <matrix_test+0x9aa>
    1bae:	4e0d                	li	t3,3
    1bb0:	05c50f63          	beq	a0,t3,1c0e <matrix_test+0x998>
    1bb4:	4c91                	li	s9,4
    1bb6:	05950363          	beq	a0,s9,1bfc <matrix_test+0x986>
    1bba:	4d15                	li	s10,5
    1bbc:	03a50763          	beq	a0,s10,1bea <matrix_test+0x974>
    1bc0:	4c19                	li	s8,6
    1bc2:	01850b63          	beq	a0,s8,1bd8 <matrix_test+0x962>
                        C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
    1bc6:	00061783          	lh	a5,0(a2)
    1bca:	00099f83          	lh	t6,0(s3)
                for (j=0; j<N; j++) {
    1bce:	0609                	addi	a2,a2,2
    1bd0:	00298593          	addi	a1,s3,2
                        C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
    1bd4:	03f787b3          	mul	a5,a5,t6
    1bd8:	00061283          	lh	t0,0(a2)
    1bdc:	00059d83          	lh	s11,0(a1)
                for (j=0; j<N; j++) {
    1be0:	0609                	addi	a2,a2,2
    1be2:	0589                	addi	a1,a1,2
                        C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
    1be4:	03b28eb3          	mul	t4,t0,s11
    1be8:	97f6                	add	a5,a5,t4
    1bea:	00061683          	lh	a3,0(a2)
    1bee:	00059703          	lh	a4,0(a1)
                for (j=0; j<N; j++) {
    1bf2:	0609                	addi	a2,a2,2
    1bf4:	0589                	addi	a1,a1,2
                        C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
    1bf6:	02e68bb3          	mul	s7,a3,a4
    1bfa:	97de                	add	a5,a5,s7
    1bfc:	00061a83          	lh	s5,0(a2)
    1c00:	00059503          	lh	a0,0(a1)
                for (j=0; j<N; j++) {
    1c04:	0609                	addi	a2,a2,2
    1c06:	0589                	addi	a1,a1,2
                        C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
    1c08:	02aa84b3          	mul	s1,s5,a0
    1c0c:	97a6                	add	a5,a5,s1
    1c0e:	00061e03          	lh	t3,0(a2)
    1c12:	00059303          	lh	t1,0(a1)
                for (j=0; j<N; j++) {
    1c16:	0609                	addi	a2,a2,2
    1c18:	0589                	addi	a1,a1,2
                        C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
    1c1a:	026e0cb3          	mul	s9,t3,t1
    1c1e:	97e6                	add	a5,a5,s9
    1c20:	00061d03          	lh	s10,0(a2)
    1c24:	00059c03          	lh	s8,0(a1)
                for (j=0; j<N; j++) {
    1c28:	0609                	addi	a2,a2,2
    1c2a:	0589                	addi	a1,a1,2
                        C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
    1c2c:	038d0fb3          	mul	t6,s10,s8
    1c30:	97fe                	add	a5,a5,t6
    1c32:	00061283          	lh	t0,0(a2)
    1c36:	00059d83          	lh	s11,0(a1)
                for (j=0; j<N; j++) {
    1c3a:	0589                	addi	a1,a1,2
    1c3c:	0609                	addi	a2,a2,2
                        C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
    1c3e:	03b28eb3          	mul	t4,t0,s11
    1c42:	97f6                	add	a5,a5,t4
                for (j=0; j<N; j++) {
    1c44:	08b90563          	beq	s2,a1,1cce <matrix_test+0xa58>
                        C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
    1c48:	00061683          	lh	a3,0(a2)
    1c4c:	00059703          	lh	a4,0(a1)
    1c50:	00259d83          	lh	s11,2(a1)
    1c54:	00261283          	lh	t0,2(a2)
    1c58:	00461d03          	lh	s10,4(a2)
    1c5c:	00459f83          	lh	t6,4(a1)
    1c60:	02e684b3          	mul	s1,a3,a4
    1c64:	00661e83          	lh	t4,6(a2)
    1c68:	00659c83          	lh	s9,6(a1)
    1c6c:	00861e03          	lh	t3,8(a2)
    1c70:	00859c03          	lh	s8,8(a1)
    1c74:	00a61303          	lh	t1,10(a2)
    1c78:	00a59b83          	lh	s7,10(a1)
    1c7c:	00c61703          	lh	a4,12(a2)
    1c80:	00c59503          	lh	a0,12(a1)
    1c84:	00e61683          	lh	a3,14(a2)
    1c88:	03b282b3          	mul	t0,t0,s11
    1c8c:	00e59a83          	lh	s5,14(a1)
    1c90:	97a6                	add	a5,a5,s1
                for (j=0; j<N; j++) {
    1c92:	05c1                	addi	a1,a1,16
    1c94:	0641                	addi	a2,a2,16
                        C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
    1c96:	03fd0db3          	mul	s11,s10,t6
    1c9a:	00578d33          	add	s10,a5,t0
    1c9e:	039e8fb3          	mul	t6,t4,s9
    1ca2:	01bd0eb3          	add	t4,s10,s11
    1ca6:	038e0cb3          	mul	s9,t3,s8
    1caa:	01fe84b3          	add	s1,t4,t6
    1cae:	03730e33          	mul	t3,t1,s7
    1cb2:	01948c33          	add	s8,s1,s9
    1cb6:	02a70bb3          	mul	s7,a4,a0
    1cba:	01cc0733          	add	a4,s8,t3
    1cbe:	03568333          	mul	t1,a3,s5
    1cc2:	01770533          	add	a0,a4,s7
    1cc6:	006507b3          	add	a5,a0,t1
                for (j=0; j<N; j++) {
    1cca:	f6b91fe3          	bne	s2,a1,1c48 <matrix_test+0x9d2>
    1cce:	00f8a023          	sw	a5,0(a7)
        for (i=0; i<N; i++) {
    1cd2:	0891                	addi	a7,a7,4
    1cd4:	9a22                	add	s4,s4,s0
    1cd6:	eb1815e3          	bne	a6,a7,1b80 <matrix_test+0x90a>
    1cda:	4c32                	lw	s8,12(sp)
    1cdc:	46c2                	lw	a3,16(sp)
    1cde:	40800933          	neg	s2,s0
    1ce2:	859e                	mv	a1,t2
    1ce4:	00291e13          	slli	t3,s2,0x2
        ee_s16 ret=0;
    1ce8:	4781                	li	a5,0
        MATRES tmp=0,prev=0,cur=0;
    1cea:	4281                	li	t0,0
    1cec:	4e81                	li	t4,0
        for (i=0; i<N; i++) {
    1cee:	4881                	li	a7,0
    1cf0:	00391313          	slli	t1,s2,0x3
                for (j=0; j<N; j++) {
    1cf4:	01c80633          	add	a2,a6,t3
    1cf8:	40c803b3          	sub	t2,a6,a2
    1cfc:	ffc38a93          	addi	s5,t2,-4
    1d00:	002add93          	srli	s11,s5,0x2
    1d04:	001d8d13          	addi	s10,s11,1
    1d08:	007d7f93          	andi	t6,s10,7
        for (i=0; i<N; i++) {
    1d0c:	8732                	mv	a4,a2
    1d0e:	620f8f63          	beqz	t6,234c <matrix_test+0x10d6>
    1d12:	4c85                	li	s9,1
    1d14:	0f9f8c63          	beq	t6,s9,1e0c <matrix_test+0xb96>
    1d18:	4489                	li	s1,2
    1d1a:	0c9f8863          	beq	t6,s1,1dea <matrix_test+0xb74>
    1d1e:	4b8d                	li	s7,3
    1d20:	0b7f8363          	beq	t6,s7,1dc6 <matrix_test+0xb50>
    1d24:	4511                	li	a0,4
    1d26:	06af8e63          	beq	t6,a0,1da2 <matrix_test+0xb2c>
    1d2a:	4a15                	li	s4,5
    1d2c:	054f8963          	beq	t6,s4,1d7e <matrix_test+0xb08>
    1d30:	4919                	li	s2,6
    1d32:	032f8463          	beq	t6,s2,1d5a <matrix_test+0xae4>
                        cur=C[i*N+j];
    1d36:	8716                	mv	a4,t0
    1d38:	00062283          	lw	t0,0(a2)
                                ret+=10;
    1d3c:	07c2                	slli	a5,a5,0x10
    1d3e:	0107d393          	srli	t2,a5,0x10
                        tmp+=cur;
    1d42:	9e96                	add	t4,t4,t0
                        if (tmp>clipval) {
    1d44:	73d5dee3          	bge	a1,t4,2c80 <matrix_test+0x1a0a>
                                ret+=10;
    1d48:	00a38e93          	addi	t4,t2,10
    1d4c:	010e9f93          	slli	t6,t4,0x10
    1d50:	410fd793          	srai	a5,t6,0x10
                                tmp=0;
    1d54:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
    1d56:	00460713          	addi	a4,a2,4
                        cur=C[i*N+j];
    1d5a:	8c96                	mv	s9,t0
    1d5c:	00072283          	lw	t0,0(a4)
                                ret+=10;
    1d60:	01079493          	slli	s1,a5,0x10
    1d64:	0104db93          	srli	s7,s1,0x10
                        tmp+=cur;
    1d68:	9e96                	add	t4,t4,t0
                        if (tmp>clipval) {
    1d6a:	71d5d1e3          	bge	a1,t4,2c6c <matrix_test+0x19f6>
                                ret+=10;
    1d6e:	00ab8793          	addi	a5,s7,10
    1d72:	01079393          	slli	t2,a5,0x10
    1d76:	4103d793          	srai	a5,t2,0x10
                                tmp=0;
    1d7a:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
    1d7c:	0711                	addi	a4,a4,4
                        cur=C[i*N+j];
    1d7e:	8a96                	mv	s5,t0
    1d80:	00072283          	lw	t0,0(a4)
                                ret+=10;
    1d84:	01079d93          	slli	s11,a5,0x10
    1d88:	010ddd13          	srli	s10,s11,0x10
                        tmp+=cur;
    1d8c:	9e96                	add	t4,t4,t0
                        if (tmp>clipval) {
    1d8e:	73d5df63          	bge	a1,t4,24cc <matrix_test+0x1256>
                                ret+=10;
    1d92:	00ad0e93          	addi	t4,s10,10
    1d96:	010e9b93          	slli	s7,t4,0x10
    1d9a:	410bd793          	srai	a5,s7,0x10
                                tmp=0;
    1d9e:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
    1da0:	0711                	addi	a4,a4,4
                        cur=C[i*N+j];
    1da2:	8516                	mv	a0,t0
    1da4:	00072283          	lw	t0,0(a4)
                                ret+=10;
    1da8:	01079a13          	slli	s4,a5,0x10
    1dac:	010a5913          	srli	s2,s4,0x10
                        tmp+=cur;
    1db0:	9e96                	add	t4,t4,t0
                        if (tmp>clipval) {
    1db2:	71d5d463          	bge	a1,t4,24ba <matrix_test+0x1244>
                                ret+=10;
    1db6:	00a90d93          	addi	s11,s2,10
    1dba:	010d9d13          	slli	s10,s11,0x10
    1dbe:	410d5793          	srai	a5,s10,0x10
                                tmp=0;
    1dc2:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
    1dc4:	0711                	addi	a4,a4,4
                        cur=C[i*N+j];
    1dc6:	8f96                	mv	t6,t0
    1dc8:	00072283          	lw	t0,0(a4)
                                ret+=10;
    1dcc:	01079c93          	slli	s9,a5,0x10
    1dd0:	010cd493          	srli	s1,s9,0x10
                        tmp+=cur;
    1dd4:	9e96                	add	t4,t4,t0
                        if (tmp>clipval) {
    1dd6:	6dd5d963          	bge	a1,t4,24a8 <matrix_test+0x1232>
                                ret+=10;
    1dda:	00a48e93          	addi	t4,s1,10
    1dde:	010e9913          	slli	s2,t4,0x10
    1de2:	41095793          	srai	a5,s2,0x10
                                tmp=0;
    1de6:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
    1de8:	0711                	addi	a4,a4,4
                        cur=C[i*N+j];
    1dea:	8396                	mv	t2,t0
    1dec:	00072283          	lw	t0,0(a4)
                                ret+=10;
    1df0:	07c2                	slli	a5,a5,0x10
    1df2:	0107da93          	srli	s5,a5,0x10
                        tmp+=cur;
    1df6:	9e96                	add	t4,t4,t0
                        if (tmp>clipval) {
    1df8:	69d5df63          	bge	a1,t4,2496 <matrix_test+0x1220>
                                ret+=10;
    1dfc:	00aa8c93          	addi	s9,s5,10
    1e00:	010c9493          	slli	s1,s9,0x10
    1e04:	4104d793          	srai	a5,s1,0x10
                                tmp=0;
    1e08:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
    1e0a:	0711                	addi	a4,a4,4
                        cur=C[i*N+j];
    1e0c:	8b96                	mv	s7,t0
    1e0e:	00072283          	lw	t0,0(a4)
                                ret+=10;
    1e12:	01079513          	slli	a0,a5,0x10
    1e16:	01055a13          	srli	s4,a0,0x10
                        tmp+=cur;
    1e1a:	9e96                	add	t4,t4,t0
                        if (tmp>clipval) {
    1e1c:	67d5d563          	bge	a1,t4,2486 <matrix_test+0x1210>
                                ret+=10;
    1e20:	00aa0e93          	addi	t4,s4,10
    1e24:	010e9a93          	slli	s5,t4,0x10
    1e28:	410ad793          	srai	a5,s5,0x10
                                tmp=0;
    1e2c:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
    1e2e:	0711                	addi	a4,a4,4
    1e30:	50e81e63          	bne	a6,a4,234c <matrix_test+0x10d6>
        for (i=0; i<N; i++) {
    1e34:	0885                	addi	a7,a7,1
    1e36:	40660833          	sub	a6,a2,t1
    1e3a:	eb141de3          	bne	s0,a7,1cf4 <matrix_test+0xa7e>
        crc=crcu8( (ee_u8) ((newval)>>8)        ,crc);
    1e3e:	01079613          	slli	a2,a5,0x10
    1e42:	01065a13          	srli	s4,a2,0x10
        crc=crcu8( (ee_u8) (newval)                             ,crc);
    1e46:	0ff7f293          	zext.b	t0,a5
        crc=crcu8( (ee_u8) ((newval)>>8)        ,crc);
    1e4a:	008a5f93          	srli	t6,s4,0x8
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    1e4e:	0182c933          	xor	s2,t0,s8
                if (x16 == 1)
    1e52:	00197393          	andi	t2,s2,1
                data >>= 1;
    1e56:	0012da93          	srli	s5,t0,0x1
                if (x16 == 1)
    1e5a:	001c5c93          	srli	s9,s8,0x1
    1e5e:	00038b63          	beqz	t2,1e74 <matrix_test+0xbfe>
                   crc |= 0x8000;
    1e62:	7c69                	lui	s8,0xffffa
    1e64:	001c0d93          	addi	s11,s8,1 # ffffa001 <tohost+0x2fa7a001>
    1e68:	01bccd33          	xor	s10,s9,s11
    1e6c:	010d1e93          	slli	t4,s10,0x10
    1e70:	010edc93          	srli	s9,t4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    1e74:	019ac4b3          	xor	s1,s5,s9
                if (x16 == 1)
    1e78:	0014fb93          	andi	s7,s1,1
                data >>= 1;
    1e7c:	0022d513          	srli	a0,t0,0x2
                if (x16 == 1)
    1e80:	001cd893          	srli	a7,s9,0x1
    1e84:	000b8b63          	beqz	s7,1e9a <matrix_test+0xc24>
                   crc |= 0x8000;
    1e88:	7769                	lui	a4,0xffffa
    1e8a:	00170313          	addi	t1,a4,1 # ffffa001 <tohost+0x2fa7a001>
    1e8e:	0068c7b3          	xor	a5,a7,t1
    1e92:	01079e13          	slli	t3,a5,0x10
    1e96:	010e5893          	srli	a7,t3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    1e9a:	01154833          	xor	a6,a0,a7
                if (x16 == 1)
    1e9e:	00187613          	andi	a2,a6,1
                data >>= 1;
    1ea2:	0032da13          	srli	s4,t0,0x3
                if (x16 == 1)
    1ea6:	0018dd93          	srli	s11,a7,0x1
    1eaa:	ca11                	beqz	a2,1ebe <matrix_test+0xc48>
                   crc |= 0x8000;
    1eac:	7969                	lui	s2,0xffffa
    1eae:	00190393          	addi	t2,s2,1 # ffffa001 <tohost+0x2fa7a001>
    1eb2:	007dcab3          	xor	s5,s11,t2
    1eb6:	010a9c13          	slli	s8,s5,0x10
    1eba:	010c5d93          	srli	s11,s8,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    1ebe:	01ba4d33          	xor	s10,s4,s11
                if (x16 == 1)
    1ec2:	001d7e93          	andi	t4,s10,1
                data >>= 1;
    1ec6:	0042dc93          	srli	s9,t0,0x4
                if (x16 == 1)
    1eca:	001dd313          	srli	t1,s11,0x1
    1ece:	000e8b63          	beqz	t4,1ee4 <matrix_test+0xc6e>
                   crc |= 0x8000;
    1ed2:	74e9                	lui	s1,0xffffa
    1ed4:	00148b93          	addi	s7,s1,1 # ffffa001 <tohost+0x2fa7a001>
    1ed8:	01734533          	xor	a0,t1,s7
    1edc:	01051713          	slli	a4,a0,0x10
    1ee0:	01075313          	srli	t1,a4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    1ee4:	006cc7b3          	xor	a5,s9,t1
                if (x16 == 1)
    1ee8:	0017fe13          	andi	t3,a5,1
                data >>= 1;
    1eec:	0052d893          	srli	a7,t0,0x5
                if (x16 == 1)
    1ef0:	00135393          	srli	t2,t1,0x1
    1ef4:	000e0b63          	beqz	t3,1f0a <matrix_test+0xc94>
                   crc |= 0x8000;
    1ef8:	7869                	lui	a6,0xffffa
    1efa:	00180613          	addi	a2,a6,1 # ffffa001 <tohost+0x2fa7a001>
    1efe:	00c3ca33          	xor	s4,t2,a2
    1f02:	010a1913          	slli	s2,s4,0x10
    1f06:	01095393          	srli	t2,s2,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    1f0a:	0078cab3          	xor	s5,a7,t2
                if (x16 == 1)
    1f0e:	001afc13          	andi	s8,s5,1
                data >>= 1;
    1f12:	0062dd93          	srli	s11,t0,0x6
                if (x16 == 1)
    1f16:	0013db93          	srli	s7,t2,0x1
    1f1a:	000c0b63          	beqz	s8,1f30 <matrix_test+0xcba>
                   crc |= 0x8000;
    1f1e:	7d69                	lui	s10,0xffffa
    1f20:	001d0e93          	addi	t4,s10,1 # ffffa001 <tohost+0x2fa7a001>
    1f24:	01dbccb3          	xor	s9,s7,t4
    1f28:	010c9493          	slli	s1,s9,0x10
    1f2c:	0104db93          	srli	s7,s1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    1f30:	017dc533          	xor	a0,s11,s7
                if (x16 == 1)
    1f34:	00157713          	andi	a4,a0,1
                data >>= 1;
    1f38:	0072d293          	srli	t0,t0,0x7
                if (x16 == 1)
    1f3c:	001bd813          	srli	a6,s7,0x1
    1f40:	cb11                	beqz	a4,1f54 <matrix_test+0xcde>
                   crc |= 0x8000;
    1f42:	7369                	lui	t1,0xffffa
    1f44:	00130e13          	addi	t3,t1,1 # ffffa001 <tohost+0x2fa7a001>
    1f48:	01c847b3          	xor	a5,a6,t3
    1f4c:	01079893          	slli	a7,a5,0x10
    1f50:	0108d813          	srli	a6,a7,0x10
                if (x16 == 1)
    1f54:	00187613          	andi	a2,a6,1
    1f58:	00185c13          	srli	s8,a6,0x1
    1f5c:	00560b63          	beq	a2,t0,1f72 <matrix_test+0xcfc>
                   crc |= 0x8000;
    1f60:	7a69                	lui	s4,0xffffa
    1f62:	001a0913          	addi	s2,s4,1 # ffffa001 <tohost+0x2fa7a001>
    1f66:	012c43b3          	xor	t2,s8,s2
    1f6a:	01039a93          	slli	s5,t2,0x10
    1f6e:	010adc13          	srli	s8,s5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    1f72:	018fcdb3          	xor	s11,t6,s8
                if (x16 == 1)
    1f76:	001dfd13          	andi	s10,s11,1
                data >>= 1;
    1f7a:	001fde93          	srli	t4,t6,0x1
                if (x16 == 1)
    1f7e:	001c5713          	srli	a4,s8,0x1
    1f82:	000d0b63          	beqz	s10,1f98 <matrix_test+0xd22>
                   crc |= 0x8000;
    1f86:	7ce9                	lui	s9,0xffffa
    1f88:	001c8493          	addi	s1,s9,1 # ffffa001 <tohost+0x2fa7a001>
    1f8c:	00974bb3          	xor	s7,a4,s1
    1f90:	010b9513          	slli	a0,s7,0x10
    1f94:	01055713          	srli	a4,a0,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    1f98:	00eec2b3          	xor	t0,t4,a4
                if (x16 == 1)
    1f9c:	0012f313          	andi	t1,t0,1
                data >>= 1;
    1fa0:	002fde13          	srli	t3,t6,0x2
                if (x16 == 1)
    1fa4:	00175a13          	srli	s4,a4,0x1
    1fa8:	00030b63          	beqz	t1,1fbe <matrix_test+0xd48>
                   crc |= 0x8000;
    1fac:	78e9                	lui	a7,0xffffa
    1fae:	00188813          	addi	a6,a7,1 # ffffa001 <tohost+0x2fa7a001>
    1fb2:	010a47b3          	xor	a5,s4,a6
    1fb6:	01079613          	slli	a2,a5,0x10
    1fba:	01065a13          	srli	s4,a2,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    1fbe:	014e4933          	xor	s2,t3,s4
                if (x16 == 1)
    1fc2:	00197393          	andi	t2,s2,1
                data >>= 1;
    1fc6:	003fda93          	srli	s5,t6,0x3
                if (x16 == 1)
    1fca:	001a5c93          	srli	s9,s4,0x1
    1fce:	00038b63          	beqz	t2,1fe4 <matrix_test+0xd6e>
                   crc |= 0x8000;
    1fd2:	7c69                	lui	s8,0xffffa
    1fd4:	001c0d93          	addi	s11,s8,1 # ffffa001 <tohost+0x2fa7a001>
    1fd8:	01bccd33          	xor	s10,s9,s11
    1fdc:	010d1e93          	slli	t4,s10,0x10
    1fe0:	010edc93          	srli	s9,t4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    1fe4:	019ac4b3          	xor	s1,s5,s9
                if (x16 == 1)
    1fe8:	0014fb93          	andi	s7,s1,1
                data >>= 1;
    1fec:	004fd713          	srli	a4,t6,0x4
                if (x16 == 1)
    1ff0:	001cd893          	srli	a7,s9,0x1
    1ff4:	000b8b63          	beqz	s7,200a <matrix_test+0xd94>
                   crc |= 0x8000;
    1ff8:	7569                	lui	a0,0xffffa
    1ffa:	00150293          	addi	t0,a0,1 # ffffa001 <tohost+0x2fa7a001>
    1ffe:	0058c333          	xor	t1,a7,t0
    2002:	01031e13          	slli	t3,t1,0x10
    2006:	010e5893          	srli	a7,t3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    200a:	01174833          	xor	a6,a4,a7
                if (x16 == 1)
    200e:	00187613          	andi	a2,a6,1
                data >>= 1;
    2012:	005fda13          	srli	s4,t6,0x5
                if (x16 == 1)
    2016:	0018dc13          	srli	s8,a7,0x1
    201a:	ca11                	beqz	a2,202e <matrix_test+0xdb8>
                   crc |= 0x8000;
    201c:	7969                	lui	s2,0xffffa
    201e:	00190393          	addi	t2,s2,1 # ffffa001 <tohost+0x2fa7a001>
    2022:	007c47b3          	xor	a5,s8,t2
    2026:	01079a93          	slli	s5,a5,0x10
    202a:	010adc13          	srli	s8,s5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    202e:	018a4db3          	xor	s11,s4,s8
                if (x16 == 1)
    2032:	001dfd13          	andi	s10,s11,1
                data >>= 1;
    2036:	006fde93          	srli	t4,t6,0x6
                if (x16 == 1)
    203a:	001c5513          	srli	a0,s8,0x1
    203e:	000d0b63          	beqz	s10,2054 <matrix_test+0xdde>
                   crc |= 0x8000;
    2042:	7ce9                	lui	s9,0xffffa
    2044:	001c8493          	addi	s1,s9,1 # ffffa001 <tohost+0x2fa7a001>
    2048:	00954bb3          	xor	s7,a0,s1
    204c:	010b9713          	slli	a4,s7,0x10
    2050:	01075513          	srli	a0,a4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    2054:	00aec2b3          	xor	t0,t4,a0
                if (x16 == 1)
    2058:	0012f313          	andi	t1,t0,1
                data >>= 1;
    205c:	007fdf93          	srli	t6,t6,0x7
                if (x16 == 1)
    2060:	00155a13          	srli	s4,a0,0x1
    2064:	00030b63          	beqz	t1,207a <matrix_test+0xe04>
                   crc |= 0x8000;
    2068:	7e69                	lui	t3,0xffffa
    206a:	001e0893          	addi	a7,t3,1 # ffffa001 <tohost+0x2fa7a001>
    206e:	011a4833          	xor	a6,s4,a7
    2072:	01081613          	slli	a2,a6,0x10
    2076:	01065a13          	srli	s4,a2,0x10
                if (x16 == 1)
    207a:	001a7913          	andi	s2,s4,1
    207e:	001a5e13          	srli	t3,s4,0x1
    2082:	01f90b63          	beq	s2,t6,2098 <matrix_test+0xe22>
                   crc |= 0x8000;
    2086:	73e9                	lui	t2,0xffffa
    2088:	00138793          	addi	a5,t2,1 # ffffa001 <tohost+0x2fa7a001>
    208c:	00fe4ab3          	xor	s5,t3,a5
    2090:	010a9c13          	slli	s8,s5,0x10
    2094:	010c5e13          	srli	t3,s8,0x10
        for (i=0; i<N; i++) {
    2098:	4d01                	li	s10,0
    209a:	4481                	li	s1,0
    209c:	44040963          	beqz	s0,24ee <matrix_test+0x1278>
    20a0:	00141613          	slli	a2,s0,0x1
    20a4:	84da                	mv	s1,s6
    20a6:	016603b3          	add	t2,a2,s6
    20aa:	4c01                	li	s8,0
    20ac:	4781                	li	a5,0
    20ae:	cc2e                	sw	a1,24(sp)
    20b0:	8af2                	mv	s5,t3
    20b2:	ce36                	sw	a3,28(sp)
    20b4:	ca7a                	sw	t5,20(sp)
                for (j=0; j<N; j++) {
    20b6:	45d2                	lw	a1,20(sp)
    20b8:	002c1f13          	slli	t5,s8,0x2
    20bc:	86ce                	mv	a3,s3
    20be:	00bf0a33          	add	s4,t5,a1
    20c2:	4901                	li	s2,0
    20c4:	8be2                	mv	s7,s8
    20c6:	c83e                	sw	a5,16(sp)
                        for(k=0;k<N;k++)
    20c8:	40938db3          	sub	s11,t2,s1
    20cc:	ffed8d13          	addi	s10,s11,-2
    20d0:	001d5e93          	srli	t4,s10,0x1
    20d4:	001e8c93          	addi	s9,t4,1
    20d8:	007cf513          	andi	a0,s9,7
                for (j=0; j<N; j++) {
    20dc:	8736                	mv	a4,a3
    20de:	85a6                	mv	a1,s1
    20e0:	4781                	li	a5,0
    20e2:	c54d                	beqz	a0,218c <matrix_test+0xf16>
    20e4:	4285                	li	t0,1
    20e6:	08550863          	beq	a0,t0,2176 <matrix_test+0xf00>
    20ea:	4309                	li	t1,2
    20ec:	06650c63          	beq	a0,t1,2164 <matrix_test+0xeee>
    20f0:	4f8d                	li	t6,3
    20f2:	07f50063          	beq	a0,t6,2152 <matrix_test+0xedc>
    20f6:	4e11                	li	t3,4
    20f8:	05c50463          	beq	a0,t3,2140 <matrix_test+0xeca>
    20fc:	4895                	li	a7,5
    20fe:	03150863          	beq	a0,a7,212e <matrix_test+0xeb8>
    2102:	4819                	li	a6,6
    2104:	01050c63          	beq	a0,a6,211c <matrix_test+0xea6>
                                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    2108:	00049783          	lh	a5,0(s1)
    210c:	00069c03          	lh	s8,0(a3)
                        for(k=0;k<N;k++)
    2110:	00248593          	addi	a1,s1,2
    2114:	00c68733          	add	a4,a3,a2
                                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    2118:	038787b3          	mul	a5,a5,s8
    211c:	00059f03          	lh	t5,0(a1)
    2120:	00071d83          	lh	s11,0(a4)
                        for(k=0;k<N;k++)
    2124:	0589                	addi	a1,a1,2
    2126:	9732                	add	a4,a4,a2
                                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    2128:	03bf0d33          	mul	s10,t5,s11
    212c:	97ea                	add	a5,a5,s10
    212e:	00059e83          	lh	t4,0(a1)
    2132:	00071c83          	lh	s9,0(a4)
                        for(k=0;k<N;k++)
    2136:	0589                	addi	a1,a1,2
    2138:	9732                	add	a4,a4,a2
                                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    213a:	039e8533          	mul	a0,t4,s9
    213e:	97aa                	add	a5,a5,a0
    2140:	00059283          	lh	t0,0(a1)
    2144:	00071303          	lh	t1,0(a4)
                        for(k=0;k<N;k++)
    2148:	0589                	addi	a1,a1,2
    214a:	9732                	add	a4,a4,a2
                                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    214c:	02628fb3          	mul	t6,t0,t1
    2150:	97fe                	add	a5,a5,t6
    2152:	00059e03          	lh	t3,0(a1)
    2156:	00071883          	lh	a7,0(a4)
                        for(k=0;k<N;k++)
    215a:	0589                	addi	a1,a1,2
    215c:	9732                	add	a4,a4,a2
                                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    215e:	031e0833          	mul	a6,t3,a7
    2162:	97c2                	add	a5,a5,a6
    2164:	00059c03          	lh	s8,0(a1)
    2168:	00071f03          	lh	t5,0(a4)
                        for(k=0;k<N;k++)
    216c:	0589                	addi	a1,a1,2
    216e:	9732                	add	a4,a4,a2
                                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    2170:	03ec0db3          	mul	s11,s8,t5
    2174:	97ee                	add	a5,a5,s11
    2176:	00059d03          	lh	s10,0(a1)
    217a:	00071e83          	lh	t4,0(a4)
                        for(k=0;k<N;k++)
    217e:	0589                	addi	a1,a1,2
    2180:	9732                	add	a4,a4,a2
                                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    2182:	03dd0cb3          	mul	s9,s10,t4
    2186:	97e6                	add	a5,a5,s9
                        for(k=0;k<N;k++)
    2188:	0a758563          	beq	a1,t2,2232 <matrix_test+0xfbc>
    218c:	c636                	sw	a3,12(sp)
    218e:	00c706b3          	add	a3,a4,a2
                                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    2192:	00071e03          	lh	t3,0(a4)
    2196:	00059503          	lh	a0,0(a1)
    219a:	00069c03          	lh	s8,0(a3)
    219e:	00259f83          	lh	t6,2(a1)
    21a2:	03c50533          	mul	a0,a0,t3
                        for(k=0;k<N;k++)
    21a6:	00c682b3          	add	t0,a3,a2
    21aa:	00c288b3          	add	a7,t0,a2
                                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    21ae:	00029d83          	lh	s11,0(t0)
    21b2:	00459303          	lh	t1,4(a1)
                        for(k=0;k<N;k++)
    21b6:	00c88833          	add	a6,a7,a2
                                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    21ba:	00089f03          	lh	t5,0(a7)
    21be:	00659283          	lh	t0,6(a1)
    21c2:	00859e83          	lh	t4,8(a1)
    21c6:	00081e03          	lh	t3,0(a6)
    21ca:	038f8fb3          	mul	t6,t6,s8
                        for(k=0;k<N;k++)
    21ce:	00c80d33          	add	s10,a6,a2
                                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    21d2:	00a59683          	lh	a3,10(a1)
                        for(k=0;k<N;k++)
    21d6:	00cd0cb3          	add	s9,s10,a2
                                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    21da:	000d1d03          	lh	s10,0(s10)
    21de:	00c59883          	lh	a7,12(a1)
                        for(k=0;k<N;k++)
    21e2:	00cc8733          	add	a4,s9,a2
                                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    21e6:	000c9c83          	lh	s9,0(s9)
    21ea:	00e59803          	lh	a6,14(a1)
    21ee:	00071c03          	lh	s8,0(a4)
    21f2:	03b30333          	mul	t1,t1,s11
    21f6:	97aa                	add	a5,a5,a0
    21f8:	01f78db3          	add	s11,a5,t6
                        for(k=0;k<N;k++)
    21fc:	05c1                	addi	a1,a1,16
    21fe:	9732                	add	a4,a4,a2
                                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    2200:	03e282b3          	mul	t0,t0,t5
    2204:	006d8533          	add	a0,s11,t1
    2208:	03ce8f33          	mul	t5,t4,t3
    220c:	00550eb3          	add	t4,a0,t0
    2210:	03a68e33          	mul	t3,a3,s10
    2214:	01ee86b3          	add	a3,t4,t5
    2218:	03988d33          	mul	s10,a7,s9
    221c:	01c688b3          	add	a7,a3,t3
    2220:	03880fb3          	mul	t6,a6,s8
    2224:	01a88cb3          	add	s9,a7,s10
    2228:	01fc87b3          	add	a5,s9,t6
                        for(k=0;k<N;k++)
    222c:	f67591e3          	bne	a1,t2,218e <matrix_test+0xf18>
    2230:	46b2                	lw	a3,12(sp)
    2232:	00fa2023          	sw	a5,0(s4)
                for (j=0; j<N; j++) {
    2236:	00190713          	addi	a4,s2,1
    223a:	0a11                	addi	s4,s4,4
    223c:	0689                	addi	a3,a3,2
    223e:	22e40863          	beq	s0,a4,246e <matrix_test+0x11f8>
    2242:	893a                	mv	s2,a4
    2244:	b551                	j	20c8 <matrix_test+0xe52>
                                ret += (cur>prev) ? 1 : 0;
    2246:	01b2a2b3          	slt	t0,t0,s11
                        cur=C[i*N+j];
    224a:	00472383          	lw	t2,4(a4)
                                ret += (cur>prev) ? 1 : 0;
    224e:	005f8cb3          	add	s9,t6,t0
    2252:	010c9493          	slli	s1,s9,0x10
    2256:	4104da13          	srai	s4,s1,0x10
                                ret+=10;
    225a:	010a1793          	slli	a5,s4,0x10
                        tmp+=cur;
    225e:	00790eb3          	add	t4,s2,t2
                for (j=0; j<N; j++) {
    2262:	0711                	addi	a4,a4,4
                                ret+=10;
    2264:	0107da93          	srli	s5,a5,0x10
                        if (tmp>clipval) {
    2268:	11d5de63          	bge	a1,t4,2384 <matrix_test+0x110e>
                        cur=C[i*N+j];
    226c:	00472b83          	lw	s7,4(a4)
                                ret+=10;
    2270:	00aa8c93          	addi	s9,s5,10
    2274:	010c9493          	slli	s1,s9,0x10
    2278:	4104d293          	srai	t0,s1,0x10
                                tmp=0;
    227c:	4e81                	li	t4,0
                                ret+=10;
    227e:	01029513          	slli	a0,t0,0x10
                        tmp+=cur;
    2282:	017e8933          	add	s2,t4,s7
                                ret+=10;
    2286:	01055a13          	srli	s4,a0,0x10
                        if (tmp>clipval) {
    228a:	1125df63          	bge	a1,s2,23a8 <matrix_test+0x1132>
                        cur=C[i*N+j];
    228e:	00872283          	lw	t0,8(a4)
                                ret+=10;
    2292:	00aa0d93          	addi	s11,s4,10
    2296:	010d9d13          	slli	s10,s11,0x10
    229a:	410d5e93          	srai	t4,s10,0x10
                                tmp=0;
    229e:	4901                	li	s2,0
                                ret+=10;
    22a0:	010e9f93          	slli	t6,t4,0x10
                        tmp+=cur;
    22a4:	005904b3          	add	s1,s2,t0
                                ret+=10;
    22a8:	010fdc93          	srli	s9,t6,0x10
                        if (tmp>clipval) {
    22ac:	1295d063          	bge	a1,s1,23cc <matrix_test+0x1156>
                        cur=C[i*N+j];
    22b0:	00c72a83          	lw	s5,12(a4)
                                ret+=10;
    22b4:	00ac8393          	addi	t2,s9,10
    22b8:	01039793          	slli	a5,t2,0x10
    22bc:	4107d913          	srai	s2,a5,0x10
                                tmp=0;
    22c0:	4481                	li	s1,0
                                ret+=10;
    22c2:	01091e93          	slli	t4,s2,0x10
                        tmp+=cur;
    22c6:	01548d33          	add	s10,s1,s5
                                ret+=10;
    22ca:	010edd93          	srli	s11,t4,0x10
                        if (tmp>clipval) {
    22ce:	13a5d163          	bge	a1,s10,23f0 <matrix_test+0x117a>
                        cur=C[i*N+j];
    22d2:	01072a03          	lw	s4,16(a4)
                                ret+=10;
    22d6:	00ad8b93          	addi	s7,s11,10
    22da:	010b9513          	slli	a0,s7,0x10
    22de:	41055493          	srai	s1,a0,0x10
                                tmp=0;
    22e2:	4d01                	li	s10,0
                                ret+=10;
    22e4:	01049913          	slli	s2,s1,0x10
                        tmp+=cur;
    22e8:	014d0eb3          	add	t4,s10,s4
                                ret+=10;
    22ec:	01095393          	srli	t2,s2,0x10
                        if (tmp>clipval) {
    22f0:	13d5d263          	bge	a1,t4,2414 <matrix_test+0x119e>
                        cur=C[i*N+j];
    22f4:	01472c83          	lw	s9,20(a4)
                                ret+=10;
    22f8:	00a38293          	addi	t0,t2,10
    22fc:	01029f93          	slli	t6,t0,0x10
    2300:	410fdd13          	srai	s10,t6,0x10
                                tmp=0;
    2304:	4e81                	li	t4,0
                                ret+=10;
    2306:	010d1493          	slli	s1,s10,0x10
                        tmp+=cur;
    230a:	019e8533          	add	a0,t4,s9
                                ret+=10;
    230e:	0104db93          	srli	s7,s1,0x10
                        if (tmp>clipval) {
    2312:	12a5d363          	bge	a1,a0,2438 <matrix_test+0x11c2>
                        cur=C[i*N+j];
    2316:	01872283          	lw	t0,24(a4)
                                ret+=10;
    231a:	00ab8793          	addi	a5,s7,10
    231e:	01079a93          	slli	s5,a5,0x10
    2322:	410ade93          	srai	t4,s5,0x10
                                tmp=0;
    2326:	4501                	li	a0,0
                                ret+=10;
    2328:	010e9d93          	slli	s11,t4,0x10
                        tmp+=cur;
    232c:	00550eb3          	add	t4,a0,t0
                                ret+=10;
    2330:	010ddd13          	srli	s10,s11,0x10
                        if (tmp>clipval) {
    2334:	13d5d463          	bge	a1,t4,245c <matrix_test+0x11e6>
                                ret+=10;
    2338:	00ad0b93          	addi	s7,s10,10
    233c:	010b9513          	slli	a0,s7,0x10
    2340:	41055793          	srai	a5,a0,0x10
                                tmp=0;
    2344:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
    2346:	0771                	addi	a4,a4,28
    2348:	aee806e3          	beq	a6,a4,1e34 <matrix_test+0xbbe>
                        cur=C[i*N+j];
    234c:	00072d83          	lw	s11,0(a4)
                                ret+=10;
    2350:	01079d13          	slli	s10,a5,0x10
    2354:	010d5f93          	srli	t6,s10,0x10
                        tmp+=cur;
    2358:	01be8933          	add	s2,t4,s11
                        if (tmp>clipval) {
    235c:	ef25d5e3          	bge	a1,s2,2246 <matrix_test+0xfd0>
                        cur=C[i*N+j];
    2360:	00472383          	lw	t2,4(a4)
                                ret+=10;
    2364:	00af8b93          	addi	s7,t6,10
    2368:	010b9513          	slli	a0,s7,0x10
    236c:	41055a13          	srai	s4,a0,0x10
                                tmp=0;
    2370:	4901                	li	s2,0
                                ret+=10;
    2372:	010a1793          	slli	a5,s4,0x10
                        tmp+=cur;
    2376:	00790eb3          	add	t4,s2,t2
                for (j=0; j<N; j++) {
    237a:	0711                	addi	a4,a4,4
                                ret+=10;
    237c:	0107da93          	srli	s5,a5,0x10
                        if (tmp>clipval) {
    2380:	efd5c6e3          	blt	a1,t4,226c <matrix_test+0xff6>
                                ret += (cur>prev) ? 1 : 0;
    2384:	007dadb3          	slt	s11,s11,t2
                        cur=C[i*N+j];
    2388:	00472b83          	lw	s7,4(a4)
                                ret += (cur>prev) ? 1 : 0;
    238c:	01ba8d33          	add	s10,s5,s11
    2390:	010d1f93          	slli	t6,s10,0x10
    2394:	410fd293          	srai	t0,t6,0x10
                                ret+=10;
    2398:	01029513          	slli	a0,t0,0x10
                        tmp+=cur;
    239c:	017e8933          	add	s2,t4,s7
                                ret+=10;
    23a0:	01055a13          	srli	s4,a0,0x10
                        if (tmp>clipval) {
    23a4:	ef25c5e3          	blt	a1,s2,228e <matrix_test+0x1018>
                                ret += (cur>prev) ? 1 : 0;
    23a8:	0173a3b3          	slt	t2,t2,s7
                        cur=C[i*N+j];
    23ac:	00872283          	lw	t0,8(a4)
                                ret += (cur>prev) ? 1 : 0;
    23b0:	007a07b3          	add	a5,s4,t2
    23b4:	01079a93          	slli	s5,a5,0x10
    23b8:	410ade93          	srai	t4,s5,0x10
                                ret+=10;
    23bc:	010e9f93          	slli	t6,t4,0x10
                        tmp+=cur;
    23c0:	005904b3          	add	s1,s2,t0
                                ret+=10;
    23c4:	010fdc93          	srli	s9,t6,0x10
                        if (tmp>clipval) {
    23c8:	ee95c4e3          	blt	a1,s1,22b0 <matrix_test+0x103a>
                                ret += (cur>prev) ? 1 : 0;
    23cc:	005babb3          	slt	s7,s7,t0
                        cur=C[i*N+j];
    23d0:	00c72a83          	lw	s5,12(a4)
                                ret += (cur>prev) ? 1 : 0;
    23d4:	017c8533          	add	a0,s9,s7
    23d8:	01051a13          	slli	s4,a0,0x10
    23dc:	410a5913          	srai	s2,s4,0x10
                                ret+=10;
    23e0:	01091e93          	slli	t4,s2,0x10
                        tmp+=cur;
    23e4:	01548d33          	add	s10,s1,s5
                                ret+=10;
    23e8:	010edd93          	srli	s11,t4,0x10
                        if (tmp>clipval) {
    23ec:	efa5c3e3          	blt	a1,s10,22d2 <matrix_test+0x105c>
                                ret += (cur>prev) ? 1 : 0;
    23f0:	0152a2b3          	slt	t0,t0,s5
                        cur=C[i*N+j];
    23f4:	01072a03          	lw	s4,16(a4)
                                ret += (cur>prev) ? 1 : 0;
    23f8:	005d8fb3          	add	t6,s11,t0
    23fc:	010f9c93          	slli	s9,t6,0x10
    2400:	410cd493          	srai	s1,s9,0x10
                                ret+=10;
    2404:	01049913          	slli	s2,s1,0x10
                        tmp+=cur;
    2408:	014d0eb3          	add	t4,s10,s4
                                ret+=10;
    240c:	01095393          	srli	t2,s2,0x10
                        if (tmp>clipval) {
    2410:	efd5c2e3          	blt	a1,t4,22f4 <matrix_test+0x107e>
                                ret += (cur>prev) ? 1 : 0;
    2414:	014aa7b3          	slt	a5,s5,s4
                        cur=C[i*N+j];
    2418:	01472c83          	lw	s9,20(a4)
                                ret += (cur>prev) ? 1 : 0;
    241c:	00f38ab3          	add	s5,t2,a5
    2420:	010a9d93          	slli	s11,s5,0x10
    2424:	410ddd13          	srai	s10,s11,0x10
                                ret+=10;
    2428:	010d1493          	slli	s1,s10,0x10
                        tmp+=cur;
    242c:	019e8533          	add	a0,t4,s9
                                ret+=10;
    2430:	0104db93          	srli	s7,s1,0x10
                        if (tmp>clipval) {
    2434:	eea5c1e3          	blt	a1,a0,2316 <matrix_test+0x10a0>
                                ret += (cur>prev) ? 1 : 0;
    2438:	019a2a33          	slt	s4,s4,s9
                        cur=C[i*N+j];
    243c:	01872283          	lw	t0,24(a4)
                                ret += (cur>prev) ? 1 : 0;
    2440:	014b8933          	add	s2,s7,s4
    2444:	01091393          	slli	t2,s2,0x10
    2448:	4103de93          	srai	t4,t2,0x10
                                ret+=10;
    244c:	010e9d93          	slli	s11,t4,0x10
                        tmp+=cur;
    2450:	00550eb3          	add	t4,a0,t0
                                ret+=10;
    2454:	010ddd13          	srli	s10,s11,0x10
                        if (tmp>clipval) {
    2458:	efd5c0e3          	blt	a1,t4,2338 <matrix_test+0x10c2>
                                ret += (cur>prev) ? 1 : 0;
    245c:	005cafb3          	slt	t6,s9,t0
    2460:	01fd0cb3          	add	s9,s10,t6
    2464:	010c9493          	slli	s1,s9,0x10
    2468:	4104d793          	srai	a5,s1,0x10
    246c:	bde9                	j	2346 <matrix_test+0x10d0>
        for (i=0; i<N; i++) {
    246e:	4a42                	lw	s4,16(sp)
    2470:	94b2                	add	s1,s1,a2
    2472:	008b8c33          	add	s8,s7,s0
    2476:	001a0813          	addi	a6,s4,1
    247a:	00c583b3          	add	t2,a1,a2
    247e:	032a05e3          	beq	s4,s2,2ca8 <matrix_test+0x1a32>
    2482:	87c2                	mv	a5,a6
    2484:	b90d                	j	20b6 <matrix_test+0xe40>
                                ret += (cur>prev) ? 1 : 0;
    2486:	005ba933          	slt	s2,s7,t0
    248a:	012a03b3          	add	t2,s4,s2
    248e:	01039793          	slli	a5,t2,0x10
    2492:	87c1                	srai	a5,a5,0x10
    2494:	ba69                	j	1e2e <matrix_test+0xbb8>
    2496:	0053adb3          	slt	s11,t2,t0
    249a:	01ba8d33          	add	s10,s5,s11
    249e:	010d1f93          	slli	t6,s10,0x10
    24a2:	410fd793          	srai	a5,t6,0x10
    24a6:	b295                	j	1e0a <matrix_test+0xb94>
    24a8:	005fabb3          	slt	s7,t6,t0
    24ac:	01748533          	add	a0,s1,s7
    24b0:	01051a13          	slli	s4,a0,0x10
    24b4:	410a5793          	srai	a5,s4,0x10
    24b8:	ba05                	j	1de8 <matrix_test+0xb72>
    24ba:	005527b3          	slt	a5,a0,t0
    24be:	00f903b3          	add	t2,s2,a5
    24c2:	01039a93          	slli	s5,t2,0x10
    24c6:	410ad793          	srai	a5,s5,0x10
    24ca:	b8ed                	j	1dc4 <matrix_test+0xb4e>
    24cc:	005aafb3          	slt	t6,s5,t0
    24d0:	01fd0cb3          	add	s9,s10,t6
    24d4:	010c9493          	slli	s1,s9,0x10
    24d8:	4104d793          	srai	a5,s1,0x10
    24dc:	b0d1                	j	1da0 <matrix_test+0xb2a>
        crc=crcu8( (ee_u8) ((newval)>>8)        ,crc);
    24de:	01079813          	slli	a6,a5,0x10
    24e2:	01085513          	srli	a0,a6,0x10
        crc=crcu8( (ee_u8) (newval)                             ,crc);
    24e6:	0ff7f493          	zext.b	s1,a5
        crc=crcu8( (ee_u8) ((newval)>>8)        ,crc);
    24ea:	00855d13          	srli	s10,a0,0x8
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    24ee:	01c4cbb3          	xor	s7,s1,t3
                if (x16 == 1)
    24f2:	001bf293          	andi	t0,s7,1
                data >>= 1;
    24f6:	0014dd93          	srli	s11,s1,0x1
                if (x16 == 1)
    24fa:	001e5a13          	srli	s4,t3,0x1
    24fe:	00028b63          	beqz	t0,2514 <matrix_test+0x129e>
                   crc |= 0x8000;
    2502:	7ee9                	lui	t4,0xffffa
    2504:	001e8c93          	addi	s9,t4,1 # ffffa001 <tohost+0x2fa7a001>
    2508:	019a4fb3          	xor	t6,s4,s9
    250c:	010f9a93          	slli	s5,t6,0x10
    2510:	010ada13          	srli	s4,s5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    2514:	014dcc33          	xor	s8,s11,s4
                if (x16 == 1)
    2518:	001c7713          	andi	a4,s8,1
                data >>= 1;
    251c:	0024d313          	srli	t1,s1,0x2
                if (x16 == 1)
    2520:	001a5513          	srli	a0,s4,0x1
    2524:	cb11                	beqz	a4,2538 <matrix_test+0x12c2>
                   crc |= 0x8000;
    2526:	78e9                	lui	a7,0xffffa
    2528:	00188913          	addi	s2,a7,1 # ffffa001 <tohost+0x2fa7a001>
    252c:	01254e33          	xor	t3,a0,s2
    2530:	010e1393          	slli	t2,t3,0x10
    2534:	0103d513          	srli	a0,t2,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    2538:	00a34833          	xor	a6,t1,a0
                if (x16 == 1)
    253c:	00187793          	andi	a5,a6,1
                data >>= 1;
    2540:	0034db93          	srli	s7,s1,0x3
                if (x16 == 1)
    2544:	00155c93          	srli	s9,a0,0x1
    2548:	cb91                	beqz	a5,255c <matrix_test+0x12e6>
                   crc |= 0x8000;
    254a:	7669                	lui	a2,0xffffa
    254c:	00160293          	addi	t0,a2,1 # ffffa001 <tohost+0x2fa7a001>
    2550:	005ccdb3          	xor	s11,s9,t0
    2554:	010d9e93          	slli	t4,s11,0x10
    2558:	010edc93          	srli	s9,t4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    255c:	019bcfb3          	xor	t6,s7,s9
                if (x16 == 1)
    2560:	001ffa93          	andi	s5,t6,1
                data >>= 1;
    2564:	0044da13          	srli	s4,s1,0x4
                if (x16 == 1)
    2568:	001cd913          	srli	s2,s9,0x1
    256c:	000a8b63          	beqz	s5,2582 <matrix_test+0x130c>
                   crc |= 0x8000;
    2570:	7c69                	lui	s8,0xffffa
    2572:	001c0713          	addi	a4,s8,1 # ffffa001 <tohost+0x2fa7a001>
    2576:	00e94333          	xor	t1,s2,a4
    257a:	01031893          	slli	a7,t1,0x10
    257e:	0108d913          	srli	s2,a7,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    2582:	012a4e33          	xor	t3,s4,s2
                if (x16 == 1)
    2586:	001e7393          	andi	t2,t3,1
                data >>= 1;
    258a:	0054d813          	srli	a6,s1,0x5
                if (x16 == 1)
    258e:	00195293          	srli	t0,s2,0x1
    2592:	00038b63          	beqz	t2,25a8 <matrix_test+0x1332>
                   crc |= 0x8000;
    2596:	77e9                	lui	a5,0xffffa
    2598:	00178b93          	addi	s7,a5,1 # ffffa001 <tohost+0x2fa7a001>
    259c:	0172c533          	xor	a0,t0,s7
    25a0:	01051613          	slli	a2,a0,0x10
    25a4:	01065293          	srli	t0,a2,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    25a8:	00584db3          	xor	s11,a6,t0
                if (x16 == 1)
    25ac:	001dfe93          	andi	t4,s11,1
                data >>= 1;
    25b0:	0064dc93          	srli	s9,s1,0x6
                if (x16 == 1)
    25b4:	0012d313          	srli	t1,t0,0x1
    25b8:	000e8b63          	beqz	t4,25ce <matrix_test+0x1358>
                   crc |= 0x8000;
    25bc:	7fe9                	lui	t6,0xffffa
    25be:	001f8a93          	addi	s5,t6,1 # ffffa001 <tohost+0x2fa7a001>
    25c2:	01534a33          	xor	s4,t1,s5
    25c6:	010a1c13          	slli	s8,s4,0x10
    25ca:	010c5313          	srli	t1,s8,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    25ce:	006cc733          	xor	a4,s9,t1
                if (x16 == 1)
    25d2:	00177893          	andi	a7,a4,1
                data >>= 1;
    25d6:	809d                	srli	s1,s1,0x7
                if (x16 == 1)
    25d8:	00135793          	srli	a5,t1,0x1
    25dc:	00088b63          	beqz	a7,25f2 <matrix_test+0x137c>
                   crc |= 0x8000;
    25e0:	7969                	lui	s2,0xffffa
    25e2:	00190e13          	addi	t3,s2,1 # ffffa001 <tohost+0x2fa7a001>
    25e6:	01c7c3b3          	xor	t2,a5,t3
    25ea:	01039813          	slli	a6,t2,0x10
    25ee:	01085793          	srli	a5,a6,0x10
                if (x16 == 1)
    25f2:	0017fb93          	andi	s7,a5,1
    25f6:	0017de93          	srli	t4,a5,0x1
    25fa:	009b8b63          	beq	s7,s1,2610 <matrix_test+0x139a>
                   crc |= 0x8000;
    25fe:	7669                	lui	a2,0xffffa
    2600:	00160293          	addi	t0,a2,1 # ffffa001 <tohost+0x2fa7a001>
    2604:	005ec533          	xor	a0,t4,t0
    2608:	01051d93          	slli	s11,a0,0x10
    260c:	010dde93          	srli	t4,s11,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    2610:	01dd4cb3          	xor	s9,s10,t4
                if (x16 == 1)
    2614:	001cff93          	andi	t6,s9,1
                data >>= 1;
    2618:	001d5a93          	srli	s5,s10,0x1
                if (x16 == 1)
    261c:	001ed893          	srli	a7,t4,0x1
    2620:	000f8b63          	beqz	t6,2636 <matrix_test+0x13c0>
                   crc |= 0x8000;
    2624:	7a69                	lui	s4,0xffffa
    2626:	001a0c13          	addi	s8,s4,1 # ffffa001 <tohost+0x2fa7a001>
    262a:	0188c333          	xor	t1,a7,s8
    262e:	01031713          	slli	a4,t1,0x10
    2632:	01075893          	srli	a7,a4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    2636:	011ac4b3          	xor	s1,s5,a7
                if (x16 == 1)
    263a:	0014f913          	andi	s2,s1,1
                data >>= 1;
    263e:	002d5e13          	srli	t3,s10,0x2
                if (x16 == 1)
    2642:	0018d293          	srli	t0,a7,0x1
    2646:	00090b63          	beqz	s2,265c <matrix_test+0x13e6>
                   crc |= 0x8000;
    264a:	73e9                	lui	t2,0xffffa
    264c:	00138813          	addi	a6,t2,1 # ffffa001 <tohost+0x2fa7a001>
    2650:	0102c7b3          	xor	a5,t0,a6
    2654:	01079b93          	slli	s7,a5,0x10
    2658:	010bd293          	srli	t0,s7,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    265c:	005e4633          	xor	a2,t3,t0
                if (x16 == 1)
    2660:	00167d93          	andi	s11,a2,1
                data >>= 1;
    2664:	003d5e93          	srli	t4,s10,0x3
                if (x16 == 1)
    2668:	0012da13          	srli	s4,t0,0x1
    266c:	000d8b63          	beqz	s11,2682 <matrix_test+0x140c>
                   crc |= 0x8000;
    2670:	7ce9                	lui	s9,0xffffa
    2672:	001c8f93          	addi	t6,s9,1 # ffffa001 <tohost+0x2fa7a001>
    2676:	01fa4533          	xor	a0,s4,t6
    267a:	01051a93          	slli	s5,a0,0x10
    267e:	010ada13          	srli	s4,s5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    2682:	014ecc33          	xor	s8,t4,s4
                if (x16 == 1)
    2686:	001c7313          	andi	t1,s8,1
                data >>= 1;
    268a:	004d5713          	srli	a4,s10,0x4
                if (x16 == 1)
    268e:	001a5393          	srli	t2,s4,0x1
    2692:	00030b63          	beqz	t1,26a8 <matrix_test+0x1432>
                   crc |= 0x8000;
    2696:	78e9                	lui	a7,0xffffa
    2698:	00188493          	addi	s1,a7,1 # ffffa001 <tohost+0x2fa7a001>
    269c:	0093c933          	xor	s2,t2,s1
    26a0:	01091e13          	slli	t3,s2,0x10
    26a4:	010e5393          	srli	t2,t3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    26a8:	00774833          	xor	a6,a4,t2
                if (x16 == 1)
    26ac:	00187793          	andi	a5,a6,1
                data >>= 1;
    26b0:	005d5b93          	srli	s7,s10,0x5
                if (x16 == 1)
    26b4:	0013dc93          	srli	s9,t2,0x1
    26b8:	cb91                	beqz	a5,26cc <matrix_test+0x1456>
                   crc |= 0x8000;
    26ba:	72e9                	lui	t0,0xffffa
    26bc:	00128613          	addi	a2,t0,1 # ffffa001 <tohost+0x2fa7a001>
    26c0:	00cccdb3          	xor	s11,s9,a2
    26c4:	010d9e93          	slli	t4,s11,0x10
    26c8:	010edc93          	srli	s9,t4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    26cc:	019bcfb3          	xor	t6,s7,s9
                if (x16 == 1)
    26d0:	001ffa93          	andi	s5,t6,1
                data >>= 1;
    26d4:	006d5a13          	srli	s4,s10,0x6
                if (x16 == 1)
    26d8:	001cd893          	srli	a7,s9,0x1
    26dc:	000a8b63          	beqz	s5,26f2 <matrix_test+0x147c>
                   crc |= 0x8000;
    26e0:	7c69                	lui	s8,0xffffa
    26e2:	001c0313          	addi	t1,s8,1 # ffffa001 <tohost+0x2fa7a001>
    26e6:	0068c533          	xor	a0,a7,t1
    26ea:	01051713          	slli	a4,a0,0x10
    26ee:	01075893          	srli	a7,a4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    26f2:	011a44b3          	xor	s1,s4,a7
                if (x16 == 1)
    26f6:	0014f913          	andi	s2,s1,1
                data >>= 1;
    26fa:	007d5d13          	srli	s10,s10,0x7
                if (x16 == 1)
    26fe:	0018db93          	srli	s7,a7,0x1
    2702:	00090b63          	beqz	s2,2718 <matrix_test+0x14a2>
                   crc |= 0x8000;
    2706:	7e69                	lui	t3,0xffffa
    2708:	001e0393          	addi	t2,t3,1 # ffffa001 <tohost+0x2fa7a001>
    270c:	007bc833          	xor	a6,s7,t2
    2710:	01081793          	slli	a5,a6,0x10
    2714:	0107db93          	srli	s7,a5,0x10
                if (x16 == 1)
    2718:	001bf293          	andi	t0,s7,1
    271c:	001bd513          	srli	a0,s7,0x1
    2720:	01a28b63          	beq	t0,s10,2736 <matrix_test+0x14c0>
                   crc |= 0x8000;
    2724:	7669                	lui	a2,0xffffa
    2726:	00160d93          	addi	s11,a2,1 # ffffa001 <tohost+0x2fa7a001>
    272a:	01b54eb3          	xor	t4,a0,s11
    272e:	010e9c93          	slli	s9,t4,0x10
    2732:	010cd513          	srli	a0,s9,0x10
        for (i=0; i<N; i++) {
    2736:	4c01                	li	s8,0
    2738:	4601                	li	a2,0
    273a:	18040c63          	beqz	s0,28d2 <matrix_test+0x165c>
    273e:	00141313          	slli	t1,s0,0x1
    2742:	82da                	mv	t0,s6
    2744:	006b0e33          	add	t3,s6,t1
    2748:	4481                	li	s1,0
    274a:	4901                	li	s2,0
                for (j=0; j<N; j++) {
    274c:	00249f93          	slli	t6,s1,0x2
    2750:	01ef8a33          	add	s4,t6,t5
    2754:	8dce                	mv	s11,s3
    2756:	4381                	li	t2,0
                        for(k=0;k<N;k++)
    2758:	405e0ab3          	sub	s5,t3,t0
    275c:	ffea8c13          	addi	s8,s5,-2
    2760:	001c5713          	srli	a4,s8,0x1
    2764:	00170893          	addi	a7,a4,1
    2768:	0038fd13          	andi	s10,a7,3
                for (j=0; j<N; j++) {
    276c:	8eee                	mv	t4,s11
    276e:	8816                	mv	a6,t0
    2770:	4b81                	li	s7,0
    2772:	080d0463          	beqz	s10,27fa <matrix_test+0x1584>
    2776:	4785                	li	a5,1
    2778:	04fd0c63          	beq	s10,a5,27d0 <matrix_test+0x155a>
    277c:	4609                	li	a2,2
    277e:	02cd0663          	beq	s10,a2,27aa <matrix_test+0x1534>
                                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    2782:	00029b83          	lh	s7,0(t0)
    2786:	000d9c83          	lh	s9,0(s11)
                        for(k=0;k<N;k++)
    278a:	00228813          	addi	a6,t0,2
    278e:	006d8eb3          	add	t4,s11,t1
                                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    2792:	039b8fb3          	mul	t6,s7,s9
                                C[i*N+j]+=bit_extract(tmp,2,4)*bit_extract(tmp,5,7);
    2796:	402fda93          	srai	s5,t6,0x2
    279a:	405fdc13          	srai	s8,t6,0x5
    279e:	00faf713          	andi	a4,s5,15
    27a2:	07fc7893          	andi	a7,s8,127
    27a6:	03170bb3          	mul	s7,a4,a7
                                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    27aa:	00081d03          	lh	s10,0(a6)
    27ae:	000e9783          	lh	a5,0(t4)
                        for(k=0;k<N;k++)
    27b2:	0809                	addi	a6,a6,2
    27b4:	9e9a                	add	t4,t4,t1
                                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    27b6:	02fd0633          	mul	a2,s10,a5
                                C[i*N+j]+=bit_extract(tmp,2,4)*bit_extract(tmp,5,7);
    27ba:	40265c93          	srai	s9,a2,0x2
    27be:	40565f93          	srai	t6,a2,0x5
    27c2:	00fcfa93          	andi	s5,s9,15
    27c6:	07fffc13          	andi	s8,t6,127
    27ca:	038a8733          	mul	a4,s5,s8
    27ce:	9bba                	add	s7,s7,a4
                                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    27d0:	00081883          	lh	a7,0(a6)
    27d4:	000e9d03          	lh	s10,0(t4)
                        for(k=0;k<N;k++)
    27d8:	0809                	addi	a6,a6,2
    27da:	9e9a                	add	t4,t4,t1
                                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    27dc:	03a887b3          	mul	a5,a7,s10
                                C[i*N+j]+=bit_extract(tmp,2,4)*bit_extract(tmp,5,7);
    27e0:	4027d613          	srai	a2,a5,0x2
    27e4:	4057dc93          	srai	s9,a5,0x5
    27e8:	00f67f93          	andi	t6,a2,15
    27ec:	07fcfa93          	andi	s5,s9,127
    27f0:	035f8c33          	mul	s8,t6,s5
    27f4:	9be2                	add	s7,s7,s8
                        for(k=0;k<N;k++)
    27f6:	0bc80263          	beq	a6,t3,289a <matrix_test+0x1624>
    27fa:	006e88b3          	add	a7,t4,t1
                                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    27fe:	000e9d03          	lh	s10,0(t4)
    2802:	00081703          	lh	a4,0(a6)
                        for(k=0;k<N;k++)
    2806:	006887b3          	add	a5,a7,t1
                                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    280a:	00089f83          	lh	t6,0(a7)
    280e:	00281603          	lh	a2,2(a6)
    2812:	00079a83          	lh	s5,0(a5)
                        for(k=0;k<N;k++)
    2816:	00678eb3          	add	t4,a5,t1
                                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    281a:	00481883          	lh	a7,4(a6)
    281e:	03a70733          	mul	a4,a4,s10
    2822:	000e9c83          	lh	s9,0(t4)
    2826:	00681783          	lh	a5,6(a6)
                        for(k=0;k<N;k++)
    282a:	0821                	addi	a6,a6,8
    282c:	9e9a                	add	t4,t4,t1
                                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    282e:	03f60633          	mul	a2,a2,t6
                                C[i*N+j]+=bit_extract(tmp,2,4)*bit_extract(tmp,5,7);
    2832:	40275c13          	srai	s8,a4,0x2
    2836:	40575d13          	srai	s10,a4,0x5
    283a:	07fd7713          	andi	a4,s10,127
    283e:	00fc7f93          	andi	t6,s8,15
                                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    2842:	035888b3          	mul	a7,a7,s5
                                C[i*N+j]+=bit_extract(tmp,2,4)*bit_extract(tmp,5,7);
    2846:	40265a93          	srai	s5,a2,0x2
    284a:	8615                	srai	a2,a2,0x5
    284c:	00fafd13          	andi	s10,s5,15
    2850:	07f67a93          	andi	s5,a2,127
                                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    2854:	039787b3          	mul	a5,a5,s9
                                C[i*N+j]+=bit_extract(tmp,2,4)*bit_extract(tmp,5,7);
    2858:	4058dc13          	srai	s8,a7,0x5
    285c:	4028dc93          	srai	s9,a7,0x2
    2860:	00fcfc93          	andi	s9,s9,15
    2864:	07fc7893          	andi	a7,s8,127
    2868:	02ef8fb3          	mul	t6,t6,a4
    286c:	4057d613          	srai	a2,a5,0x5
    2870:	4027d713          	srai	a4,a5,0x2
    2874:	00f77c13          	andi	s8,a4,15
    2878:	07f67713          	andi	a4,a2,127
    287c:	035d0d33          	mul	s10,s10,s5
    2880:	9bfe                	add	s7,s7,t6
    2882:	031c8ab3          	mul	s5,s9,a7
    2886:	01ab87b3          	add	a5,s7,s10
    288a:	02ec0cb3          	mul	s9,s8,a4
    288e:	015788b3          	add	a7,a5,s5
    2892:	01988bb3          	add	s7,a7,s9
                        for(k=0;k<N;k++)
    2896:	f7c812e3          	bne	a6,t3,27fa <matrix_test+0x1584>
    289a:	017a2023          	sw	s7,0(s4)
                for (j=0; j<N; j++) {
    289e:	00138e93          	addi	t4,t2,1
    28a2:	0a11                	addi	s4,s4,4
    28a4:	0d89                	addi	s11,s11,2
    28a6:	01d40463          	beq	s0,t4,28ae <matrix_test+0x1638>
    28aa:	83f6                	mv	t2,t4
    28ac:	b575                	j	2758 <matrix_test+0x14e2>
        for (i=0; i<N; i++) {
    28ae:	00190a13          	addi	s4,s2,1
    28b2:	929a                	add	t0,t0,t1
    28b4:	94a2                	add	s1,s1,s0
    28b6:	00680e33          	add	t3,a6,t1
    28ba:	7e790b63          	beq	s2,t2,30b0 <matrix_test+0x1e3a>
    28be:	8952                	mv	s2,s4
    28c0:	b571                	j	274c <matrix_test+0x14d6>
        crc=crcu8( (ee_u8) ((newval)>>8)        ,crc);
    28c2:	01079813          	slli	a6,a5,0x10
    28c6:	01085913          	srli	s2,a6,0x10
        crc=crcu8( (ee_u8) (newval)                             ,crc);
    28ca:	0ff7f613          	zext.b	a2,a5
        crc=crcu8( (ee_u8) ((newval)>>8)        ,crc);
    28ce:	00895c13          	srli	s8,s2,0x8
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    28d2:	00a64d33          	xor	s10,a2,a0
                if (x16 == 1)
    28d6:	001d7b93          	andi	s7,s10,1
                data >>= 1;
    28da:	00165f93          	srli	t6,a2,0x1
                if (x16 == 1)
    28de:	00155293          	srli	t0,a0,0x1
    28e2:	000b8b63          	beqz	s7,28f8 <matrix_test+0x1682>
                   crc |= 0x8000;
    28e6:	7ae9                	lui	s5,0xffffa
    28e8:	001a8c93          	addi	s9,s5,1 # ffffa001 <tohost+0x2fa7a001>
    28ec:	0192ceb3          	xor	t4,t0,s9
    28f0:	010e9a13          	slli	s4,t4,0x10
    28f4:	010a5293          	srli	t0,s4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    28f8:	005fc4b3          	xor	s1,t6,t0
                if (x16 == 1)
    28fc:	0014fe13          	andi	t3,s1,1
                data >>= 1;
    2900:	00265393          	srli	t2,a2,0x2
                if (x16 == 1)
    2904:	0012dd93          	srli	s11,t0,0x1
    2908:	000e0b63          	beqz	t3,291e <matrix_test+0x16a8>
                   crc |= 0x8000;
    290c:	7569                	lui	a0,0xffffa
    290e:	00150593          	addi	a1,a0,1 # ffffa001 <tohost+0x2fa7a001>
    2912:	00bdc7b3          	xor	a5,s11,a1
    2916:	01079893          	slli	a7,a5,0x10
    291a:	0108dd93          	srli	s11,a7,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    291e:	01b3c733          	xor	a4,t2,s11
                if (x16 == 1)
    2922:	00177813          	andi	a6,a4,1
                data >>= 1;
    2926:	00365913          	srli	s2,a2,0x3
                if (x16 == 1)
    292a:	001ddb93          	srli	s7,s11,0x1
    292e:	00080b63          	beqz	a6,2944 <matrix_test+0x16ce>
                   crc |= 0x8000;
    2932:	7369                	lui	t1,0xffffa
    2934:	00130993          	addi	s3,t1,1 # ffffa001 <tohost+0x2fa7a001>
    2938:	013bcf33          	xor	t5,s7,s3
    293c:	010f1d13          	slli	s10,t5,0x10
    2940:	010d5b93          	srli	s7,s10,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    2944:	01794fb3          	xor	t6,s2,s7
                if (x16 == 1)
    2948:	001ffa93          	andi	s5,t6,1
                data >>= 1;
    294c:	00465c93          	srli	s9,a2,0x4
                if (x16 == 1)
    2950:	001bde13          	srli	t3,s7,0x1
    2954:	000a8b63          	beqz	s5,296a <matrix_test+0x16f4>
                   crc |= 0x8000;
    2958:	7ee9                	lui	t4,0xffffa
    295a:	001e8a13          	addi	s4,t4,1 # ffffa001 <tohost+0x2fa7a001>
    295e:	014e42b3          	xor	t0,t3,s4
    2962:	01029493          	slli	s1,t0,0x10
    2966:	0104de13          	srli	t3,s1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    296a:	01ccc3b3          	xor	t2,s9,t3
                if (x16 == 1)
    296e:	0013f593          	andi	a1,t2,1
                data >>= 1;
    2972:	00565513          	srli	a0,a2,0x5
                if (x16 == 1)
    2976:	001e5813          	srli	a6,t3,0x1
    297a:	c991                	beqz	a1,298e <matrix_test+0x1718>
                   crc |= 0x8000;
    297c:	78e9                	lui	a7,0xffffa
    297e:	00188d93          	addi	s11,a7,1 # ffffa001 <tohost+0x2fa7a001>
    2982:	01b847b3          	xor	a5,a6,s11
    2986:	01079713          	slli	a4,a5,0x10
    298a:	01075813          	srli	a6,a4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    298e:	01054933          	xor	s2,a0,a6
                if (x16 == 1)
    2992:	00197313          	andi	t1,s2,1
                data >>= 1;
    2996:	00665993          	srli	s3,a2,0x6
                if (x16 == 1)
    299a:	00185a93          	srli	s5,a6,0x1
    299e:	00030b63          	beqz	t1,29b4 <matrix_test+0x173e>
                   crc |= 0x8000;
    29a2:	7f69                	lui	t5,0xffffa
    29a4:	001f0d13          	addi	s10,t5,1 # ffffa001 <tohost+0x2fa7a001>
    29a8:	01aacbb3          	xor	s7,s5,s10
    29ac:	010b9f93          	slli	t6,s7,0x10
    29b0:	010fda93          	srli	s5,t6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    29b4:	0159ccb3          	xor	s9,s3,s5
                if (x16 == 1)
    29b8:	001cfe93          	andi	t4,s9,1
                data >>= 1;
    29bc:	821d                	srli	a2,a2,0x7
                if (x16 == 1)
    29be:	001ad393          	srli	t2,s5,0x1
    29c2:	000e8b63          	beqz	t4,29d8 <matrix_test+0x1762>
                   crc |= 0x8000;
    29c6:	7a69                	lui	s4,0xffffa
    29c8:	001a0293          	addi	t0,s4,1 # ffffa001 <tohost+0x2fa7a001>
    29cc:	0053c4b3          	xor	s1,t2,t0
    29d0:	01049e13          	slli	t3,s1,0x10
    29d4:	010e5393          	srli	t2,t3,0x10
                if (x16 == 1)
    29d8:	0013f593          	andi	a1,t2,1
    29dc:	0013d713          	srli	a4,t2,0x1
    29e0:	00c58b63          	beq	a1,a2,29f6 <matrix_test+0x1780>
                   crc |= 0x8000;
    29e4:	7569                	lui	a0,0xffffa
    29e6:	00150893          	addi	a7,a0,1 # ffffa001 <tohost+0x2fa7a001>
    29ea:	01174db3          	xor	s11,a4,a7
    29ee:	010d9793          	slli	a5,s11,0x10
    29f2:	0107d713          	srli	a4,a5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    29f6:	00ec4833          	xor	a6,s8,a4
                if (x16 == 1)
    29fa:	00187913          	andi	s2,a6,1
                data >>= 1;
    29fe:	001c5313          	srli	t1,s8,0x1
                if (x16 == 1)
    2a02:	00175f93          	srli	t6,a4,0x1
    2a06:	00090b63          	beqz	s2,2a1c <matrix_test+0x17a6>
                   crc |= 0x8000;
    2a0a:	79e9                	lui	s3,0xffffa
    2a0c:	00198f13          	addi	t5,s3,1 # ffffa001 <tohost+0x2fa7a001>
    2a10:	01efcd33          	xor	s10,t6,t5
    2a14:	010d1b93          	slli	s7,s10,0x10
    2a18:	010bdf93          	srli	t6,s7,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    2a1c:	01f34ab3          	xor	s5,t1,t6
                if (x16 == 1)
    2a20:	001afc93          	andi	s9,s5,1
                data >>= 1;
    2a24:	002c5e93          	srli	t4,s8,0x2
                if (x16 == 1)
    2a28:	001fde13          	srli	t3,t6,0x1
    2a2c:	000c8b63          	beqz	s9,2a42 <matrix_test+0x17cc>
                   crc |= 0x8000;
    2a30:	7669                	lui	a2,0xffffa
    2a32:	00160a13          	addi	s4,a2,1 # ffffa001 <tohost+0x2fa7a001>
    2a36:	014e42b3          	xor	t0,t3,s4
    2a3a:	01029493          	slli	s1,t0,0x10
    2a3e:	0104de13          	srli	t3,s1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    2a42:	01cec3b3          	xor	t2,t4,t3
                if (x16 == 1)
    2a46:	0013f513          	andi	a0,t2,1
                data >>= 1;
    2a4a:	003c5593          	srli	a1,s8,0x3
                if (x16 == 1)
    2a4e:	001e5813          	srli	a6,t3,0x1
    2a52:	c911                	beqz	a0,2a66 <matrix_test+0x17f0>
                   crc |= 0x8000;
    2a54:	78e9                	lui	a7,0xffffa
    2a56:	00188d93          	addi	s11,a7,1 # ffffa001 <tohost+0x2fa7a001>
    2a5a:	01b847b3          	xor	a5,a6,s11
    2a5e:	01079713          	slli	a4,a5,0x10
    2a62:	01075813          	srli	a6,a4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    2a66:	0105c933          	xor	s2,a1,a6
                if (x16 == 1)
    2a6a:	00197313          	andi	t1,s2,1
                data >>= 1;
    2a6e:	004c5993          	srli	s3,s8,0x4
                if (x16 == 1)
    2a72:	00185a93          	srli	s5,a6,0x1
    2a76:	00030b63          	beqz	t1,2a8c <matrix_test+0x1816>
                   crc |= 0x8000;
    2a7a:	7f69                	lui	t5,0xffffa
    2a7c:	001f0d13          	addi	s10,t5,1 # ffffa001 <tohost+0x2fa7a001>
    2a80:	01aacbb3          	xor	s7,s5,s10
    2a84:	010b9f93          	slli	t6,s7,0x10
    2a88:	010fda93          	srli	s5,t6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    2a8c:	0159ccb3          	xor	s9,s3,s5
                if (x16 == 1)
    2a90:	001cfe93          	andi	t4,s9,1
                data >>= 1;
    2a94:	005c5a13          	srli	s4,s8,0x5
                if (x16 == 1)
    2a98:	001ad393          	srli	t2,s5,0x1
    2a9c:	000e8b63          	beqz	t4,2ab2 <matrix_test+0x183c>
                   crc |= 0x8000;
    2aa0:	7669                	lui	a2,0xffffa
    2aa2:	00160293          	addi	t0,a2,1 # ffffa001 <tohost+0x2fa7a001>
    2aa6:	0053c4b3          	xor	s1,t2,t0
    2aaa:	01049e13          	slli	t3,s1,0x10
    2aae:	010e5393          	srli	t2,t3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    2ab2:	007a4533          	xor	a0,s4,t2
                if (x16 == 1)
    2ab6:	00157593          	andi	a1,a0,1
                data >>= 1;
    2aba:	006c5893          	srli	a7,s8,0x6
                if (x16 == 1)
    2abe:	0013d913          	srli	s2,t2,0x1
    2ac2:	c991                	beqz	a1,2ad6 <matrix_test+0x1860>
                   crc |= 0x8000;
    2ac4:	7de9                	lui	s11,0xffffa
    2ac6:	001d8713          	addi	a4,s11,1 # ffffa001 <tohost+0x2fa7a001>
    2aca:	00e947b3          	xor	a5,s2,a4
    2ace:	01079813          	slli	a6,a5,0x10
    2ad2:	01085913          	srli	s2,a6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    2ad6:	0128c333          	xor	t1,a7,s2
                if (x16 == 1)
    2ada:	00137993          	andi	s3,t1,1
                data >>= 1;
    2ade:	007c5c13          	srli	s8,s8,0x7
                if (x16 == 1)
    2ae2:	00195a93          	srli	s5,s2,0x1
    2ae6:	00098b63          	beqz	s3,2afc <matrix_test+0x1886>
                   crc |= 0x8000;
    2aea:	7f69                	lui	t5,0xffffa
    2aec:	001f0d13          	addi	s10,t5,1 # ffffa001 <tohost+0x2fa7a001>
    2af0:	01aacbb3          	xor	s7,s5,s10
    2af4:	010b9f93          	slli	t6,s7,0x10
    2af8:	010fda93          	srli	s5,t6,0x10
                if (x16 == 1)
    2afc:	001afc93          	andi	s9,s5,1
    2b00:	001ad513          	srli	a0,s5,0x1
    2b04:	018c8b63          	beq	s9,s8,2b1a <matrix_test+0x18a4>
                   crc |= 0x8000;
    2b08:	7ee9                	lui	t4,0xffffa
    2b0a:	001e8a13          	addi	s4,t4,1 # ffffa001 <tohost+0x2fa7a001>
    2b0e:	01454633          	xor	a2,a0,s4
    2b12:	01061293          	slli	t0,a2,0x10
    2b16:	0102d513          	srli	a0,t0,0x10
        for (i=0; i<N; i++) {
    2b1a:	12040763          	beqz	s0,2c48 <matrix_test+0x19d2>
    2b1e:	00141293          	slli	t0,s0,0x1
    2b22:	408004b3          	neg	s1,s0
    2b26:	005b0633          	add	a2,s6,t0
    2b2a:	4f81                	li	t6,0
    2b2c:	00249393          	slli	t2,s1,0x2
                for (j=0; j<N; j++) {
    2b30:	40560b33          	sub	s6,a2,t0
    2b34:	41660e33          	sub	t3,a2,s6
    2b38:	ffee0593          	addi	a1,t3,-2
    2b3c:	0015d893          	srli	a7,a1,0x1
    2b40:	00188d93          	addi	s11,a7,1
    2b44:	007df713          	andi	a4,s11,7
        for (i=0; i<N; i++) {
    2b48:	87da                	mv	a5,s6
    2b4a:	c759                	beqz	a4,2bd8 <matrix_test+0x1962>
    2b4c:	4805                	li	a6,1
    2b4e:	07070c63          	beq	a4,a6,2bc6 <matrix_test+0x1950>
    2b52:	4909                	li	s2,2
    2b54:	07270263          	beq	a4,s2,2bb8 <matrix_test+0x1942>
    2b58:	430d                	li	t1,3
    2b5a:	04670863          	beq	a4,t1,2baa <matrix_test+0x1934>
    2b5e:	4991                	li	s3,4
    2b60:	03370e63          	beq	a4,s3,2b9c <matrix_test+0x1926>
    2b64:	4c15                	li	s8,5
    2b66:	03870463          	beq	a4,s8,2b8e <matrix_test+0x1918>
    2b6a:	4f19                	li	t5,6
    2b6c:	01e70a63          	beq	a4,t5,2b80 <matrix_test+0x190a>
                        A[i*N+j] += val;
    2b70:	000b5d03          	lhu	s10,0(s6)
                for (j=0; j<N; j++) {
    2b74:	002b0793          	addi	a5,s6,2
                        A[i*N+j] += val;
    2b78:	40dd0bb3          	sub	s7,s10,a3
    2b7c:	017b1023          	sh	s7,0(s6)
    2b80:	0007da83          	lhu	s5,0(a5)
                for (j=0; j<N; j++) {
    2b84:	0789                	addi	a5,a5,2
                        A[i*N+j] += val;
    2b86:	40da8cb3          	sub	s9,s5,a3
    2b8a:	ff979f23          	sh	s9,-2(a5)
    2b8e:	0007de83          	lhu	t4,0(a5)
                for (j=0; j<N; j++) {
    2b92:	0789                	addi	a5,a5,2
                        A[i*N+j] += val;
    2b94:	40de8a33          	sub	s4,t4,a3
    2b98:	ff479f23          	sh	s4,-2(a5)
    2b9c:	0007d483          	lhu	s1,0(a5)
                for (j=0; j<N; j++) {
    2ba0:	0789                	addi	a5,a5,2
                        A[i*N+j] += val;
    2ba2:	40d48e33          	sub	t3,s1,a3
    2ba6:	ffc79f23          	sh	t3,-2(a5)
    2baa:	0007d583          	lhu	a1,0(a5)
                for (j=0; j<N; j++) {
    2bae:	0789                	addi	a5,a5,2
                        A[i*N+j] += val;
    2bb0:	40d588b3          	sub	a7,a1,a3
    2bb4:	ff179f23          	sh	a7,-2(a5)
    2bb8:	0007dd83          	lhu	s11,0(a5)
                for (j=0; j<N; j++) {
    2bbc:	0789                	addi	a5,a5,2
                        A[i*N+j] += val;
    2bbe:	40dd8733          	sub	a4,s11,a3
    2bc2:	fee79f23          	sh	a4,-2(a5)
    2bc6:	0007d803          	lhu	a6,0(a5)
                for (j=0; j<N; j++) {
    2bca:	0789                	addi	a5,a5,2
                        A[i*N+j] += val;
    2bcc:	40d80933          	sub	s2,a6,a3
    2bd0:	ff279f23          	sh	s2,-2(a5)
                for (j=0; j<N; j++) {
    2bd4:	06c78563          	beq	a5,a2,2c3e <matrix_test+0x19c8>
                        A[i*N+j] += val;
    2bd8:	0007d983          	lhu	s3,0(a5)
    2bdc:	0027dc03          	lhu	s8,2(a5)
    2be0:	0047dd03          	lhu	s10,4(a5)
    2be4:	0067db83          	lhu	s7,6(a5)
    2be8:	0087d303          	lhu	t1,8(a5)
    2bec:	00a7da83          	lhu	s5,10(a5)
    2bf0:	00c7dc83          	lhu	s9,12(a5)
    2bf4:	00e7da03          	lhu	s4,14(a5)
    2bf8:	40d984b3          	sub	s1,s3,a3
    2bfc:	40dc0f33          	sub	t5,s8,a3
    2c00:	40dd0eb3          	sub	t4,s10,a3
    2c04:	40db8e33          	sub	t3,s7,a3
    2c08:	40d305b3          	sub	a1,t1,a3
    2c0c:	40da88b3          	sub	a7,s5,a3
    2c10:	40dc8db3          	sub	s11,s9,a3
    2c14:	40da0733          	sub	a4,s4,a3
    2c18:	00979023          	sh	s1,0(a5)
    2c1c:	01e79123          	sh	t5,2(a5)
    2c20:	01d79223          	sh	t4,4(a5)
    2c24:	01c79323          	sh	t3,6(a5)
    2c28:	00b79423          	sh	a1,8(a5)
    2c2c:	01179523          	sh	a7,10(a5)
    2c30:	01b79623          	sh	s11,12(a5)
    2c34:	00e79723          	sh	a4,14(a5)
                for (j=0; j<N; j++) {
    2c38:	07c1                	addi	a5,a5,16
    2c3a:	f8c79fe3          	bne	a5,a2,2bd8 <matrix_test+0x1962>
        for (i=0; i<N; i++) {
    2c3e:	0f85                	addi	t6,t6,1
    2c40:	407b0633          	sub	a2,s6,t2
    2c44:	eff416e3          	bne	s0,t6,2b30 <matrix_test+0x18ba>
}
    2c48:	4436                	lw	s0,76(sp)
    2c4a:	01051b13          	slli	s6,a0,0x10
    2c4e:	44a6                	lw	s1,72(sp)
    2c50:	4916                	lw	s2,68(sp)
    2c52:	4986                	lw	s3,64(sp)
    2c54:	5a72                	lw	s4,60(sp)
    2c56:	5ae2                	lw	s5,56(sp)
    2c58:	5bc2                	lw	s7,48(sp)
    2c5a:	5c32                	lw	s8,44(sp)
    2c5c:	5ca2                	lw	s9,40(sp)
    2c5e:	5d12                	lw	s10,36(sp)
    2c60:	5d82                	lw	s11,32(sp)
    2c62:	410b5513          	srai	a0,s6,0x10
    2c66:	5b52                	lw	s6,52(sp)
    2c68:	6161                	addi	sp,sp,80
    2c6a:	8082                	ret
                                ret += (cur>prev) ? 1 : 0;
    2c6c:	005ca533          	slt	a0,s9,t0
    2c70:	00ab8a33          	add	s4,s7,a0
    2c74:	010a1913          	slli	s2,s4,0x10
    2c78:	41095793          	srai	a5,s2,0x10
    2c7c:	900ff06f          	j	1d7c <matrix_test+0xb06>
    2c80:	00572ab3          	slt	s5,a4,t0
    2c84:	01538db3          	add	s11,t2,s5
    2c88:	010d9d13          	slli	s10,s11,0x10
    2c8c:	410d5793          	srai	a5,s10,0x10
    2c90:	8c6ff06f          	j	1d56 <matrix_test+0xae0>
    2c94:	00552cb3          	slt	s9,a0,t0
    2c98:	019f8c33          	add	s8,t6,s9
    2c9c:	010c1d13          	slli	s10,s8,0x10
    2ca0:	410d5793          	srai	a5,s10,0x10
    2ca4:	8f3fe06f          	j	1596 <matrix_test+0x320>
    2ca8:	4f52                	lw	t5,20(sp)
    2caa:	45e2                	lw	a1,24(sp)
    2cac:	46f2                	lw	a3,28(sp)
    2cae:	40800db3          	neg	s11,s0
    2cb2:	00241613          	slli	a2,s0,0x2
    2cb6:	8e56                	mv	t3,s5
    2cb8:	967a                	add	a2,a2,t5
    2cba:	002d9313          	slli	t1,s11,0x2
        ee_s16 ret=0;
    2cbe:	4781                	li	a5,0
        MATRES tmp=0,prev=0,cur=0;
    2cc0:	4281                	li	t0,0
    2cc2:	4e81                	li	t4,0
        for (i=0; i<N; i++) {
    2cc4:	4801                	li	a6,0
    2cc6:	003d9893          	slli	a7,s11,0x3
                for (j=0; j<N; j++) {
    2cca:	00660533          	add	a0,a2,t1
    2cce:	40a60d33          	sub	s10,a2,a0
    2cd2:	ffcd0f93          	addi	t6,s10,-4
    2cd6:	002fdc93          	srli	s9,t6,0x2
    2cda:	001c8713          	addi	a4,s9,1
    2cde:	00777b93          	andi	s7,a4,7
        for (i=0; i<N; i++) {
    2ce2:	872a                	mv	a4,a0
    2ce4:	220b8b63          	beqz	s7,2f1a <matrix_test+0x1ca4>
    2ce8:	4a05                	li	s4,1
    2cea:	0f4b8d63          	beq	s7,s4,2de4 <matrix_test+0x1b6e>
    2cee:	4a89                	li	s5,2
    2cf0:	0d5b8863          	beq	s7,s5,2dc0 <matrix_test+0x1b4a>
    2cf4:	448d                	li	s1,3
    2cf6:	0a9b8363          	beq	s7,s1,2d9c <matrix_test+0x1b26>
    2cfa:	4c11                	li	s8,4
    2cfc:	078b8e63          	beq	s7,s8,2d78 <matrix_test+0x1b02>
    2d00:	4395                	li	t2,5
    2d02:	047b8963          	beq	s7,t2,2d54 <matrix_test+0x1ade>
    2d06:	4d99                	li	s11,6
    2d08:	03bb8463          	beq	s7,s11,2d30 <matrix_test+0x1aba>
                        cur=C[i*N+j];
    2d0c:	8d16                	mv	s10,t0
    2d0e:	00052283          	lw	t0,0(a0)
                                ret+=10;
    2d12:	07c2                	slli	a5,a5,0x10
    2d14:	0107df93          	srli	t6,a5,0x10
                        tmp+=cur;
    2d18:	9e96                	add	t4,t4,t0
                        if (tmp>clipval) {
    2d1a:	39d5d263          	bge	a1,t4,309e <matrix_test+0x1e28>
                                ret+=10;
    2d1e:	00af8e93          	addi	t4,t6,10
    2d22:	010e9a13          	slli	s4,t4,0x10
    2d26:	410a5793          	srai	a5,s4,0x10
                                tmp=0;
    2d2a:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
    2d2c:	00450713          	addi	a4,a0,4
                        cur=C[i*N+j];
    2d30:	8a96                	mv	s5,t0
    2d32:	00072283          	lw	t0,0(a4)
                                ret+=10;
    2d36:	01079493          	slli	s1,a5,0x10
    2d3a:	0104dc13          	srli	s8,s1,0x10
                        tmp+=cur;
    2d3e:	9e96                	add	t4,t4,t0
                        if (tmp>clipval) {
    2d40:	35d5d663          	bge	a1,t4,308c <matrix_test+0x1e16>
                                ret+=10;
    2d44:	00ac0793          	addi	a5,s8,10
    2d48:	01079f93          	slli	t6,a5,0x10
    2d4c:	410fd793          	srai	a5,t6,0x10
                                tmp=0;
    2d50:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
    2d52:	0711                	addi	a4,a4,4
                        cur=C[i*N+j];
    2d54:	8c96                	mv	s9,t0
    2d56:	00072283          	lw	t0,0(a4)
                                ret+=10;
    2d5a:	01079b93          	slli	s7,a5,0x10
    2d5e:	010bda13          	srli	s4,s7,0x10
                        tmp+=cur;
    2d62:	9e96                	add	t4,t4,t0
                        if (tmp>clipval) {
    2d64:	31d5db63          	bge	a1,t4,307a <matrix_test+0x1e04>
                                ret+=10;
    2d68:	00aa0e93          	addi	t4,s4,10
    2d6c:	010e9393          	slli	t2,t4,0x10
    2d70:	4103d793          	srai	a5,t2,0x10
                                tmp=0;
    2d74:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
    2d76:	0711                	addi	a4,a4,4
                        cur=C[i*N+j];
    2d78:	8d96                	mv	s11,t0
    2d7a:	00072283          	lw	t0,0(a4)
                                ret+=10;
    2d7e:	01079d13          	slli	s10,a5,0x10
    2d82:	010d5793          	srli	a5,s10,0x10
                        tmp+=cur;
    2d86:	9e96                	add	t4,t4,t0
                        if (tmp>clipval) {
    2d88:	2fd5d063          	bge	a1,t4,3068 <matrix_test+0x1df2>
                                ret+=10;
    2d8c:	00a78a13          	addi	s4,a5,10
    2d90:	010a1a93          	slli	s5,s4,0x10
    2d94:	410ad793          	srai	a5,s5,0x10
                                tmp=0;
    2d98:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
    2d9a:	0711                	addi	a4,a4,4
                        cur=C[i*N+j];
    2d9c:	8496                	mv	s1,t0
    2d9e:	00072283          	lw	t0,0(a4)
                                ret+=10;
    2da2:	01079c13          	slli	s8,a5,0x10
    2da6:	010c5393          	srli	t2,s8,0x10
                        tmp+=cur;
    2daa:	9e96                	add	t4,t4,t0
                        if (tmp>clipval) {
    2dac:	2bd5d663          	bge	a1,t4,3058 <matrix_test+0x1de2>
                                ret+=10;
    2db0:	00a38e93          	addi	t4,t2,10
    2db4:	010e9f93          	slli	t6,t4,0x10
    2db8:	410fd793          	srai	a5,t6,0x10
                                tmp=0;
    2dbc:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
    2dbe:	0711                	addi	a4,a4,4
                        cur=C[i*N+j];
    2dc0:	8c96                	mv	s9,t0
    2dc2:	00072283          	lw	t0,0(a4)
                                ret+=10;
    2dc6:	01079b93          	slli	s7,a5,0x10
    2dca:	010bda13          	srli	s4,s7,0x10
                        tmp+=cur;
    2dce:	9e96                	add	t4,t4,t0
                        if (tmp>clipval) {
    2dd0:	27d5db63          	bge	a1,t4,3046 <matrix_test+0x1dd0>
                                ret+=10;
    2dd4:	00aa0393          	addi	t2,s4,10
    2dd8:	01039d93          	slli	s11,t2,0x10
    2ddc:	410dd793          	srai	a5,s11,0x10
                                tmp=0;
    2de0:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
    2de2:	0711                	addi	a4,a4,4
                        cur=C[i*N+j];
    2de4:	8d16                	mv	s10,t0
    2de6:	00072283          	lw	t0,0(a4)
                                ret+=10;
    2dea:	07c2                	slli	a5,a5,0x10
    2dec:	0107dc93          	srli	s9,a5,0x10
                        tmp+=cur;
    2df0:	9e96                	add	t4,t4,t0
                        if (tmp>clipval) {
    2df2:	25d5d163          	bge	a1,t4,3034 <matrix_test+0x1dbe>
                                ret+=10;
    2df6:	00ac8e93          	addi	t4,s9,10
    2dfa:	010e9a93          	slli	s5,t4,0x10
    2dfe:	410ad793          	srai	a5,s5,0x10
                                tmp=0;
    2e02:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
    2e04:	0711                	addi	a4,a4,4
    2e06:	10e61a63          	bne	a2,a4,2f1a <matrix_test+0x1ca4>
        for (i=0; i<N; i++) {
    2e0a:	00180393          	addi	t2,a6,1
    2e0e:	41150633          	sub	a2,a0,a7
    2e12:	ed090663          	beq	s2,a6,24de <matrix_test+0x1268>
    2e16:	881e                	mv	a6,t2
    2e18:	bd4d                	j	2cca <matrix_test+0x1a54>
                                ret += (cur>prev) ? 1 : 0;
    2e1a:	0092a2b3          	slt	t0,t0,s1
                        cur=C[i*N+j];
    2e1e:	00472a03          	lw	s4,4(a4)
                                ret += (cur>prev) ? 1 : 0;
    2e22:	00538db3          	add	s11,t2,t0
    2e26:	010d9d13          	slli	s10,s11,0x10
    2e2a:	410d5f93          	srai	t6,s10,0x10
                                ret+=10;
    2e2e:	010f9e93          	slli	t4,t6,0x10
                        tmp+=cur;
    2e32:	014b8c33          	add	s8,s7,s4
                for (j=0; j<N; j++) {
    2e36:	0711                	addi	a4,a4,4
                                ret+=10;
    2e38:	010eda93          	srli	s5,t4,0x10
                        if (tmp>clipval) {
    2e3c:	1185da63          	bge	a1,s8,2f50 <matrix_test+0x1cda>
                        cur=C[i*N+j];
    2e40:	00472c83          	lw	s9,4(a4)
                                ret+=10;
    2e44:	00aa8d13          	addi	s10,s5,10
    2e48:	010d1793          	slli	a5,s10,0x10
    2e4c:	4107dd93          	srai	s11,a5,0x10
                                tmp=0;
    2e50:	4c01                	li	s8,0
                                ret+=10;
    2e52:	010d9f93          	slli	t6,s11,0x10
                        tmp+=cur;
    2e56:	019c0eb3          	add	t4,s8,s9
                                ret+=10;
    2e5a:	010fdb93          	srli	s7,t6,0x10
                        if (tmp>clipval) {
    2e5e:	11d5db63          	bge	a1,t4,2f74 <matrix_test+0x1cfe>
                                ret+=10;
    2e62:	00ab8393          	addi	t2,s7,10
                        cur=C[i*N+j];
    2e66:	00872d83          	lw	s11,8(a4)
                                ret+=10;
    2e6a:	01039293          	slli	t0,t2,0x10
    2e6e:	4102d493          	srai	s1,t0,0x10
                                tmp=0;
    2e72:	4e81                	li	t4,0
                                ret+=10;
    2e74:	01049d13          	slli	s10,s1,0x10
                        tmp+=cur;
    2e78:	01be8bb3          	add	s7,t4,s11
                                ret+=10;
    2e7c:	010d5793          	srli	a5,s10,0x10
                        if (tmp>clipval) {
    2e80:	1175dc63          	bge	a1,s7,2f98 <matrix_test+0x1d22>
                        cur=C[i*N+j];
    2e84:	4744                	lw	s1,12(a4)
                                ret+=10;
    2e86:	00a78a93          	addi	s5,a5,10
    2e8a:	010a9c13          	slli	s8,s5,0x10
    2e8e:	410c5a13          	srai	s4,s8,0x10
                                tmp=0;
    2e92:	4b81                	li	s7,0
                                ret+=10;
    2e94:	010a1393          	slli	t2,s4,0x10
                        tmp+=cur;
    2e98:	9ba6                	add	s7,s7,s1
                                ret+=10;
    2e9a:	0103dd13          	srli	s10,t2,0x10
                        if (tmp>clipval) {
    2e9e:	1175dd63          	bge	a1,s7,2fb8 <matrix_test+0x1d42>
                        cur=C[i*N+j];
    2ea2:	01072a03          	lw	s4,16(a4)
                                ret+=10;
    2ea6:	00ad0f93          	addi	t6,s10,10
    2eaa:	010f9e93          	slli	t4,t6,0x10
    2eae:	410edc93          	srai	s9,t4,0x10
                                tmp=0;
    2eb2:	4b81                	li	s7,0
                                ret+=10;
    2eb4:	010c9a93          	slli	s5,s9,0x10
                        tmp+=cur;
    2eb8:	014b83b3          	add	t2,s7,s4
                                ret+=10;
    2ebc:	010adc13          	srli	s8,s5,0x10
                        if (tmp>clipval) {
    2ec0:	1075de63          	bge	a1,t2,2fdc <matrix_test+0x1d66>
                        cur=C[i*N+j];
    2ec4:	01472c83          	lw	s9,20(a4)
                                ret+=10;
    2ec8:	00ac0d93          	addi	s11,s8,10
    2ecc:	010d9793          	slli	a5,s11,0x10
    2ed0:	4107d293          	srai	t0,a5,0x10
                                tmp=0;
    2ed4:	4381                	li	t2,0
                                ret+=10;
    2ed6:	01029f93          	slli	t6,t0,0x10
                        tmp+=cur;
    2eda:	01938eb3          	add	t4,t2,s9
                                ret+=10;
    2ede:	010fda93          	srli	s5,t6,0x10
                        if (tmp>clipval) {
    2ee2:	11d5df63          	bge	a1,t4,3000 <matrix_test+0x1d8a>
                        cur=C[i*N+j];
    2ee6:	01872283          	lw	t0,24(a4)
                                ret+=10;
    2eea:	00aa8d13          	addi	s10,s5,10
    2eee:	010d1b93          	slli	s7,s10,0x10
    2ef2:	410bd493          	srai	s1,s7,0x10
                                tmp=0;
    2ef6:	4e81                	li	t4,0
                                ret+=10;
    2ef8:	01049d93          	slli	s11,s1,0x10
                        tmp+=cur;
    2efc:	9e96                	add	t4,t4,t0
                                ret+=10;
    2efe:	010dd793          	srli	a5,s11,0x10
                        if (tmp>clipval) {
    2f02:	13d5d063          	bge	a1,t4,3022 <matrix_test+0x1dac>
                                ret+=10;
    2f06:	00a78a13          	addi	s4,a5,10
    2f0a:	010a1c13          	slli	s8,s4,0x10
    2f0e:	410c5793          	srai	a5,s8,0x10
                                tmp=0;
    2f12:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
    2f14:	0771                	addi	a4,a4,28
    2f16:	eee60ae3          	beq	a2,a4,2e0a <matrix_test+0x1b94>
                        cur=C[i*N+j];
    2f1a:	4304                	lw	s1,0(a4)
                                ret+=10;
    2f1c:	01079c13          	slli	s8,a5,0x10
    2f20:	010c5393          	srli	t2,s8,0x10
                        tmp+=cur;
    2f24:	009e8bb3          	add	s7,t4,s1
                        if (tmp>clipval) {
    2f28:	ef75d9e3          	bge	a1,s7,2e1a <matrix_test+0x1ba4>
                        cur=C[i*N+j];
    2f2c:	00472a03          	lw	s4,4(a4)
                                ret+=10;
    2f30:	00a38793          	addi	a5,t2,10
    2f34:	01079c93          	slli	s9,a5,0x10
    2f38:	410cdf93          	srai	t6,s9,0x10
                                tmp=0;
    2f3c:	4b81                	li	s7,0
                                ret+=10;
    2f3e:	010f9e93          	slli	t4,t6,0x10
                        tmp+=cur;
    2f42:	014b8c33          	add	s8,s7,s4
                for (j=0; j<N; j++) {
    2f46:	0711                	addi	a4,a4,4
                                ret+=10;
    2f48:	010eda93          	srli	s5,t4,0x10
                        if (tmp>clipval) {
    2f4c:	ef85cae3          	blt	a1,s8,2e40 <matrix_test+0x1bca>
                                ret += (cur>prev) ? 1 : 0;
    2f50:	0144a4b3          	slt	s1,s1,s4
                        cur=C[i*N+j];
    2f54:	00472c83          	lw	s9,4(a4)
                                ret += (cur>prev) ? 1 : 0;
    2f58:	009a83b3          	add	t2,s5,s1
    2f5c:	01039293          	slli	t0,t2,0x10
    2f60:	4102dd93          	srai	s11,t0,0x10
                                ret+=10;
    2f64:	010d9f93          	slli	t6,s11,0x10
                        tmp+=cur;
    2f68:	019c0eb3          	add	t4,s8,s9
                                ret+=10;
    2f6c:	010fdb93          	srli	s7,t6,0x10
                        if (tmp>clipval) {
    2f70:	efd5c9e3          	blt	a1,t4,2e62 <matrix_test+0x1bec>
                                ret += (cur>prev) ? 1 : 0;
    2f74:	019a2a33          	slt	s4,s4,s9
    2f78:	014b8ab3          	add	s5,s7,s4
                        cur=C[i*N+j];
    2f7c:	00872d83          	lw	s11,8(a4)
                                ret += (cur>prev) ? 1 : 0;
    2f80:	010a9c13          	slli	s8,s5,0x10
    2f84:	410c5493          	srai	s1,s8,0x10
                                ret+=10;
    2f88:	01049d13          	slli	s10,s1,0x10
                        tmp+=cur;
    2f8c:	01be8bb3          	add	s7,t4,s11
                                ret+=10;
    2f90:	010d5793          	srli	a5,s10,0x10
                        if (tmp>clipval) {
    2f94:	ef75c8e3          	blt	a1,s7,2e84 <matrix_test+0x1c0e>
                                ret += (cur>prev) ? 1 : 0;
    2f98:	01bcacb3          	slt	s9,s9,s11
                        cur=C[i*N+j];
    2f9c:	4744                	lw	s1,12(a4)
                                ret += (cur>prev) ? 1 : 0;
    2f9e:	01978fb3          	add	t6,a5,s9
    2fa2:	010f9e93          	slli	t4,t6,0x10
    2fa6:	410eda13          	srai	s4,t4,0x10
                                ret+=10;
    2faa:	010a1393          	slli	t2,s4,0x10
                        tmp+=cur;
    2fae:	9ba6                	add	s7,s7,s1
                                ret+=10;
    2fb0:	0103dd13          	srli	s10,t2,0x10
                        if (tmp>clipval) {
    2fb4:	ef75c7e3          	blt	a1,s7,2ea2 <matrix_test+0x1c2c>
                                ret += (cur>prev) ? 1 : 0;
    2fb8:	009da2b3          	slt	t0,s11,s1
                        cur=C[i*N+j];
    2fbc:	01072a03          	lw	s4,16(a4)
                                ret += (cur>prev) ? 1 : 0;
    2fc0:	005d0db3          	add	s11,s10,t0
    2fc4:	010d9793          	slli	a5,s11,0x10
    2fc8:	4107dc93          	srai	s9,a5,0x10
                                ret+=10;
    2fcc:	010c9a93          	slli	s5,s9,0x10
                        tmp+=cur;
    2fd0:	014b83b3          	add	t2,s7,s4
                                ret+=10;
    2fd4:	010adc13          	srli	s8,s5,0x10
                        if (tmp>clipval) {
    2fd8:	ee75c6e3          	blt	a1,t2,2ec4 <matrix_test+0x1c4e>
                                ret += (cur>prev) ? 1 : 0;
    2fdc:	0144a4b3          	slt	s1,s1,s4
                        cur=C[i*N+j];
    2fe0:	01472c83          	lw	s9,20(a4)
                                ret += (cur>prev) ? 1 : 0;
    2fe4:	009c0d33          	add	s10,s8,s1
    2fe8:	010d1b93          	slli	s7,s10,0x10
    2fec:	410bd293          	srai	t0,s7,0x10
                                ret+=10;
    2ff0:	01029f93          	slli	t6,t0,0x10
                        tmp+=cur;
    2ff4:	01938eb3          	add	t4,t2,s9
                                ret+=10;
    2ff8:	010fda93          	srli	s5,t6,0x10
                        if (tmp>clipval) {
    2ffc:	efd5c5e3          	blt	a1,t4,2ee6 <matrix_test+0x1c70>
                                ret += (cur>prev) ? 1 : 0;
    3000:	019a2a33          	slt	s4,s4,s9
                        cur=C[i*N+j];
    3004:	01872283          	lw	t0,24(a4)
                                ret += (cur>prev) ? 1 : 0;
    3008:	014a8c33          	add	s8,s5,s4
    300c:	010c1393          	slli	t2,s8,0x10
    3010:	4103d493          	srai	s1,t2,0x10
                                ret+=10;
    3014:	01049d93          	slli	s11,s1,0x10
                        tmp+=cur;
    3018:	9e96                	add	t4,t4,t0
                                ret+=10;
    301a:	010dd793          	srli	a5,s11,0x10
                        if (tmp>clipval) {
    301e:	efd5c4e3          	blt	a1,t4,2f06 <matrix_test+0x1c90>
                                ret += (cur>prev) ? 1 : 0;
    3022:	005cacb3          	slt	s9,s9,t0
    3026:	01978fb3          	add	t6,a5,s9
    302a:	010f9a93          	slli	s5,t6,0x10
    302e:	410ad793          	srai	a5,s5,0x10
    3032:	b5cd                	j	2f14 <matrix_test+0x1c9e>
    3034:	005d2fb3          	slt	t6,s10,t0
    3038:	01fc8bb3          	add	s7,s9,t6
    303c:	010b9a13          	slli	s4,s7,0x10
    3040:	410a5793          	srai	a5,s4,0x10
    3044:	b3c1                	j	2e04 <matrix_test+0x1b8e>
    3046:	005caab3          	slt	s5,s9,t0
    304a:	015a04b3          	add	s1,s4,s5
    304e:	01049c13          	slli	s8,s1,0x10
    3052:	410c5793          	srai	a5,s8,0x10
    3056:	b371                	j	2de2 <matrix_test+0x1b6c>
    3058:	0054adb3          	slt	s11,s1,t0
    305c:	01b38d33          	add	s10,t2,s11
    3060:	010d1793          	slli	a5,s10,0x10
    3064:	87c1                	srai	a5,a5,0x10
    3066:	bba1                	j	2dbe <matrix_test+0x1b48>
    3068:	005dafb3          	slt	t6,s11,t0
    306c:	01f78cb3          	add	s9,a5,t6
    3070:	010c9b93          	slli	s7,s9,0x10
    3074:	410bd793          	srai	a5,s7,0x10
    3078:	b30d                	j	2d9a <matrix_test+0x1b24>
    307a:	005caab3          	slt	s5,s9,t0
    307e:	015a04b3          	add	s1,s4,s5
    3082:	01049c13          	slli	s8,s1,0x10
    3086:	410c5793          	srai	a5,s8,0x10
    308a:	b1f5                	j	2d76 <matrix_test+0x1b00>
    308c:	005aa3b3          	slt	t2,s5,t0
    3090:	007c0db3          	add	s11,s8,t2
    3094:	010d9d13          	slli	s10,s11,0x10
    3098:	410d5793          	srai	a5,s10,0x10
    309c:	b95d                	j	2d52 <matrix_test+0x1adc>
    309e:	005d2cb3          	slt	s9,s10,t0
    30a2:	019f8733          	add	a4,t6,s9
    30a6:	01071b93          	slli	s7,a4,0x10
    30aa:	410bd793          	srai	a5,s7,0x10
    30ae:	b9bd                	j	2d2c <matrix_test+0x1ab6>
    30b0:	408009b3          	neg	s3,s0
    30b4:	00241313          	slli	t1,s0,0x2
    30b8:	006f0733          	add	a4,t5,t1
        ee_s16 ret=0;
    30bc:	4781                	li	a5,0
    30be:	00299313          	slli	t1,s3,0x2
        MATRES tmp=0,prev=0,cur=0;
    30c2:	4f81                	li	t6,0
    30c4:	4e81                	li	t4,0
        for (i=0; i<N; i++) {
    30c6:	4801                	li	a6,0
    30c8:	00399893          	slli	a7,s3,0x3
                for (j=0; j<N; j++) {
    30cc:	00670933          	add	s2,a4,t1
    30d0:	41270f33          	sub	t5,a4,s2
    30d4:	ffcf0d93          	addi	s11,t5,-4
    30d8:	002dd613          	srli	a2,s11,0x2
    30dc:	00160c13          	addi	s8,a2,1
    30e0:	007c7d13          	andi	s10,s8,7
        for (i=0; i<N; i++) {
    30e4:	8e4a                	mv	t3,s2
    30e6:	220d0e63          	beqz	s10,3322 <matrix_test+0x20ac>
    30ea:	4b85                	li	s7,1
    30ec:	0f7d0c63          	beq	s10,s7,31e4 <matrix_test+0x1f6e>
    30f0:	4a89                	li	s5,2
    30f2:	0d5d0763          	beq	s10,s5,31c0 <matrix_test+0x1f4a>
    30f6:	4c8d                	li	s9,3
    30f8:	0b9d0263          	beq	s10,s9,319c <matrix_test+0x1f26>
    30fc:	4a11                	li	s4,4
    30fe:	074d0d63          	beq	s10,s4,3178 <matrix_test+0x1f02>
    3102:	4295                	li	t0,5
    3104:	045d0863          	beq	s10,t0,3154 <matrix_test+0x1ede>
    3108:	4499                	li	s1,6
    310a:	029d0463          	beq	s10,s1,3132 <matrix_test+0x1ebc>
                        cur=C[i*N+j];
    310e:	8e7e                	mv	t3,t6
    3110:	00092f83          	lw	t6,0(s2)
                                ret+=10;
    3114:	07c2                	slli	a5,a5,0x10
    3116:	0107d993          	srli	s3,a5,0x10
                        tmp+=cur;
    311a:	9efe                	add	t4,t4,t6
                        if (tmp>clipval) {
    311c:	39d5d863          	bge	a1,t4,34ac <matrix_test+0x2236>
                                ret+=10;
    3120:	00a98e93          	addi	t4,s3,10
    3124:	010e9c13          	slli	s8,t4,0x10
    3128:	410c5793          	srai	a5,s8,0x10
                                tmp=0;
    312c:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
    312e:	00490e13          	addi	t3,s2,4
                        cur=C[i*N+j];
    3132:	8d7e                	mv	s10,t6
    3134:	000e2f83          	lw	t6,0(t3)
                                ret+=10;
    3138:	01079b93          	slli	s7,a5,0x10
    313c:	010bda93          	srli	s5,s7,0x10
                        tmp+=cur;
    3140:	9efe                	add	t4,t4,t6
                        if (tmp>clipval) {
    3142:	35d5dc63          	bge	a1,t4,349a <matrix_test+0x2224>
                                ret+=10;
    3146:	00aa8493          	addi	s1,s5,10
    314a:	01049793          	slli	a5,s1,0x10
    314e:	87c1                	srai	a5,a5,0x10
                                tmp=0;
    3150:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
    3152:	0e11                	addi	t3,t3,4
                        cur=C[i*N+j];
    3154:	89fe                	mv	s3,t6
    3156:	000e2f83          	lw	t6,0(t3)
                                ret+=10;
    315a:	01079f13          	slli	t5,a5,0x10
    315e:	010f5d93          	srli	s11,t5,0x10
                        tmp+=cur;
    3162:	9efe                	add	t4,t4,t6
                        if (tmp>clipval) {
    3164:	33d5d263          	bge	a1,t4,3488 <matrix_test+0x2212>
                                ret+=10;
    3168:	00ad8e93          	addi	t4,s11,10
    316c:	010e9b93          	slli	s7,t4,0x10
    3170:	410bd793          	srai	a5,s7,0x10
                                tmp=0;
    3174:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
    3176:	0e11                	addi	t3,t3,4
                        cur=C[i*N+j];
    3178:	8afe                	mv	s5,t6
    317a:	000e2f83          	lw	t6,0(t3)
                                ret+=10;
    317e:	01079c93          	slli	s9,a5,0x10
    3182:	010cda13          	srli	s4,s9,0x10
                        tmp+=cur;
    3186:	9efe                	add	t4,t4,t6
                        if (tmp>clipval) {
    3188:	2fd5d863          	bge	a1,t4,3478 <matrix_test+0x2202>
                                ret+=10;
    318c:	00aa0993          	addi	s3,s4,10
    3190:	01099f13          	slli	t5,s3,0x10
    3194:	410f5793          	srai	a5,t5,0x10
                                tmp=0;
    3198:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
    319a:	0e11                	addi	t3,t3,4
                        cur=C[i*N+j];
    319c:	8dfe                	mv	s11,t6
    319e:	000e2f83          	lw	t6,0(t3)
                                ret+=10;
    31a2:	01079613          	slli	a2,a5,0x10
    31a6:	01065c13          	srli	s8,a2,0x10
                        tmp+=cur;
    31aa:	9efe                	add	t4,t4,t6
                        if (tmp>clipval) {
    31ac:	2bd5dd63          	bge	a1,t4,3466 <matrix_test+0x21f0>
                                ret+=10;
    31b0:	00ac0e93          	addi	t4,s8,10
    31b4:	010e9c93          	slli	s9,t4,0x10
    31b8:	410cd793          	srai	a5,s9,0x10
                                tmp=0;
    31bc:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
    31be:	0e11                	addi	t3,t3,4
                        cur=C[i*N+j];
    31c0:	8a7e                	mv	s4,t6
    31c2:	000e2f83          	lw	t6,0(t3)
                                ret+=10;
    31c6:	01079293          	slli	t0,a5,0x10
    31ca:	0102d493          	srli	s1,t0,0x10
                        tmp+=cur;
    31ce:	9efe                	add	t4,t4,t6
                        if (tmp>clipval) {
    31d0:	29d5d263          	bge	a1,t4,3454 <matrix_test+0x21de>
                                ret+=10;
    31d4:	00a48d93          	addi	s11,s1,10
    31d8:	010d9613          	slli	a2,s11,0x10
    31dc:	41065793          	srai	a5,a2,0x10
                                tmp=0;
    31e0:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
    31e2:	0e11                	addi	t3,t3,4
                        cur=C[i*N+j];
    31e4:	8c7e                	mv	s8,t6
    31e6:	000e2f83          	lw	t6,0(t3)
                                ret+=10;
    31ea:	01079d13          	slli	s10,a5,0x10
    31ee:	010d5b93          	srli	s7,s10,0x10
                        tmp+=cur;
    31f2:	9efe                	add	t4,t4,t6
                        if (tmp>clipval) {
    31f4:	25d5d763          	bge	a1,t4,3442 <matrix_test+0x21cc>
                                ret+=10;
    31f8:	00ab8e93          	addi	t4,s7,10
    31fc:	010e9293          	slli	t0,t4,0x10
    3200:	4102d793          	srai	a5,t0,0x10
                                tmp=0;
    3204:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
    3206:	0e11                	addi	t3,t3,4
    3208:	11c71d63          	bne	a4,t3,3322 <matrix_test+0x20ac>
        for (i=0; i<N; i++) {
    320c:	00180d93          	addi	s11,a6,1
    3210:	41190733          	sub	a4,s2,a7
    3214:	eb038763          	beq	t2,a6,28c2 <matrix_test+0x164c>
    3218:	886e                	mv	a6,s11
    321a:	bd4d                	j	30cc <matrix_test+0x1e56>
                                ret += (cur>prev) ? 1 : 0;
    321c:	009fafb3          	slt	t6,t6,s1
                        cur=C[i*N+j];
    3220:	004e2a83          	lw	s5,4(t3)
                                ret += (cur>prev) ? 1 : 0;
    3224:	01f98f33          	add	t5,s3,t6
    3228:	010f1d93          	slli	s11,t5,0x10
    322c:	410ddd13          	srai	s10,s11,0x10
                                ret+=10;
    3230:	010d1c93          	slli	s9,s10,0x10
                        tmp+=cur;
    3234:	015b8eb3          	add	t4,s7,s5
                for (j=0; j<N; j++) {
    3238:	0e11                	addi	t3,t3,4
                                ret+=10;
    323a:	010cda13          	srli	s4,s9,0x10
                        if (tmp>clipval) {
    323e:	11d5dd63          	bge	a1,t4,3358 <matrix_test+0x20e2>
                        cur=C[i*N+j];
    3242:	004e2d83          	lw	s11,4(t3)
                                ret+=10;
    3246:	00aa0f93          	addi	t6,s4,10
    324a:	010f9f13          	slli	t5,t6,0x10
    324e:	410f5993          	srai	s3,t5,0x10
                                tmp=0;
    3252:	4e81                	li	t4,0
                                ret+=10;
    3254:	01099613          	slli	a2,s3,0x10
                        tmp+=cur;
    3258:	01be8d33          	add	s10,t4,s11
                                ret+=10;
    325c:	01065c13          	srli	s8,a2,0x10
                        if (tmp>clipval) {
    3260:	11a5de63          	bge	a1,s10,337c <matrix_test+0x2106>
                        cur=C[i*N+j];
    3264:	008e2483          	lw	s1,8(t3)
                                ret+=10;
    3268:	00ac0e93          	addi	t4,s8,10
    326c:	010e9293          	slli	t0,t4,0x10
    3270:	4102da13          	srai	s4,t0,0x10
                                tmp=0;
    3274:	4d01                	li	s10,0
                                ret+=10;
    3276:	010a1793          	slli	a5,s4,0x10
                        tmp+=cur;
    327a:	009d0fb3          	add	t6,s10,s1
                                ret+=10;
    327e:	0107d993          	srli	s3,a5,0x10
                        if (tmp>clipval) {
    3282:	11f5df63          	bge	a1,t6,33a0 <matrix_test+0x212a>
                        cur=C[i*N+j];
    3286:	00ce2a83          	lw	s5,12(t3)
                                ret+=10;
    328a:	00a98d13          	addi	s10,s3,10
    328e:	010d1b93          	slli	s7,s10,0x10
    3292:	410bdc13          	srai	s8,s7,0x10
                                tmp=0;
    3296:	4f81                	li	t6,0
                                ret+=10;
    3298:	010c1c93          	slli	s9,s8,0x10
                        tmp+=cur;
    329c:	015f8eb3          	add	t4,t6,s5
                                ret+=10;
    32a0:	010cda13          	srli	s4,s9,0x10
                        if (tmp>clipval) {
    32a4:	13d5d063          	bge	a1,t4,33c4 <matrix_test+0x214e>
                        cur=C[i*N+j];
    32a8:	010e2d83          	lw	s11,16(t3)
                                ret+=10;
    32ac:	00aa0f93          	addi	t6,s4,10
    32b0:	010f9f13          	slli	t5,t6,0x10
    32b4:	410f5993          	srai	s3,t5,0x10
                                tmp=0;
    32b8:	4e81                	li	t4,0
                                ret+=10;
    32ba:	01099613          	slli	a2,s3,0x10
                        tmp+=cur;
    32be:	01be8d33          	add	s10,t4,s11
                                ret+=10;
    32c2:	01065c13          	srli	s8,a2,0x10
                        if (tmp>clipval) {
    32c6:	13a5d163          	bge	a1,s10,33e8 <matrix_test+0x2172>
                        cur=C[i*N+j];
    32ca:	014e2483          	lw	s1,20(t3)
                                ret+=10;
    32ce:	00ac0e93          	addi	t4,s8,10
    32d2:	010e9293          	slli	t0,t4,0x10
    32d6:	4102da13          	srai	s4,t0,0x10
                                tmp=0;
    32da:	4d01                	li	s10,0
                                ret+=10;
    32dc:	010a1793          	slli	a5,s4,0x10
                        tmp+=cur;
    32e0:	009d0f33          	add	t5,s10,s1
                                ret+=10;
    32e4:	0107d993          	srli	s3,a5,0x10
                        if (tmp>clipval) {
    32e8:	13e5d263          	bge	a1,t5,340c <matrix_test+0x2196>
                        cur=C[i*N+j];
    32ec:	018e2f83          	lw	t6,24(t3)
                                ret+=10;
    32f0:	00a98d13          	addi	s10,s3,10
    32f4:	010d1b93          	slli	s7,s10,0x10
    32f8:	410bdc13          	srai	s8,s7,0x10
                                tmp=0;
    32fc:	4f01                	li	t5,0
                                ret+=10;
    32fe:	010c1a93          	slli	s5,s8,0x10
                        tmp+=cur;
    3302:	01ff0eb3          	add	t4,t5,t6
                                ret+=10;
    3306:	010adc93          	srli	s9,s5,0x10
                        if (tmp>clipval) {
    330a:	13d5d363          	bge	a1,t4,3430 <matrix_test+0x21ba>
                                ret+=10;
    330e:	00ac8993          	addi	s3,s9,10
    3312:	01099f13          	slli	t5,s3,0x10
    3316:	410f5793          	srai	a5,t5,0x10
                                tmp=0;
    331a:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
    331c:	0e71                	addi	t3,t3,28
    331e:	efc707e3          	beq	a4,t3,320c <matrix_test+0x1f96>
                        cur=C[i*N+j];
    3322:	000e2483          	lw	s1,0(t3)
                                ret+=10;
    3326:	07c2                	slli	a5,a5,0x10
    3328:	0107d993          	srli	s3,a5,0x10
                        tmp+=cur;
    332c:	009e8bb3          	add	s7,t4,s1
                        if (tmp>clipval) {
    3330:	ef75d6e3          	bge	a1,s7,321c <matrix_test+0x1fa6>
                        cur=C[i*N+j];
    3334:	004e2a83          	lw	s5,4(t3)
                                ret+=10;
    3338:	00a98613          	addi	a2,s3,10
    333c:	01061c13          	slli	s8,a2,0x10
    3340:	410c5d13          	srai	s10,s8,0x10
                                tmp=0;
    3344:	4b81                	li	s7,0
                                ret+=10;
    3346:	010d1c93          	slli	s9,s10,0x10
                        tmp+=cur;
    334a:	015b8eb3          	add	t4,s7,s5
                for (j=0; j<N; j++) {
    334e:	0e11                	addi	t3,t3,4
                                ret+=10;
    3350:	010cda13          	srli	s4,s9,0x10
                        if (tmp>clipval) {
    3354:	efd5c7e3          	blt	a1,t4,3242 <matrix_test+0x1fcc>
                                ret += (cur>prev) ? 1 : 0;
    3358:	0154a2b3          	slt	t0,s1,s5
                        cur=C[i*N+j];
    335c:	004e2d83          	lw	s11,4(t3)
                                ret += (cur>prev) ? 1 : 0;
    3360:	005a04b3          	add	s1,s4,t0
    3364:	01049793          	slli	a5,s1,0x10
    3368:	4107d993          	srai	s3,a5,0x10
                                ret+=10;
    336c:	01099613          	slli	a2,s3,0x10
                        tmp+=cur;
    3370:	01be8d33          	add	s10,t4,s11
                                ret+=10;
    3374:	01065c13          	srli	s8,a2,0x10
                        if (tmp>clipval) {
    3378:	efa5c6e3          	blt	a1,s10,3264 <matrix_test+0x1fee>
                                ret += (cur>prev) ? 1 : 0;
    337c:	01baabb3          	slt	s7,s5,s11
                        cur=C[i*N+j];
    3380:	008e2483          	lw	s1,8(t3)
                                ret += (cur>prev) ? 1 : 0;
    3384:	017c0ab3          	add	s5,s8,s7
    3388:	010a9c93          	slli	s9,s5,0x10
    338c:	410cda13          	srai	s4,s9,0x10
                                ret+=10;
    3390:	010a1793          	slli	a5,s4,0x10
                        tmp+=cur;
    3394:	009d0fb3          	add	t6,s10,s1
                                ret+=10;
    3398:	0107d993          	srli	s3,a5,0x10
                        if (tmp>clipval) {
    339c:	eff5c5e3          	blt	a1,t6,3286 <matrix_test+0x2010>
                                ret += (cur>prev) ? 1 : 0;
    33a0:	009daf33          	slt	t5,s11,s1
                        cur=C[i*N+j];
    33a4:	00ce2a83          	lw	s5,12(t3)
                                ret += (cur>prev) ? 1 : 0;
    33a8:	01e98db3          	add	s11,s3,t5
    33ac:	010d9613          	slli	a2,s11,0x10
    33b0:	41065c13          	srai	s8,a2,0x10
                                ret+=10;
    33b4:	010c1c93          	slli	s9,s8,0x10
                        tmp+=cur;
    33b8:	015f8eb3          	add	t4,t6,s5
                                ret+=10;
    33bc:	010cda13          	srli	s4,s9,0x10
                        if (tmp>clipval) {
    33c0:	efd5c4e3          	blt	a1,t4,32a8 <matrix_test+0x2032>
                                ret += (cur>prev) ? 1 : 0;
    33c4:	0154a2b3          	slt	t0,s1,s5
                        cur=C[i*N+j];
    33c8:	010e2d83          	lw	s11,16(t3)
                                ret += (cur>prev) ? 1 : 0;
    33cc:	005a04b3          	add	s1,s4,t0
    33d0:	01049793          	slli	a5,s1,0x10
    33d4:	4107d993          	srai	s3,a5,0x10
                                ret+=10;
    33d8:	01099613          	slli	a2,s3,0x10
                        tmp+=cur;
    33dc:	01be8d33          	add	s10,t4,s11
                                ret+=10;
    33e0:	01065c13          	srli	s8,a2,0x10
                        if (tmp>clipval) {
    33e4:	efa5c3e3          	blt	a1,s10,32ca <matrix_test+0x2054>
                                ret += (cur>prev) ? 1 : 0;
    33e8:	01baabb3          	slt	s7,s5,s11
                        cur=C[i*N+j];
    33ec:	014e2483          	lw	s1,20(t3)
                                ret += (cur>prev) ? 1 : 0;
    33f0:	017c0ab3          	add	s5,s8,s7
    33f4:	010a9c93          	slli	s9,s5,0x10
    33f8:	410cda13          	srai	s4,s9,0x10
                                ret+=10;
    33fc:	010a1793          	slli	a5,s4,0x10
                        tmp+=cur;
    3400:	009d0f33          	add	t5,s10,s1
                                ret+=10;
    3404:	0107d993          	srli	s3,a5,0x10
                        if (tmp>clipval) {
    3408:	efe5c2e3          	blt	a1,t5,32ec <matrix_test+0x2076>
                                ret += (cur>prev) ? 1 : 0;
    340c:	009dafb3          	slt	t6,s11,s1
    3410:	01f98db3          	add	s11,s3,t6
                        cur=C[i*N+j];
    3414:	018e2f83          	lw	t6,24(t3)
                                ret += (cur>prev) ? 1 : 0;
    3418:	010d9613          	slli	a2,s11,0x10
    341c:	41065c13          	srai	s8,a2,0x10
                                ret+=10;
    3420:	010c1a93          	slli	s5,s8,0x10
                        tmp+=cur;
    3424:	01ff0eb3          	add	t4,t5,t6
                                ret+=10;
    3428:	010adc93          	srli	s9,s5,0x10
                        if (tmp>clipval) {
    342c:	efd5c1e3          	blt	a1,t4,330e <matrix_test+0x2098>
                                ret += (cur>prev) ? 1 : 0;
    3430:	01f4aa33          	slt	s4,s1,t6
    3434:	014c82b3          	add	t0,s9,s4
    3438:	01029493          	slli	s1,t0,0x10
    343c:	4104d793          	srai	a5,s1,0x10
    3440:	bdf1                	j	331c <matrix_test+0x20a6>
    3442:	01fc2ab3          	slt	s5,s8,t6
    3446:	015b8cb3          	add	s9,s7,s5
    344a:	010c9a13          	slli	s4,s9,0x10
    344e:	410a5793          	srai	a5,s4,0x10
    3452:	bb55                	j	3206 <matrix_test+0x1f90>
    3454:	01fa27b3          	slt	a5,s4,t6
    3458:	00f489b3          	add	s3,s1,a5
    345c:	01099f13          	slli	t5,s3,0x10
    3460:	410f5793          	srai	a5,t5,0x10
    3464:	bbbd                	j	31e2 <matrix_test+0x1f6c>
    3466:	01fdad33          	slt	s10,s11,t6
    346a:	01ac0bb3          	add	s7,s8,s10
    346e:	010b9a93          	slli	s5,s7,0x10
    3472:	410ad793          	srai	a5,s5,0x10
    3476:	b3a1                	j	31be <matrix_test+0x1f48>
    3478:	01faa2b3          	slt	t0,s5,t6
    347c:	005a04b3          	add	s1,s4,t0
    3480:	01049793          	slli	a5,s1,0x10
    3484:	87c1                	srai	a5,a5,0x10
    3486:	bb11                	j	319a <matrix_test+0x1f24>
    3488:	01f9a633          	slt	a2,s3,t6
    348c:	00cd8c33          	add	s8,s11,a2
    3490:	010c1d13          	slli	s10,s8,0x10
    3494:	410d5793          	srai	a5,s10,0x10
    3498:	b9f9                	j	3176 <matrix_test+0x1f00>
    349a:	01fd2cb3          	slt	s9,s10,t6
    349e:	019a8a33          	add	s4,s5,s9
    34a2:	010a1293          	slli	t0,s4,0x10
    34a6:	4102d793          	srai	a5,t0,0x10
    34aa:	b165                	j	3152 <matrix_test+0x1edc>
    34ac:	01fe2f33          	slt	t5,t3,t6
    34b0:	01e98db3          	add	s11,s3,t5
    34b4:	010d9613          	slli	a2,s11,0x10
    34b8:	41065793          	srai	a5,a2,0x10
    34bc:	b98d                	j	312e <matrix_test+0x1eb8>
        for (i=0; i<N; i++) {
    34be:	4f81                	li	t6,0
    34c0:	4281                	li	t0,0
    34c2:	98dfe06f          	j	1e4e <matrix_test+0xbd8>
        for (i=0; i<N; i++) {
    34c6:	4781                	li	a5,0
                data >>= 1;
    34c8:	4601                	li	a2,0
                crc >>= 1;
    34ca:	4701                	li	a4,0
    34cc:	cbafe06f          	j	1986 <matrix_test+0x710>

000034d0 <core_bench_matrix>:
ee_u16 core_bench_matrix(mat_params *p, ee_s16 seed, ee_u16 crc) {
    34d0:	1141                	addi	sp,sp,-16
        crc=crc16(matrix_test(N,C,A,B,val),crc);
    34d2:	4514                	lw	a3,8(a0)
ee_u16 core_bench_matrix(mat_params *p, ee_s16 seed, ee_u16 crc) {
    34d4:	872e                	mv	a4,a1
    34d6:	c422                	sw	s0,8(sp)
        crc=crc16(matrix_test(N,C,A,B,val),crc);
    34d8:	454c                	lw	a1,12(a0)
ee_u16 core_bench_matrix(mat_params *p, ee_s16 seed, ee_u16 crc) {
    34da:	8432                	mv	s0,a2
        crc=crc16(matrix_test(N,C,A,B,val),crc);
    34dc:	4150                	lw	a2,4(a0)
    34de:	4108                	lw	a0,0(a0)
ee_u16 core_bench_matrix(mat_params *p, ee_s16 seed, ee_u16 crc) {
    34e0:	c606                	sw	ra,12(sp)
        crc=crc16(matrix_test(N,C,A,B,val),crc);
    34e2:	d95fd0ef          	jal	ra,1276 <matrix_test>
        crc=crcu8( (ee_u8) (newval)                             ,crc);
    34e6:	0ff57713          	zext.b	a4,a0
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    34ea:	008746b3          	xor	a3,a4,s0
        crc=crc16((ee_s16) newval               ,crc);
        crc=crc16((ee_s16) (newval>>16) ,crc);
        return crc;
}
ee_u16 crc16(ee_s16 newval, ee_u16 crc) {
        return crcu16((ee_u16)newval, crc);
    34ee:	01051793          	slli	a5,a0,0x10
                if (x16 == 1)
    34f2:	0016f293          	andi	t0,a3,1
        return crcu16((ee_u16)newval, crc);
    34f6:	0107d313          	srli	t1,a5,0x10
                data >>= 1;
    34fa:	00175613          	srli	a2,a4,0x1
                crc >>= 1;
    34fe:	00145813          	srli	a6,s0,0x1
                if (x16 == 1)
    3502:	00028b63          	beqz	t0,3518 <core_bench_matrix+0x48>
                   crc |= 0x8000;
    3506:	70e9                	lui	ra,0xffffa
    3508:	00108393          	addi	t2,ra,1 # ffffa001 <tohost+0x2fa7a001>
    350c:	00784533          	xor	a0,a6,t2
    3510:	01051593          	slli	a1,a0,0x10
    3514:	0105d813          	srli	a6,a1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3518:	010648b3          	xor	a7,a2,a6
                if (x16 == 1)
    351c:	0018fe13          	andi	t3,a7,1
                data >>= 1;
    3520:	00275e93          	srli	t4,a4,0x2
                crc >>= 1;
    3524:	00185293          	srli	t0,a6,0x1
                if (x16 == 1)
    3528:	000e0b63          	beqz	t3,353e <core_bench_matrix+0x6e>
                   crc |= 0x8000;
    352c:	7f69                	lui	t5,0xffffa
    352e:	001f0f93          	addi	t6,t5,1 # ffffa001 <tohost+0x2fa7a001>
    3532:	01f2c433          	xor	s0,t0,t6
    3536:	01041693          	slli	a3,s0,0x10
    353a:	0106d293          	srli	t0,a3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    353e:	005ec7b3          	xor	a5,t4,t0
                if (x16 == 1)
    3542:	0017f093          	andi	ra,a5,1
                data >>= 1;
    3546:	00375613          	srli	a2,a4,0x3
                crc >>= 1;
    354a:	0012d893          	srli	a7,t0,0x1
                if (x16 == 1)
    354e:	00008b63          	beqz	ra,3564 <core_bench_matrix+0x94>
                   crc |= 0x8000;
    3552:	73e9                	lui	t2,0xffffa
    3554:	00138593          	addi	a1,t2,1 # ffffa001 <tohost+0x2fa7a001>
    3558:	00b8c533          	xor	a0,a7,a1
    355c:	01051813          	slli	a6,a0,0x10
    3560:	01085893          	srli	a7,a6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3564:	01164e33          	xor	t3,a2,a7
                if (x16 == 1)
    3568:	001e7e93          	andi	t4,t3,1
                data >>= 1;
    356c:	00475f13          	srli	t5,a4,0x4
                crc >>= 1;
    3570:	0018d793          	srli	a5,a7,0x1
                if (x16 == 1)
    3574:	000e8b63          	beqz	t4,358a <core_bench_matrix+0xba>
                   crc |= 0x8000;
    3578:	7fe9                	lui	t6,0xffffa
    357a:	001f8413          	addi	s0,t6,1 # ffffa001 <tohost+0x2fa7a001>
    357e:	0087c6b3          	xor	a3,a5,s0
    3582:	01069293          	slli	t0,a3,0x10
    3586:	0102d793          	srli	a5,t0,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    358a:	00ff40b3          	xor	ra,t5,a5
                if (x16 == 1)
    358e:	0010f393          	andi	t2,ra,1
                data >>= 1;
    3592:	00575613          	srli	a2,a4,0x5
                crc >>= 1;
    3596:	0017de13          	srli	t3,a5,0x1
                if (x16 == 1)
    359a:	00038b63          	beqz	t2,35b0 <core_bench_matrix+0xe0>
                   crc |= 0x8000;
    359e:	75e9                	lui	a1,0xffffa
    35a0:	00158813          	addi	a6,a1,1 # ffffa001 <tohost+0x2fa7a001>
    35a4:	010e4533          	xor	a0,t3,a6
    35a8:	01051893          	slli	a7,a0,0x10
    35ac:	0108de13          	srli	t3,a7,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    35b0:	01c64eb3          	xor	t4,a2,t3
                if (x16 == 1)
    35b4:	001eff13          	andi	t5,t4,1
                data >>= 1;
    35b8:	00675f93          	srli	t6,a4,0x6
                crc >>= 1;
    35bc:	001e5093          	srli	ra,t3,0x1
                if (x16 == 1)
    35c0:	000f0b63          	beqz	t5,35d6 <core_bench_matrix+0x106>
                   crc |= 0x8000;
    35c4:	7469                	lui	s0,0xffffa
    35c6:	00140693          	addi	a3,s0,1 # ffffa001 <tohost+0x2fa7a001>
    35ca:	00d0c2b3          	xor	t0,ra,a3
    35ce:	01029793          	slli	a5,t0,0x10
    35d2:	0107d093          	srli	ra,a5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    35d6:	001fc3b3          	xor	t2,t6,ra
                if (x16 == 1)
    35da:	0013f613          	andi	a2,t2,1
                data >>= 1;
    35de:	831d                	srli	a4,a4,0x7
                crc >>= 1;
    35e0:	0010de13          	srli	t3,ra,0x1
                if (x16 == 1)
    35e4:	ca11                	beqz	a2,35f8 <core_bench_matrix+0x128>
                   crc |= 0x8000;
    35e6:	75e9                	lui	a1,0xffffa
    35e8:	00158813          	addi	a6,a1,1 # ffffa001 <tohost+0x2fa7a001>
    35ec:	010e4533          	xor	a0,t3,a6
    35f0:	01051893          	slli	a7,a0,0x10
    35f4:	0108de13          	srli	t3,a7,0x10
                if (x16 == 1)
    35f8:	001e7e93          	andi	t4,t3,1
                crc >>= 1;
    35fc:	001e5293          	srli	t0,t3,0x1
                if (x16 == 1)
    3600:	12ee9c63          	bne	t4,a4,3738 <core_bench_matrix+0x268>
        crc=crcu8( (ee_u8) ((newval)>>8)        ,crc);
    3604:	00835093          	srli	ra,t1,0x8
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3608:	0050c7b3          	xor	a5,ra,t0
                if (x16 == 1)
    360c:	0017f393          	andi	t2,a5,1
                data >>= 1;
    3610:	00935313          	srli	t1,t1,0x9
                if (x16 == 1)
    3614:	0012d513          	srli	a0,t0,0x1
    3618:	00038b63          	beqz	t2,362e <core_bench_matrix+0x15e>
                   crc |= 0x8000;
    361c:	7669                	lui	a2,0xffffa
    361e:	00160713          	addi	a4,a2,1 # ffffa001 <tohost+0x2fa7a001>
    3622:	00e545b3          	xor	a1,a0,a4
    3626:	01059813          	slli	a6,a1,0x10
    362a:	01085513          	srli	a0,a6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    362e:	00a348b3          	xor	a7,t1,a0
                if (x16 == 1)
    3632:	0018fe13          	andi	t3,a7,1
                data >>= 1;
    3636:	0020de93          	srli	t4,ra,0x2
                if (x16 == 1)
    363a:	00155293          	srli	t0,a0,0x1
    363e:	000e0b63          	beqz	t3,3654 <core_bench_matrix+0x184>
                   crc |= 0x8000;
    3642:	7f69                	lui	t5,0xffffa
    3644:	001f0f93          	addi	t6,t5,1 # ffffa001 <tohost+0x2fa7a001>
    3648:	01f2c433          	xor	s0,t0,t6
    364c:	01041693          	slli	a3,s0,0x10
    3650:	0106d293          	srli	t0,a3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3654:	005ec7b3          	xor	a5,t4,t0
                if (x16 == 1)
    3658:	0017f393          	andi	t2,a5,1
                data >>= 1;
    365c:	0030d313          	srli	t1,ra,0x3
                if (x16 == 1)
    3660:	0012d513          	srli	a0,t0,0x1
    3664:	00038b63          	beqz	t2,367a <core_bench_matrix+0x1aa>
                   crc |= 0x8000;
    3668:	7669                	lui	a2,0xffffa
    366a:	00160713          	addi	a4,a2,1 # ffffa001 <tohost+0x2fa7a001>
    366e:	00e545b3          	xor	a1,a0,a4
    3672:	01059813          	slli	a6,a1,0x10
    3676:	01085513          	srli	a0,a6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    367a:	00a348b3          	xor	a7,t1,a0
                if (x16 == 1)
    367e:	0018fe13          	andi	t3,a7,1
                data >>= 1;
    3682:	0040de93          	srli	t4,ra,0x4
                if (x16 == 1)
    3686:	00155293          	srli	t0,a0,0x1
    368a:	000e0b63          	beqz	t3,36a0 <core_bench_matrix+0x1d0>
                   crc |= 0x8000;
    368e:	7f69                	lui	t5,0xffffa
    3690:	001f0f93          	addi	t6,t5,1 # ffffa001 <tohost+0x2fa7a001>
    3694:	01f2c433          	xor	s0,t0,t6
    3698:	01041693          	slli	a3,s0,0x10
    369c:	0106d293          	srli	t0,a3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    36a0:	005ec7b3          	xor	a5,t4,t0
                if (x16 == 1)
    36a4:	0017f393          	andi	t2,a5,1
                data >>= 1;
    36a8:	0050d313          	srli	t1,ra,0x5
                if (x16 == 1)
    36ac:	0012d513          	srli	a0,t0,0x1
    36b0:	00038b63          	beqz	t2,36c6 <core_bench_matrix+0x1f6>
                   crc |= 0x8000;
    36b4:	7669                	lui	a2,0xffffa
    36b6:	00160713          	addi	a4,a2,1 # ffffa001 <tohost+0x2fa7a001>
    36ba:	00e545b3          	xor	a1,a0,a4
    36be:	01059813          	slli	a6,a1,0x10
    36c2:	01085513          	srli	a0,a6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    36c6:	00a348b3          	xor	a7,t1,a0
                if (x16 == 1)
    36ca:	0018fe13          	andi	t3,a7,1
                data >>= 1;
    36ce:	0060de93          	srli	t4,ra,0x6
                if (x16 == 1)
    36d2:	00155293          	srli	t0,a0,0x1
    36d6:	000e0b63          	beqz	t3,36ec <core_bench_matrix+0x21c>
                   crc |= 0x8000;
    36da:	7f69                	lui	t5,0xffffa
    36dc:	001f0f93          	addi	t6,t5,1 # ffffa001 <tohost+0x2fa7a001>
    36e0:	01f2c433          	xor	s0,t0,t6
    36e4:	01041693          	slli	a3,s0,0x10
    36e8:	0106d293          	srli	t0,a3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    36ec:	005ec7b3          	xor	a5,t4,t0
                if (x16 == 1)
    36f0:	0017f393          	andi	t2,a5,1
                data >>= 1;
    36f4:	0070d093          	srli	ra,ra,0x7
                if (x16 == 1)
    36f8:	0012d813          	srli	a6,t0,0x1
    36fc:	00038b63          	beqz	t2,3712 <core_bench_matrix+0x242>
                   crc |= 0x8000;
    3700:	7369                	lui	t1,0xffffa
    3702:	00130613          	addi	a2,t1,1 # ffffa001 <tohost+0x2fa7a001>
    3706:	00c84733          	xor	a4,a6,a2
    370a:	01071593          	slli	a1,a4,0x10
    370e:	0105d813          	srli	a6,a1,0x10
                if (x16 == 1)
    3712:	00187893          	andi	a7,a6,1
    3716:	00185513          	srli	a0,a6,0x1
    371a:	00188b63          	beq	a7,ra,3730 <core_bench_matrix+0x260>
                   crc |= 0x8000;
    371e:	7e69                	lui	t3,0xffffa
    3720:	001e0e93          	addi	t4,t3,1 # ffffa001 <tohost+0x2fa7a001>
    3724:	01d54533          	xor	a0,a0,t4
    3728:	01051f13          	slli	t5,a0,0x10
    372c:	010f5513          	srli	a0,t5,0x10
}
    3730:	40b2                	lw	ra,12(sp)
    3732:	4422                	lw	s0,8(sp)
    3734:	0141                	addi	sp,sp,16
    3736:	8082                	ret
                   crc |= 0x8000;
    3738:	7f69                	lui	t5,0xffffa
    373a:	001f0f93          	addi	t6,t5,1 # ffffa001 <tohost+0x2fa7a001>
    373e:	01f2c433          	xor	s0,t0,t6
    3742:	01041693          	slli	a3,s0,0x10
    3746:	0106d293          	srli	t0,a3,0x10
    374a:	bd6d                	j	3604 <core_bench_matrix+0x134>

0000374c <core_init_matrix>:
ee_u32 core_init_matrix(ee_u32 blksize, void *memblk, ee_s32 seed, mat_params *p) {
    374c:	7179                	addi	sp,sp,-48
    374e:	d04e                	sw	s3,32(sp)
    3750:	d622                	sw	s0,44(sp)
    3752:	d426                	sw	s1,40(sp)
    3754:	d24a                	sw	s2,36(sp)
    3756:	ce52                	sw	s4,28(sp)
    3758:	cc56                	sw	s5,24(sp)
    375a:	ca5a                	sw	s6,20(sp)
    375c:	c85e                	sw	s7,16(sp)
    375e:	c662                	sw	s8,12(sp)
    3760:	c466                	sw	s9,8(sp)
    3762:	c26a                	sw	s10,4(sp)
    3764:	872a                	mv	a4,a0
    3766:	89b6                	mv	s3,a3
        if (seed==0)
    3768:	e211                	bnez	a2,376c <core_init_matrix+0x20>
                seed=1;
    376a:	4605                	li	a2,1
        while (j<blksize) {
    376c:	4781                	li	a5,0
    376e:	2e070e63          	beqz	a4,3a6a <core_init_matrix+0x31e>
                i++;
    3772:	00178813          	addi	a6,a5,1
                j=i*i*2*4;
    3776:	030806b3          	mul	a3,a6,a6
                i++;
    377a:	00278893          	addi	a7,a5,2
    377e:	00378e93          	addi	t4,a5,3
    3782:	00478f93          	addi	t6,a5,4
    3786:	00578f13          	addi	t5,a5,5
    378a:	00678313          	addi	t1,a5,6
    378e:	00778393          	addi	t2,a5,7
        while (j<blksize) {
    3792:	853e                	mv	a0,a5
                i++;
    3794:	07a1                	addi	a5,a5,8
                j=i*i*2*4;
    3796:	00369413          	slli	s0,a3,0x3
        while (j<blksize) {
    379a:	06e47363          	bgeu	s0,a4,3800 <core_init_matrix+0xb4>
                j=i*i*2*4;
    379e:	03188933          	mul	s2,a7,a7
    37a2:	8542                	mv	a0,a6
    37a4:	00391a13          	slli	s4,s2,0x3
        while (j<blksize) {
    37a8:	04ea7c63          	bgeu	s4,a4,3800 <core_init_matrix+0xb4>
                j=i*i*2*4;
    37ac:	03de8ab3          	mul	s5,t4,t4
    37b0:	8546                	mv	a0,a7
    37b2:	003a9b13          	slli	s6,s5,0x3
        while (j<blksize) {
    37b6:	04eb7563          	bgeu	s6,a4,3800 <core_init_matrix+0xb4>
                j=i*i*2*4;
    37ba:	03ff8bb3          	mul	s7,t6,t6
    37be:	8576                	mv	a0,t4
    37c0:	003b9c13          	slli	s8,s7,0x3
        while (j<blksize) {
    37c4:	02ec7e63          	bgeu	s8,a4,3800 <core_init_matrix+0xb4>
                j=i*i*2*4;
    37c8:	03ef0cb3          	mul	s9,t5,t5
    37cc:	857e                	mv	a0,t6
    37ce:	003c9d13          	slli	s10,s9,0x3
        while (j<blksize) {
    37d2:	02ed7763          	bgeu	s10,a4,3800 <core_init_matrix+0xb4>
                j=i*i*2*4;
    37d6:	026304b3          	mul	s1,t1,t1
    37da:	857a                	mv	a0,t5
    37dc:	00349293          	slli	t0,s1,0x3
        while (j<blksize) {
    37e0:	02e2f063          	bgeu	t0,a4,3800 <core_init_matrix+0xb4>
                j=i*i*2*4;
    37e4:	02738e33          	mul	t3,t2,t2
    37e8:	851a                	mv	a0,t1
    37ea:	003e1813          	slli	a6,t3,0x3
        while (j<blksize) {
    37ee:	00e87963          	bgeu	a6,a4,3800 <core_init_matrix+0xb4>
                j=i*i*2*4;
    37f2:	02f788b3          	mul	a7,a5,a5
    37f6:	851e                	mv	a0,t2
    37f8:	00389e93          	slli	t4,a7,0x3
        while (j<blksize) {
    37fc:	f6eeebe3          	bltu	t4,a4,3772 <core_init_matrix+0x26>
        B=A+N*N;
    3800:	02a50733          	mul	a4,a0,a0
        A=(MATDAT *)align_mem(memblk);
    3804:	15fd                	addi	a1,a1,-1
    3806:	ffc5ff93          	andi	t6,a1,-4
    380a:	004f8a13          	addi	s4,t6,4
        p->N=N;
    380e:	8aaa                	mv	s5,a0
        A=(MATDAT *)align_mem(memblk);
    3810:	8e52                	mv	t3,s4
        B=A+N*N;
    3812:	00171413          	slli	s0,a4,0x1
    3816:	008a04b3          	add	s1,s4,s0
        for (i=0; i<N; i++) {
    381a:	20050b63          	beqz	a0,3a30 <core_init_matrix+0x2e4>
                        seed = ( ( order * seed ) % 65536 );
    381e:	6341                	lui	t1,0x10
    3820:	00150f13          	addi	t5,a0,1
    3824:	00151913          	slli	s2,a0,0x1
        B=A+N*N;
    3828:	8fa6                	mv	t6,s1
        for (i=0; i<N; i++) {
    382a:	4381                	li	t2,0
        ee_s32 order=1;
    382c:	4805                	li	a6,1
    382e:	409e0e33          	sub	t3,t3,s1
                        seed = ( ( order * seed ) % 65536 );
    3832:	fff30e93          	addi	t4,t1,-1 # ffff <_end+0x71b3>
                for (j=0; j<N; j++) {
    3836:	410f06b3          	sub	a3,t5,a6
    383a:	0036f793          	andi	a5,a3,3
        B=A+N*N;
    383e:	85fe                	mv	a1,t6
    3840:	86c2                	mv	a3,a6
    3842:	c3e5                	beqz	a5,3922 <core_init_matrix+0x1d6>
    3844:	4b05                	li	s6,1
    3846:	09678a63          	beq	a5,s6,38da <core_init_matrix+0x18e>
    384a:	4b89                	li	s7,2
    384c:	05778563          	beq	a5,s7,3896 <core_init_matrix+0x14a>
                        seed = ( ( order * seed ) % 65536 );
    3850:	03060633          	mul	a2,a2,a6
    3854:	01081c13          	slli	s8,a6,0x10
    3858:	010c5c93          	srli	s9,s8,0x10
                        A[i*N+j] = val;
    385c:	01fe0d33          	add	s10,t3,t6
                for (j=0; j<N; j++) {
    3860:	002f8593          	addi	a1,t6,2
                        val = (seed + order);
    3864:	0805                	addi	a6,a6,1
                        seed = ( ( order * seed ) % 65536 );
    3866:	41f65293          	srai	t0,a2,0x1f
    386a:	0102d893          	srli	a7,t0,0x10
    386e:	01160733          	add	a4,a2,a7
    3872:	01d77333          	and	t1,a4,t4
    3876:	41130633          	sub	a2,t1,a7
                        val = (seed + order);
    387a:	00cc87b3          	add	a5,s9,a2
    387e:	01079b13          	slli	s6,a5,0x10
    3882:	010b5b93          	srli	s7,s6,0x10
                        val =  (val + order);
    3886:	019b8c33          	add	s8,s7,s9
                        B[i*N+j] = val;
    388a:	017f9023          	sh	s7,0(t6)
                        val=matrix_clip(val,1);
    388e:	0ffc7c93          	zext.b	s9,s8
                        A[i*N+j] = val;
    3892:	019d1023          	sh	s9,0(s10)
                        seed = ( ( order * seed ) % 65536 );
    3896:	03060633          	mul	a2,a2,a6
    389a:	01081d13          	slli	s10,a6,0x10
    389e:	010d5293          	srli	t0,s10,0x10
                        A[i*N+j] = val;
    38a2:	00be08b3          	add	a7,t3,a1
                        val = (seed + order);
    38a6:	0805                	addi	a6,a6,1
                for (j=0; j<N; j++) {
    38a8:	0589                	addi	a1,a1,2
                        seed = ( ( order * seed ) % 65536 );
    38aa:	41f65713          	srai	a4,a2,0x1f
    38ae:	01075313          	srli	t1,a4,0x10
    38b2:	006607b3          	add	a5,a2,t1
    38b6:	01d7fb33          	and	s6,a5,t4
    38ba:	406b0633          	sub	a2,s6,t1
                        val = (seed + order);
    38be:	00c28bb3          	add	s7,t0,a2
    38c2:	010b9c13          	slli	s8,s7,0x10
    38c6:	010c5c93          	srli	s9,s8,0x10
                        val =  (val + order);
    38ca:	005c8d33          	add	s10,s9,t0
                        B[i*N+j] = val;
    38ce:	ff959f23          	sh	s9,-2(a1)
                        val=matrix_clip(val,1);
    38d2:	0ffd7293          	zext.b	t0,s10
                        A[i*N+j] = val;
    38d6:	00589023          	sh	t0,0(a7)
                        seed = ( ( order * seed ) % 65536 );
    38da:	03060633          	mul	a2,a2,a6
    38de:	01081893          	slli	a7,a6,0x10
    38e2:	0108d313          	srli	t1,a7,0x10
                        A[i*N+j] = val;
    38e6:	00be0b33          	add	s6,t3,a1
                for (j=0; j<N; j++) {
    38ea:	0589                	addi	a1,a1,2
                        order++;
    38ec:	0805                	addi	a6,a6,1
                        seed = ( ( order * seed ) % 65536 );
    38ee:	41f65713          	srai	a4,a2,0x1f
    38f2:	01075793          	srli	a5,a4,0x10
    38f6:	00f60bb3          	add	s7,a2,a5
    38fa:	01dbfc33          	and	s8,s7,t4
    38fe:	40fc0633          	sub	a2,s8,a5
                        val = (seed + order);
    3902:	00c30cb3          	add	s9,t1,a2
    3906:	010c9d13          	slli	s10,s9,0x10
    390a:	010d5293          	srli	t0,s10,0x10
                        val =  (val + order);
    390e:	006288b3          	add	a7,t0,t1
                        B[i*N+j] = val;
    3912:	fe559f23          	sh	t0,-2(a1)
                        val=matrix_clip(val,1);
    3916:	0ff8f313          	zext.b	t1,a7
                        A[i*N+j] = val;
    391a:	006b1023          	sh	t1,0(s6)
                for (j=0; j<N; j++) {
    391e:	11e80263          	beq	a6,t5,3a22 <core_init_matrix+0x2d6>
                        seed = ( ( order * seed ) % 65536 );
    3922:	03060633          	mul	a2,a2,a6
                        order++;
    3926:	00280793          	addi	a5,a6,2
    392a:	01079d13          	slli	s10,a5,0x10
    392e:	010d5313          	srli	t1,s10,0x10
    3932:	00180713          	addi	a4,a6,1
    3936:	01071c13          	slli	s8,a4,0x10
    393a:	01081b93          	slli	s7,a6,0x10
    393e:	010bd293          	srli	t0,s7,0x10
                        A[i*N+j] = val;
    3942:	00be0cb3          	add	s9,t3,a1
    3946:	010c5b93          	srli	s7,s8,0x10
                        seed = ( ( order * seed ) % 65536 );
    394a:	41f65d13          	srai	s10,a2,0x1f
    394e:	010d5d13          	srli	s10,s10,0x10
    3952:	966a                	add	a2,a2,s10
    3954:	01d67633          	and	a2,a2,t4
    3958:	41a60d33          	sub	s10,a2,s10
    395c:	02ed0733          	mul	a4,s10,a4
                        val = (seed + order);
    3960:	01a28633          	add	a2,t0,s10
    3964:	01061d13          	slli	s10,a2,0x10
    3968:	010d5613          	srli	a2,s10,0x10
                        val =  (val + order);
    396c:	92b2                	add	t0,t0,a2
                        B[i*N+j] = val;
    396e:	00c59023          	sh	a2,0(a1)
                        val=matrix_clip(val,1);
    3972:	0ff2fd13          	zext.b	s10,t0
                        A[i*N+j] = val;
    3976:	01ac9023          	sh	s10,0(s9)
    397a:	8c66                	mv	s8,s9
    397c:	8666                	mv	a2,s9
    397e:	82e6                	mv	t0,s9
                        seed = ( ( order * seed ) % 65536 );
    3980:	41f75c93          	srai	s9,a4,0x1f
    3984:	010cdd13          	srli	s10,s9,0x10
    3988:	976a                	add	a4,a4,s10
    398a:	01d77cb3          	and	s9,a4,t4
    398e:	41ac8d33          	sub	s10,s9,s10
    3992:	02fd07b3          	mul	a5,s10,a5
                        val = (seed + order);
    3996:	01ab8733          	add	a4,s7,s10
    399a:	01071c93          	slli	s9,a4,0x10
    399e:	010cdd13          	srli	s10,s9,0x10
                        val =  (val + order);
    39a2:	9bea                	add	s7,s7,s10
                        B[i*N+j] = val;
    39a4:	01a59123          	sh	s10,2(a1)
                        val=matrix_clip(val,1);
    39a8:	0ffbf713          	zext.b	a4,s7
                        A[i*N+j] = val;
    39ac:	00ec1123          	sh	a4,2(s8)
                        order++;
    39b0:	00380b13          	addi	s6,a6,3
    39b4:	010b1893          	slli	a7,s6,0x10
                        seed = ( ( order * seed ) % 65536 );
    39b8:	41f7dc13          	srai	s8,a5,0x1f
    39bc:	010c5c93          	srli	s9,s8,0x10
    39c0:	97e6                	add	a5,a5,s9
    39c2:	01d7fd33          	and	s10,a5,t4
    39c6:	419d0bb3          	sub	s7,s10,s9
    39ca:	036b8b33          	mul	s6,s7,s6
                        val = (seed + order);
    39ce:	01730733          	add	a4,t1,s7
    39d2:	01071c13          	slli	s8,a4,0x10
    39d6:	010c5c93          	srli	s9,s8,0x10
                        val =  (val + order);
    39da:	9366                	add	t1,t1,s9
                        B[i*N+j] = val;
    39dc:	01959223          	sh	s9,4(a1)
                        val=matrix_clip(val,1);
    39e0:	0ff37793          	zext.b	a5,t1
                        A[i*N+j] = val;
    39e4:	00f61223          	sh	a5,4(a2)
                        seed = ( ( order * seed ) % 65536 );
    39e8:	0108d893          	srli	a7,a7,0x10
                        order++;
    39ec:	0811                	addi	a6,a6,4
                        seed = ( ( order * seed ) % 65536 );
    39ee:	41fb5613          	srai	a2,s6,0x1f
    39f2:	01065d13          	srli	s10,a2,0x10
    39f6:	01ab0bb3          	add	s7,s6,s10
    39fa:	01dbfb33          	and	s6,s7,t4
    39fe:	41ab0633          	sub	a2,s6,s10
                        val = (seed + order);
    3a02:	00c88733          	add	a4,a7,a2
    3a06:	01071c13          	slli	s8,a4,0x10
    3a0a:	010c5c93          	srli	s9,s8,0x10
                        val =  (val + order);
    3a0e:	98e6                	add	a7,a7,s9
                        val=matrix_clip(val,1);
    3a10:	0ff8f313          	zext.b	t1,a7
                        B[i*N+j] = val;
    3a14:	01959323          	sh	s9,6(a1)
                        A[i*N+j] = val;
    3a18:	00629323          	sh	t1,6(t0)
                for (j=0; j<N; j++) {
    3a1c:	05a1                	addi	a1,a1,8
    3a1e:	f1e812e3          	bne	a6,t5,3922 <core_init_matrix+0x1d6>
        for (i=0; i<N; i++) {
    3a22:	0385                	addi	t2,t2,1
                        order++;
    3a24:	00d50833          	add	a6,a0,a3
        for (i=0; i<N; i++) {
    3a28:	9f2a                	add	t5,t5,a0
    3a2a:	9fca                	add	t6,t6,s2
    3a2c:	e0a395e3          	bne	t2,a0,3836 <core_init_matrix+0xea>
        p->C=(MATRES *)align_mem(B+N*N);
    3a30:	008486b3          	add	a3,s1,s0
    3a34:	fff68813          	addi	a6,a3,-1
    3a38:	ffc87593          	andi	a1,a6,-4
    3a3c:	00458413          	addi	s0,a1,4
    3a40:	0089a623          	sw	s0,12(s3)
}
    3a44:	5432                	lw	s0,44(sp)
        p->A=A;
    3a46:	0149a223          	sw	s4,4(s3)
        p->B=B;
    3a4a:	0099a423          	sw	s1,8(s3)
        p->N=N;
    3a4e:	0159a023          	sw	s5,0(s3)
}
    3a52:	54a2                	lw	s1,40(sp)
    3a54:	5912                	lw	s2,36(sp)
    3a56:	5982                	lw	s3,32(sp)
    3a58:	4a72                	lw	s4,28(sp)
    3a5a:	4ae2                	lw	s5,24(sp)
    3a5c:	4b52                	lw	s6,20(sp)
    3a5e:	4bc2                	lw	s7,16(sp)
    3a60:	4c32                	lw	s8,12(sp)
    3a62:	4ca2                	lw	s9,8(sp)
    3a64:	4d12                	lw	s10,4(sp)
    3a66:	6145                	addi	sp,sp,48
    3a68:	8082                	ret
        A=(MATDAT *)align_mem(memblk);
    3a6a:	fff58493          	addi	s1,a1,-1
    3a6e:	ffc4f293          	andi	t0,s1,-4
    3a72:	00428e13          	addi	t3,t0,4
    3a76:	8a72                	mv	s4,t3
        B=A+N*N;
    3a78:	00628493          	addi	s1,t0,6
    3a7c:	5afd                	li	s5,-1
    3a7e:	4409                	li	s0,2
    3a80:	557d                	li	a0,-1
    3a82:	bb71                	j	381e <core_init_matrix+0xd2>

00003a84 <matrix_sum>:
ee_s16 matrix_sum(ee_u32 N, MATRES *C, MATDAT clipval) {
    3a84:	882a                	mv	a6,a0
        for (i=0; i<N; i++) {
    3a86:	3e050963          	beqz	a0,3e78 <matrix_sum+0x3f4>
    3a8a:	00251313          	slli	t1,a0,0x2
    3a8e:	40a008b3          	neg	a7,a0
    3a92:	00658733          	add	a4,a1,t1
        ee_s16 ret=0;
    3a96:	4501                	li	a0,0
        for (i=0; i<N; i++) {
    3a98:	4581                	li	a1,0
        MATRES tmp=0,prev=0,cur=0;
    3a9a:	4f81                	li	t6,0
    3a9c:	4e81                	li	t4,0
        for (i=0; i<N; i++) {
    3a9e:	088e                	slli	a7,a7,0x3
                for (j=0; j<N; j++) {
    3aa0:	406706b3          	sub	a3,a4,t1
    3aa4:	40d707b3          	sub	a5,a4,a3
    3aa8:	ffc78293          	addi	t0,a5,-4
    3aac:	0022d393          	srli	t2,t0,0x2
    3ab0:	00138e13          	addi	t3,t2,1
    3ab4:	007e7793          	andi	a5,t3,7
        MATRES tmp=0,prev=0,cur=0;
    3ab8:	8e36                	mv	t3,a3
    3aba:	22078263          	beqz	a5,3cde <matrix_sum+0x25a>
    3abe:	4f05                	li	t5,1
    3ac0:	0fe78963          	beq	a5,t5,3bb2 <matrix_sum+0x12e>
    3ac4:	4289                	li	t0,2
    3ac6:	0c578463          	beq	a5,t0,3b8e <matrix_sum+0x10a>
    3aca:	438d                	li	t2,3
    3acc:	0a778163          	beq	a5,t2,3b6e <matrix_sum+0xea>
    3ad0:	4f11                	li	t5,4
    3ad2:	07e78c63          	beq	a5,t5,3b4a <matrix_sum+0xc6>
    3ad6:	4295                	li	t0,5
    3ad8:	04578763          	beq	a5,t0,3b26 <matrix_sum+0xa2>
    3adc:	4399                	li	t2,6
    3ade:	02778463          	beq	a5,t2,3b06 <matrix_sum+0x82>
                        cur=C[i*N+j];
    3ae2:	8e7e                	mv	t3,t6
    3ae4:	0006af83          	lw	t6,0(a3)
                                ret+=10;
    3ae8:	0542                	slli	a0,a0,0x10
    3aea:	01055f13          	srli	t5,a0,0x10
                        tmp+=cur;
    3aee:	9efe                	add	t4,t4,t6
                        if (tmp>clipval) {
    3af0:	37d65b63          	bge	a2,t4,3e66 <matrix_sum+0x3e2>
                                ret+=10;
    3af4:	00af0e93          	addi	t4,t5,10
    3af8:	010e9e13          	slli	t3,t4,0x10
    3afc:	410e5513          	srai	a0,t3,0x10
                                tmp=0;
    3b00:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
    3b02:	00468e13          	addi	t3,a3,4
                        cur=C[i*N+j];
    3b06:	8f7e                	mv	t5,t6
    3b08:	000e2f83          	lw	t6,0(t3)
                                ret+=10;
    3b0c:	0542                	slli	a0,a0,0x10
    3b0e:	01055293          	srli	t0,a0,0x10
                        tmp+=cur;
    3b12:	9efe                	add	t4,t4,t6
                        if (tmp>clipval) {
    3b14:	35d65063          	bge	a2,t4,3e54 <matrix_sum+0x3d0>
                                ret+=10;
    3b18:	00a28e93          	addi	t4,t0,10
    3b1c:	010e9513          	slli	a0,t4,0x10
    3b20:	8541                	srai	a0,a0,0x10
                                tmp=0;
    3b22:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
    3b24:	0e11                	addi	t3,t3,4
                        cur=C[i*N+j];
    3b26:	82fe                	mv	t0,t6
    3b28:	000e2f83          	lw	t6,0(t3)
                                ret+=10;
    3b2c:	01051793          	slli	a5,a0,0x10
    3b30:	0107d393          	srli	t2,a5,0x10
                        tmp+=cur;
    3b34:	9efe                	add	t4,t4,t6
                        if (tmp>clipval) {
    3b36:	31d65663          	bge	a2,t4,3e42 <matrix_sum+0x3be>
                                ret+=10;
    3b3a:	00a38e93          	addi	t4,t2,10
    3b3e:	010e9793          	slli	a5,t4,0x10
    3b42:	4107d513          	srai	a0,a5,0x10
                                tmp=0;
    3b46:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
    3b48:	0e11                	addi	t3,t3,4
                        cur=C[i*N+j];
    3b4a:	83fe                	mv	t2,t6
    3b4c:	000e2f83          	lw	t6,0(t3)
                                ret+=10;
    3b50:	01051f13          	slli	t5,a0,0x10
    3b54:	010f5513          	srli	a0,t5,0x10
                        tmp+=cur;
    3b58:	9efe                	add	t4,t4,t6
                        if (tmp>clipval) {
    3b5a:	2dd65b63          	bge	a2,t4,3e30 <matrix_sum+0x3ac>
                                ret+=10;
    3b5e:	00a50e93          	addi	t4,a0,10
    3b62:	010e9f13          	slli	t5,t4,0x10
    3b66:	410f5513          	srai	a0,t5,0x10
                                tmp=0;
    3b6a:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
    3b6c:	0e11                	addi	t3,t3,4
                        cur=C[i*N+j];
    3b6e:	82fe                	mv	t0,t6
    3b70:	000e2f83          	lw	t6,0(t3)
                                ret+=10;
    3b74:	0542                	slli	a0,a0,0x10
    3b76:	01055793          	srli	a5,a0,0x10
                        tmp+=cur;
    3b7a:	9efe                	add	t4,t4,t6
                        if (tmp>clipval) {
    3b7c:	2bd65163          	bge	a2,t4,3e1e <matrix_sum+0x39a>
                                ret+=10;
    3b80:	00a78e93          	addi	t4,a5,10
    3b84:	010e9513          	slli	a0,t4,0x10
    3b88:	8541                	srai	a0,a0,0x10
                                tmp=0;
    3b8a:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
    3b8c:	0e11                	addi	t3,t3,4
                        cur=C[i*N+j];
    3b8e:	83fe                	mv	t2,t6
    3b90:	000e2f83          	lw	t6,0(t3)
                                ret+=10;
    3b94:	01051793          	slli	a5,a0,0x10
    3b98:	0107d293          	srli	t0,a5,0x10
                        tmp+=cur;
    3b9c:	9efe                	add	t4,t4,t6
                        if (tmp>clipval) {
    3b9e:	27d65763          	bge	a2,t4,3e0c <matrix_sum+0x388>
                                ret+=10;
    3ba2:	00a28e93          	addi	t4,t0,10
    3ba6:	010e9793          	slli	a5,t4,0x10
    3baa:	4107d513          	srai	a0,a5,0x10
                                tmp=0;
    3bae:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
    3bb0:	0e11                	addi	t3,t3,4
                        cur=C[i*N+j];
    3bb2:	82fe                	mv	t0,t6
    3bb4:	000e2f83          	lw	t6,0(t3)
                                ret+=10;
    3bb8:	01051f13          	slli	t5,a0,0x10
    3bbc:	010f5513          	srli	a0,t5,0x10
                        tmp+=cur;
    3bc0:	9efe                	add	t4,t4,t6
                        if (tmp>clipval) {
    3bc2:	23d65c63          	bge	a2,t4,3dfa <matrix_sum+0x376>
                                ret+=10;
    3bc6:	00a50e93          	addi	t4,a0,10
    3bca:	010e9f13          	slli	t5,t4,0x10
    3bce:	410f5513          	srai	a0,t5,0x10
                                tmp=0;
    3bd2:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
    3bd4:	0e11                	addi	t3,t3,4
    3bd6:	11c71463          	bne	a4,t3,3cde <matrix_sum+0x25a>
        for (i=0; i<N; i++) {
    3bda:	0585                	addi	a1,a1,1
    3bdc:	41168733          	sub	a4,a3,a7
    3be0:	ecb810e3          	bne	a6,a1,3aa0 <matrix_sum+0x1c>
    3be4:	8082                	ret
                                ret += (cur>prev) ? 1 : 0;
    3be6:	007fafb3          	slt	t6,t6,t2
    3bea:	01f782b3          	add	t0,a5,t6
                        cur=C[i*N+j];
    3bee:	004e2f83          	lw	t6,4(t3)
                                ret += (cur>prev) ? 1 : 0;
    3bf2:	01029f13          	slli	t5,t0,0x10
    3bf6:	410f5793          	srai	a5,t5,0x10
                                ret+=10;
    3bfa:	01079293          	slli	t0,a5,0x10
                        tmp+=cur;
    3bfe:	01fe8533          	add	a0,t4,t6
                for (j=0; j<N; j++) {
    3c02:	0e11                	addi	t3,t3,4
                                ret+=10;
    3c04:	0102d793          	srli	a5,t0,0x10
                        if (tmp>clipval) {
    3c08:	10a65563          	bge	a2,a0,3d12 <matrix_sum+0x28e>
                        cur=C[i*N+j];
    3c0c:	004e2383          	lw	t2,4(t3)
                                ret+=10;
    3c10:	07a9                	addi	a5,a5,10
    3c12:	01079513          	slli	a0,a5,0x10
    3c16:	41055293          	srai	t0,a0,0x10
                                tmp=0;
    3c1a:	4501                	li	a0,0
                                ret+=10;
    3c1c:	01029f13          	slli	t5,t0,0x10
                        tmp+=cur;
    3c20:	007502b3          	add	t0,a0,t2
                                ret+=10;
    3c24:	010f5e93          	srli	t4,t5,0x10
                        if (tmp>clipval) {
    3c28:	10565763          	bge	a2,t0,3d36 <matrix_sum+0x2b2>
                                ret+=10;
    3c2c:	0ea9                	addi	t4,t4,10
                        cur=C[i*N+j];
    3c2e:	008e2f83          	lw	t6,8(t3)
                                ret+=10;
    3c32:	010e9293          	slli	t0,t4,0x10
    3c36:	4102df13          	srai	t5,t0,0x10
                                tmp=0;
    3c3a:	4281                	li	t0,0
                                ret+=10;
    3c3c:	010f1793          	slli	a5,t5,0x10
                        tmp+=cur;
    3c40:	01f28533          	add	a0,t0,t6
                                ret+=10;
    3c44:	0107de93          	srli	t4,a5,0x10
                        if (tmp>clipval) {
    3c48:	10a65963          	bge	a2,a0,3d5a <matrix_sum+0x2d6>
                        cur=C[i*N+j];
    3c4c:	00ce2383          	lw	t2,12(t3)
                                ret+=10;
    3c50:	0ea9                	addi	t4,t4,10
    3c52:	010e9513          	slli	a0,t4,0x10
    3c56:	41055793          	srai	a5,a0,0x10
                                tmp=0;
    3c5a:	4501                	li	a0,0
                                ret+=10;
    3c5c:	01079f13          	slli	t5,a5,0x10
                        tmp+=cur;
    3c60:	951e                	add	a0,a0,t2
                                ret+=10;
    3c62:	010f5293          	srli	t0,t5,0x10
                        if (tmp>clipval) {
    3c66:	10a65b63          	bge	a2,a0,3d7c <matrix_sum+0x2f8>
                                ret+=10;
    3c6a:	02a9                	addi	t0,t0,10
                        cur=C[i*N+j];
    3c6c:	010e2f83          	lw	t6,16(t3)
                                ret+=10;
    3c70:	01029513          	slli	a0,t0,0x10
    3c74:	41055f13          	srai	t5,a0,0x10
                                tmp=0;
    3c78:	4501                	li	a0,0
                                ret+=10;
    3c7a:	010f1793          	slli	a5,t5,0x10
                        tmp+=cur;
    3c7e:	01f502b3          	add	t0,a0,t6
                                ret+=10;
    3c82:	0107de93          	srli	t4,a5,0x10
                        if (tmp>clipval) {
    3c86:	10565d63          	bge	a2,t0,3da0 <matrix_sum+0x31c>
                        cur=C[i*N+j];
    3c8a:	014e2383          	lw	t2,20(t3)
                                ret+=10;
    3c8e:	0ea9                	addi	t4,t4,10
    3c90:	010e9293          	slli	t0,t4,0x10
    3c94:	4102d793          	srai	a5,t0,0x10
                                tmp=0;
    3c98:	4281                	li	t0,0
                                ret+=10;
    3c9a:	01079f13          	slli	t5,a5,0x10
                        tmp+=cur;
    3c9e:	00728533          	add	a0,t0,t2
                                ret+=10;
    3ca2:	010f5793          	srli	a5,t5,0x10
                        if (tmp>clipval) {
    3ca6:	10a65f63          	bge	a2,a0,3dc4 <matrix_sum+0x340>
                                ret+=10;
    3caa:	07a9                	addi	a5,a5,10
    3cac:	01079513          	slli	a0,a5,0x10
                        cur=C[i*N+j];
    3cb0:	018e2f83          	lw	t6,24(t3)
                                ret+=10;
    3cb4:	41055f13          	srai	t5,a0,0x10
    3cb8:	010f1e93          	slli	t4,t5,0x10
                                tmp=0;
    3cbc:	4501                	li	a0,0
                                ret+=10;
    3cbe:	010ed293          	srli	t0,t4,0x10
                        tmp+=cur;
    3cc2:	01f50eb3          	add	t4,a0,t6
                        if (tmp>clipval) {
    3cc6:	13d65163          	bge	a2,t4,3de8 <matrix_sum+0x364>
                                ret+=10;
    3cca:	00a28513          	addi	a0,t0,10
    3cce:	01051293          	slli	t0,a0,0x10
    3cd2:	4102d513          	srai	a0,t0,0x10
                                tmp=0;
    3cd6:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
    3cd8:	0e71                	addi	t3,t3,28
    3cda:	f1c700e3          	beq	a4,t3,3bda <matrix_sum+0x156>
                        cur=C[i*N+j];
    3cde:	000e2383          	lw	t2,0(t3)
                                ret+=10;
    3ce2:	0542                	slli	a0,a0,0x10
    3ce4:	01055793          	srli	a5,a0,0x10
                        tmp+=cur;
    3ce8:	9e9e                	add	t4,t4,t2
                        if (tmp>clipval) {
    3cea:	efd65ee3          	bge	a2,t4,3be6 <matrix_sum+0x162>
                                ret+=10;
    3cee:	00a78e93          	addi	t4,a5,10
                        cur=C[i*N+j];
    3cf2:	004e2f83          	lw	t6,4(t3)
                                ret+=10;
    3cf6:	010e9513          	slli	a0,t4,0x10
    3cfa:	41055793          	srai	a5,a0,0x10
                                tmp=0;
    3cfe:	4e81                	li	t4,0
                                ret+=10;
    3d00:	01079293          	slli	t0,a5,0x10
                        tmp+=cur;
    3d04:	01fe8533          	add	a0,t4,t6
                for (j=0; j<N; j++) {
    3d08:	0e11                	addi	t3,t3,4
                                ret+=10;
    3d0a:	0102d793          	srli	a5,t0,0x10
                        if (tmp>clipval) {
    3d0e:	eea64fe3          	blt	a2,a0,3c0c <matrix_sum+0x188>
                                ret += (cur>prev) ? 1 : 0;
    3d12:	01f3a3b3          	slt	t2,t2,t6
    3d16:	00778f33          	add	t5,a5,t2
                        cur=C[i*N+j];
    3d1a:	004e2383          	lw	t2,4(t3)
                                ret += (cur>prev) ? 1 : 0;
    3d1e:	010f1e93          	slli	t4,t5,0x10
    3d22:	410ed293          	srai	t0,t4,0x10
                                ret+=10;
    3d26:	01029f13          	slli	t5,t0,0x10
                        tmp+=cur;
    3d2a:	007502b3          	add	t0,a0,t2
                                ret+=10;
    3d2e:	010f5e93          	srli	t4,t5,0x10
                        if (tmp>clipval) {
    3d32:	ee564de3          	blt	a2,t0,3c2c <matrix_sum+0x1a8>
                                ret += (cur>prev) ? 1 : 0;
    3d36:	007fafb3          	slt	t6,t6,t2
    3d3a:	01fe87b3          	add	a5,t4,t6
                        cur=C[i*N+j];
    3d3e:	008e2f83          	lw	t6,8(t3)
                                ret += (cur>prev) ? 1 : 0;
    3d42:	01079513          	slli	a0,a5,0x10
    3d46:	41055f13          	srai	t5,a0,0x10
                                ret+=10;
    3d4a:	010f1793          	slli	a5,t5,0x10
                        tmp+=cur;
    3d4e:	01f28533          	add	a0,t0,t6
                                ret+=10;
    3d52:	0107de93          	srli	t4,a5,0x10
                        if (tmp>clipval) {
    3d56:	eea64be3          	blt	a2,a0,3c4c <matrix_sum+0x1c8>
                                ret += (cur>prev) ? 1 : 0;
    3d5a:	01f3a3b3          	slt	t2,t2,t6
    3d5e:	007e8f33          	add	t5,t4,t2
                        cur=C[i*N+j];
    3d62:	00ce2383          	lw	t2,12(t3)
                                ret += (cur>prev) ? 1 : 0;
    3d66:	010f1293          	slli	t0,t5,0x10
    3d6a:	4102d793          	srai	a5,t0,0x10
                                ret+=10;
    3d6e:	01079f13          	slli	t5,a5,0x10
                        tmp+=cur;
    3d72:	951e                	add	a0,a0,t2
                                ret+=10;
    3d74:	010f5293          	srli	t0,t5,0x10
                        if (tmp>clipval) {
    3d78:	eea649e3          	blt	a2,a0,3c6a <matrix_sum+0x1e6>
                                ret += (cur>prev) ? 1 : 0;
    3d7c:	007fafb3          	slt	t6,t6,t2
    3d80:	01f287b3          	add	a5,t0,t6
                        cur=C[i*N+j];
    3d84:	010e2f83          	lw	t6,16(t3)
                                ret += (cur>prev) ? 1 : 0;
    3d88:	01079e93          	slli	t4,a5,0x10
    3d8c:	410edf13          	srai	t5,t4,0x10
                                ret+=10;
    3d90:	010f1793          	slli	a5,t5,0x10
                        tmp+=cur;
    3d94:	01f502b3          	add	t0,a0,t6
                                ret+=10;
    3d98:	0107de93          	srli	t4,a5,0x10
                        if (tmp>clipval) {
    3d9c:	ee5647e3          	blt	a2,t0,3c8a <matrix_sum+0x206>
                                ret += (cur>prev) ? 1 : 0;
    3da0:	01f3a3b3          	slt	t2,t2,t6
    3da4:	007e8f33          	add	t5,t4,t2
                        cur=C[i*N+j];
    3da8:	014e2383          	lw	t2,20(t3)
                                ret += (cur>prev) ? 1 : 0;
    3dac:	010f1513          	slli	a0,t5,0x10
    3db0:	41055793          	srai	a5,a0,0x10
                                ret+=10;
    3db4:	01079f13          	slli	t5,a5,0x10
                        tmp+=cur;
    3db8:	00728533          	add	a0,t0,t2
                                ret+=10;
    3dbc:	010f5793          	srli	a5,t5,0x10
                        if (tmp>clipval) {
    3dc0:	eea645e3          	blt	a2,a0,3caa <matrix_sum+0x226>
                                ret += (cur>prev) ? 1 : 0;
    3dc4:	007fafb3          	slt	t6,t6,t2
    3dc8:	01f78eb3          	add	t4,a5,t6
    3dcc:	010e9293          	slli	t0,t4,0x10
                        cur=C[i*N+j];
    3dd0:	018e2f83          	lw	t6,24(t3)
                                ret += (cur>prev) ? 1 : 0;
    3dd4:	4102df13          	srai	t5,t0,0x10
                                ret+=10;
    3dd8:	010f1e93          	slli	t4,t5,0x10
    3ddc:	010ed293          	srli	t0,t4,0x10
                        tmp+=cur;
    3de0:	01f50eb3          	add	t4,a0,t6
                        if (tmp>clipval) {
    3de4:	efd643e3          	blt	a2,t4,3cca <matrix_sum+0x246>
                                ret += (cur>prev) ? 1 : 0;
    3de8:	01f3a3b3          	slt	t2,t2,t6
    3dec:	00728f33          	add	t5,t0,t2
    3df0:	010f1793          	slli	a5,t5,0x10
    3df4:	4107d513          	srai	a0,a5,0x10
    3df8:	b5c5                	j	3cd8 <matrix_sum+0x254>
    3dfa:	01f2a3b3          	slt	t2,t0,t6
    3dfe:	007507b3          	add	a5,a0,t2
    3e02:	01079293          	slli	t0,a5,0x10
    3e06:	4102d513          	srai	a0,t0,0x10
    3e0a:	b3e9                	j	3bd4 <matrix_sum+0x150>
    3e0c:	01f3af33          	slt	t5,t2,t6
    3e10:	01e28533          	add	a0,t0,t5
    3e14:	01051393          	slli	t2,a0,0x10
    3e18:	4103d513          	srai	a0,t2,0x10
    3e1c:	bb51                	j	3bb0 <matrix_sum+0x12c>
    3e1e:	01f2a3b3          	slt	t2,t0,t6
    3e22:	00778f33          	add	t5,a5,t2
    3e26:	010f1293          	slli	t0,t5,0x10
    3e2a:	4102d513          	srai	a0,t0,0x10
    3e2e:	bbb9                	j	3b8c <matrix_sum+0x108>
    3e30:	01f3a2b3          	slt	t0,t2,t6
    3e34:	005507b3          	add	a5,a0,t0
    3e38:	01079393          	slli	t2,a5,0x10
    3e3c:	4103d513          	srai	a0,t2,0x10
    3e40:	b335                	j	3b6c <matrix_sum+0xe8>
    3e42:	01f2af33          	slt	t5,t0,t6
    3e46:	01e38533          	add	a0,t2,t5
    3e4a:	01051293          	slli	t0,a0,0x10
    3e4e:	4102d513          	srai	a0,t0,0x10
    3e52:	b9dd                	j	3b48 <matrix_sum+0xc4>
    3e54:	01ff27b3          	slt	a5,t5,t6
    3e58:	00f283b3          	add	t2,t0,a5
    3e5c:	01039f13          	slli	t5,t2,0x10
    3e60:	410f5513          	srai	a0,t5,0x10
    3e64:	b1c1                	j	3b24 <matrix_sum+0xa0>
    3e66:	01fe27b3          	slt	a5,t3,t6
    3e6a:	00ff02b3          	add	t0,t5,a5
    3e6e:	01029393          	slli	t2,t0,0x10
    3e72:	4103d513          	srai	a0,t2,0x10
    3e76:	b171                	j	3b02 <matrix_sum+0x7e>
        ee_s16 ret=0;
    3e78:	4501                	li	a0,0
}
    3e7a:	8082                	ret

00003e7c <matrix_mul_const>:
        for (i=0; i<N; i++) {
    3e7c:	16050063          	beqz	a0,3fdc <matrix_mul_const+0x160>
void matrix_mul_const(ee_u32 N, MATRES *C, MATDAT *A, MATDAT val) {
    3e80:	1141                	addi	sp,sp,-16
    3e82:	c622                	sw	s0,12(sp)
    3e84:	40a003b3          	neg	t2,a0
    3e88:	00151413          	slli	s0,a0,0x1
    3e8c:	c426                	sw	s1,8(sp)
    3e8e:	c24a                	sw	s2,4(sp)
    3e90:	c04e                	sw	s3,0(sp)
    3e92:	00860833          	add	a6,a2,s0
                        C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
    3e96:	4f81                	li	t6,0
        for (i=0; i<N; i++) {
    3e98:	4281                	li	t0,0
    3e9a:	038a                	slli	t2,t2,0x2
                for (j=0; j<N; j++) {
    3e9c:	408808b3          	sub	a7,a6,s0
    3ea0:	41180633          	sub	a2,a6,a7
    3ea4:	ffe60313          	addi	t1,a2,-2
    3ea8:	00135493          	srli	s1,t1,0x1
    3eac:	00148713          	addi	a4,s1,1
    3eb0:	002f9793          	slli	a5,t6,0x2
    3eb4:	00777913          	andi	s2,a4,7
    3eb8:	97ae                	add	a5,a5,a1
void matrix_mul_const(ee_u32 N, MATRES *C, MATDAT *A, MATDAT val) {
    3eba:	8746                	mv	a4,a7
    3ebc:	08090f63          	beqz	s2,3f5a <matrix_mul_const+0xde>
    3ec0:	4985                	li	s3,1
    3ec2:	09390263          	beq	s2,s3,3f46 <matrix_mul_const+0xca>
    3ec6:	4e09                	li	t3,2
    3ec8:	07c90763          	beq	s2,t3,3f36 <matrix_mul_const+0xba>
    3ecc:	4e8d                	li	t4,3
    3ece:	05d90c63          	beq	s2,t4,3f26 <matrix_mul_const+0xaa>
    3ed2:	4f11                	li	t5,4
    3ed4:	05e90163          	beq	s2,t5,3f16 <matrix_mul_const+0x9a>
    3ed8:	4615                	li	a2,5
    3eda:	02c90663          	beq	s2,a2,3f06 <matrix_mul_const+0x8a>
    3ede:	4319                	li	t1,6
    3ee0:	00690b63          	beq	s2,t1,3ef6 <matrix_mul_const+0x7a>
                        C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
    3ee4:	00089483          	lh	s1,0(a7)
                for (j=0; j<N; j++) {
    3ee8:	00288713          	addi	a4,a7,2
    3eec:	0791                	addi	a5,a5,4
                        C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
    3eee:	02d48933          	mul	s2,s1,a3
    3ef2:	ff27ae23          	sw	s2,-4(a5)
    3ef6:	00071983          	lh	s3,0(a4)
                for (j=0; j<N; j++) {
    3efa:	0791                	addi	a5,a5,4
    3efc:	0709                	addi	a4,a4,2
                        C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
    3efe:	02d98e33          	mul	t3,s3,a3
    3f02:	ffc7ae23          	sw	t3,-4(a5)
    3f06:	00071e83          	lh	t4,0(a4)
                for (j=0; j<N; j++) {
    3f0a:	0791                	addi	a5,a5,4
    3f0c:	0709                	addi	a4,a4,2
                        C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
    3f0e:	02de8f33          	mul	t5,t4,a3
    3f12:	ffe7ae23          	sw	t5,-4(a5)
    3f16:	00071603          	lh	a2,0(a4)
                for (j=0; j<N; j++) {
    3f1a:	0791                	addi	a5,a5,4
    3f1c:	0709                	addi	a4,a4,2
                        C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
    3f1e:	02d60333          	mul	t1,a2,a3
    3f22:	fe67ae23          	sw	t1,-4(a5)
    3f26:	00071483          	lh	s1,0(a4)
                for (j=0; j<N; j++) {
    3f2a:	0791                	addi	a5,a5,4
    3f2c:	0709                	addi	a4,a4,2
                        C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
    3f2e:	02d48933          	mul	s2,s1,a3
    3f32:	ff27ae23          	sw	s2,-4(a5)
    3f36:	00071983          	lh	s3,0(a4)
                for (j=0; j<N; j++) {
    3f3a:	0791                	addi	a5,a5,4
    3f3c:	0709                	addi	a4,a4,2
                        C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
    3f3e:	02d98e33          	mul	t3,s3,a3
    3f42:	ffc7ae23          	sw	t3,-4(a5)
    3f46:	00071e83          	lh	t4,0(a4)
                for (j=0; j<N; j++) {
    3f4a:	0791                	addi	a5,a5,4
    3f4c:	0709                	addi	a4,a4,2
                        C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
    3f4e:	02de8f33          	mul	t5,t4,a3
    3f52:	ffe7ae23          	sw	t5,-4(a5)
                for (j=0; j<N; j++) {
    3f56:	06e80763          	beq	a6,a4,3fc4 <matrix_mul_const+0x148>
                        C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
    3f5a:	00071983          	lh	s3,0(a4)
    3f5e:	00271903          	lh	s2,2(a4)
    3f62:	00471483          	lh	s1,4(a4)
    3f66:	00671f03          	lh	t5,6(a4)
    3f6a:	00871e83          	lh	t4,8(a4)
    3f6e:	00a71e03          	lh	t3,10(a4)
    3f72:	00c71303          	lh	t1,12(a4)
    3f76:	00e71603          	lh	a2,14(a4)
    3f7a:	02d989b3          	mul	s3,s3,a3
                for (j=0; j<N; j++) {
    3f7e:	0741                	addi	a4,a4,16
    3f80:	02078793          	addi	a5,a5,32
                        C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
    3f84:	02d90933          	mul	s2,s2,a3
    3f88:	ff37a023          	sw	s3,-32(a5)
    3f8c:	02d484b3          	mul	s1,s1,a3
    3f90:	ff27a223          	sw	s2,-28(a5)
    3f94:	02df0f33          	mul	t5,t5,a3
    3f98:	fe97a423          	sw	s1,-24(a5)
    3f9c:	02de8eb3          	mul	t4,t4,a3
    3fa0:	ffe7a623          	sw	t5,-20(a5)
    3fa4:	02de0e33          	mul	t3,t3,a3
    3fa8:	ffd7a823          	sw	t4,-16(a5)
    3fac:	02d30333          	mul	t1,t1,a3
    3fb0:	ffc7aa23          	sw	t3,-12(a5)
    3fb4:	02d60633          	mul	a2,a2,a3
    3fb8:	fe67ac23          	sw	t1,-8(a5)
    3fbc:	fec7ae23          	sw	a2,-4(a5)
                for (j=0; j<N; j++) {
    3fc0:	f8e81de3          	bne	a6,a4,3f5a <matrix_mul_const+0xde>
        for (i=0; i<N; i++) {
    3fc4:	0285                	addi	t0,t0,1
    3fc6:	9faa                	add	t6,t6,a0
    3fc8:	40788833          	sub	a6,a7,t2
    3fcc:	ec5518e3          	bne	a0,t0,3e9c <matrix_mul_const+0x20>
}
    3fd0:	4432                	lw	s0,12(sp)
    3fd2:	44a2                	lw	s1,8(sp)
    3fd4:	4912                	lw	s2,4(sp)
    3fd6:	4982                	lw	s3,0(sp)
    3fd8:	0141                	addi	sp,sp,16
    3fda:	8082                	ret
    3fdc:	8082                	ret

00003fde <matrix_add_const>:
        for (i=0; i<N; i++) {
    3fde:	1c050e63          	beqz	a0,41ba <matrix_add_const+0x1dc>
                        A[i*N+j] += val;
    3fe2:	01061693          	slli	a3,a2,0x10
    3fe6:	00151393          	slli	t2,a0,0x1
    3fea:	40a002b3          	neg	t0,a0
    3fee:	82c1                	srli	a3,a3,0x10
    3ff0:	00758633          	add	a2,a1,t2
        for (i=0; i<N; i++) {
    3ff4:	4f81                	li	t6,0
    3ff6:	028a                	slli	t0,t0,0x2
                for (j=0; j<N; j++) {
    3ff8:	407605b3          	sub	a1,a2,t2
    3ffc:	40b60733          	sub	a4,a2,a1
    4000:	ffe70313          	addi	t1,a4,-2
    4004:	00135793          	srli	a5,t1,0x1
    4008:	00178813          	addi	a6,a5,1
    400c:	00787893          	andi	a7,a6,7
void matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val) {
    4010:	87ae                	mv	a5,a1
    4012:	08088863          	beqz	a7,40a2 <matrix_add_const+0xc4>
    4016:	4e05                	li	t3,1
    4018:	07c88c63          	beq	a7,t3,4090 <matrix_add_const+0xb2>
    401c:	4e89                	li	t4,2
    401e:	07d88263          	beq	a7,t4,4082 <matrix_add_const+0xa4>
    4022:	4f0d                	li	t5,3
    4024:	05e88863          	beq	a7,t5,4074 <matrix_add_const+0x96>
    4028:	4711                	li	a4,4
    402a:	02e88e63          	beq	a7,a4,4066 <matrix_add_const+0x88>
    402e:	4315                	li	t1,5
    4030:	02688463          	beq	a7,t1,4058 <matrix_add_const+0x7a>
    4034:	4819                	li	a6,6
    4036:	01088a63          	beq	a7,a6,404a <matrix_add_const+0x6c>
                        A[i*N+j] += val;
    403a:	0005d883          	lhu	a7,0(a1)
                for (j=0; j<N; j++) {
    403e:	00258793          	addi	a5,a1,2
                        A[i*N+j] += val;
    4042:	01168e33          	add	t3,a3,a7
    4046:	01c59023          	sh	t3,0(a1)
    404a:	0007de83          	lhu	t4,0(a5)
                for (j=0; j<N; j++) {
    404e:	0789                	addi	a5,a5,2
                        A[i*N+j] += val;
    4050:	01d68f33          	add	t5,a3,t4
    4054:	ffe79f23          	sh	t5,-2(a5)
    4058:	0007d703          	lhu	a4,0(a5)
                for (j=0; j<N; j++) {
    405c:	0789                	addi	a5,a5,2
                        A[i*N+j] += val;
    405e:	00e68333          	add	t1,a3,a4
    4062:	fe679f23          	sh	t1,-2(a5)
    4066:	0007d803          	lhu	a6,0(a5)
                for (j=0; j<N; j++) {
    406a:	0789                	addi	a5,a5,2
                        A[i*N+j] += val;
    406c:	010688b3          	add	a7,a3,a6
    4070:	ff179f23          	sh	a7,-2(a5)
    4074:	0007de03          	lhu	t3,0(a5)
                for (j=0; j<N; j++) {
    4078:	0789                	addi	a5,a5,2
                        A[i*N+j] += val;
    407a:	01c68eb3          	add	t4,a3,t3
    407e:	ffd79f23          	sh	t4,-2(a5)
    4082:	0007df03          	lhu	t5,0(a5)
                for (j=0; j<N; j++) {
    4086:	0789                	addi	a5,a5,2
                        A[i*N+j] += val;
    4088:	01e68733          	add	a4,a3,t5
    408c:	fee79f23          	sh	a4,-2(a5)
    4090:	0007d303          	lhu	t1,0(a5)
                for (j=0; j<N; j++) {
    4094:	0789                	addi	a5,a5,2
                        A[i*N+j] += val;
    4096:	00668833          	add	a6,a3,t1
    409a:	ff079f23          	sh	a6,-2(a5)
                for (j=0; j<N; j++) {
    409e:	10f60963          	beq	a2,a5,41b0 <matrix_add_const+0x1d2>
void matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val) {
    40a2:	1141                	addi	sp,sp,-16
    40a4:	c622                	sw	s0,12(sp)
                        A[i*N+j] += val;
    40a6:	0007d403          	lhu	s0,0(a5)
    40aa:	0027df03          	lhu	t5,2(a5)
    40ae:	0047de83          	lhu	t4,4(a5)
    40b2:	0067de03          	lhu	t3,6(a5)
    40b6:	0087d303          	lhu	t1,8(a5)
    40ba:	00a7d883          	lhu	a7,10(a5)
    40be:	00c7d803          	lhu	a6,12(a5)
    40c2:	00e7d703          	lhu	a4,14(a5)
    40c6:	9436                	add	s0,s0,a3
    40c8:	9f36                	add	t5,t5,a3
    40ca:	9eb6                	add	t4,t4,a3
    40cc:	9e36                	add	t3,t3,a3
    40ce:	9336                	add	t1,t1,a3
    40d0:	98b6                	add	a7,a7,a3
    40d2:	9836                	add	a6,a6,a3
    40d4:	9736                	add	a4,a4,a3
    40d6:	00879023          	sh	s0,0(a5)
    40da:	01e79123          	sh	t5,2(a5)
    40de:	01d79223          	sh	t4,4(a5)
    40e2:	01c79323          	sh	t3,6(a5)
    40e6:	00679423          	sh	t1,8(a5)
    40ea:	01179523          	sh	a7,10(a5)
    40ee:	01079623          	sh	a6,12(a5)
    40f2:	00e79723          	sh	a4,14(a5)
                for (j=0; j<N; j++) {
    40f6:	07c1                	addi	a5,a5,16
    40f8:	faf617e3          	bne	a2,a5,40a6 <matrix_add_const+0xc8>
        for (i=0; i<N; i++) {
    40fc:	0f85                	addi	t6,t6,1
    40fe:	40558633          	sub	a2,a1,t0
    4102:	0bf50463          	beq	a0,t6,41aa <matrix_add_const+0x1cc>
                for (j=0; j<N; j++) {
    4106:	407605b3          	sub	a1,a2,t2
    410a:	40b607b3          	sub	a5,a2,a1
    410e:	ffe78413          	addi	s0,a5,-2
    4112:	00145f13          	srli	t5,s0,0x1
    4116:	001f0e93          	addi	t4,t5,1
    411a:	007efe13          	andi	t3,t4,7
void matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val) {
    411e:	87ae                	mv	a5,a1
    4120:	f80e03e3          	beqz	t3,40a6 <matrix_add_const+0xc8>
    4124:	4305                	li	t1,1
    4126:	066e0463          	beq	t3,t1,418e <matrix_add_const+0x1b0>
    412a:	4889                	li	a7,2
    412c:	051e0a63          	beq	t3,a7,4180 <matrix_add_const+0x1a2>
    4130:	480d                	li	a6,3
    4132:	050e0063          	beq	t3,a6,4172 <matrix_add_const+0x194>
    4136:	4711                	li	a4,4
    4138:	02ee0663          	beq	t3,a4,4164 <matrix_add_const+0x186>
    413c:	4415                	li	s0,5
    413e:	008e0c63          	beq	t3,s0,4156 <matrix_add_const+0x178>
    4142:	4f19                	li	t5,6
    4144:	07ee1c63          	bne	t3,t5,41bc <matrix_add_const+0x1de>
                        A[i*N+j] += val;
    4148:	0007d303          	lhu	t1,0(a5)
                for (j=0; j<N; j++) {
    414c:	0789                	addi	a5,a5,2
                        A[i*N+j] += val;
    414e:	006688b3          	add	a7,a3,t1
    4152:	ff179f23          	sh	a7,-2(a5)
    4156:	0007d803          	lhu	a6,0(a5)
                for (j=0; j<N; j++) {
    415a:	0789                	addi	a5,a5,2
                        A[i*N+j] += val;
    415c:	01068733          	add	a4,a3,a6
    4160:	fee79f23          	sh	a4,-2(a5)
    4164:	0007d403          	lhu	s0,0(a5)
                for (j=0; j<N; j++) {
    4168:	0789                	addi	a5,a5,2
                        A[i*N+j] += val;
    416a:	00868f33          	add	t5,a3,s0
    416e:	ffe79f23          	sh	t5,-2(a5)
    4172:	0007de83          	lhu	t4,0(a5)
                for (j=0; j<N; j++) {
    4176:	0789                	addi	a5,a5,2
                        A[i*N+j] += val;
    4178:	01d68e33          	add	t3,a3,t4
    417c:	ffc79f23          	sh	t3,-2(a5)
    4180:	0007d303          	lhu	t1,0(a5)
                for (j=0; j<N; j++) {
    4184:	0789                	addi	a5,a5,2
                        A[i*N+j] += val;
    4186:	006688b3          	add	a7,a3,t1
    418a:	ff179f23          	sh	a7,-2(a5)
    418e:	0007d803          	lhu	a6,0(a5)
                for (j=0; j<N; j++) {
    4192:	0789                	addi	a5,a5,2
                        A[i*N+j] += val;
    4194:	01068733          	add	a4,a3,a6
    4198:	fee79f23          	sh	a4,-2(a5)
                for (j=0; j<N; j++) {
    419c:	f0f615e3          	bne	a2,a5,40a6 <matrix_add_const+0xc8>
        for (i=0; i<N; i++) {
    41a0:	0f85                	addi	t6,t6,1
    41a2:	40558633          	sub	a2,a1,t0
    41a6:	f7f510e3          	bne	a0,t6,4106 <matrix_add_const+0x128>
}
    41aa:	4432                	lw	s0,12(sp)
    41ac:	0141                	addi	sp,sp,16
    41ae:	8082                	ret
        for (i=0; i<N; i++) {
    41b0:	0f85                	addi	t6,t6,1
    41b2:	40558633          	sub	a2,a1,t0
    41b6:	e5f511e3          	bne	a0,t6,3ff8 <matrix_add_const+0x1a>
    41ba:	8082                	ret
                        A[i*N+j] += val;
    41bc:	0005de83          	lhu	t4,0(a1)
                for (j=0; j<N; j++) {
    41c0:	00258793          	addi	a5,a1,2
                        A[i*N+j] += val;
    41c4:	01d68e33          	add	t3,a3,t4
    41c8:	01c59023          	sh	t3,0(a1)
                for (j=0; j<N; j++) {
    41cc:	bfb5                	j	4148 <matrix_add_const+0x16a>

000041ce <matrix_mul_vect>:
        for (i=0; i<N; i++) {
    41ce:	18050d63          	beqz	a0,4368 <matrix_mul_vect+0x19a>
void matrix_mul_vect(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B) {
    41d2:	7179                	addi	sp,sp,-48
    41d4:	00251e93          	slli	t4,a0,0x2
    41d8:	00151313          	slli	t1,a0,0x1
    41dc:	d622                	sw	s0,44(sp)
    41de:	d426                	sw	s1,40(sp)
    41e0:	d24a                	sw	s2,36(sp)
    41e2:	d04e                	sw	s3,32(sp)
    41e4:	ce52                	sw	s4,28(sp)
    41e6:	cc56                	sw	s5,24(sp)
    41e8:	ca5a                	sw	s6,20(sp)
    41ea:	c85e                	sw	s7,16(sp)
    41ec:	c662                	sw	s8,12(sp)
    41ee:	c466                	sw	s9,8(sp)
    41f0:	88ae                	mv	a7,a1
    41f2:	9eae                	add	t4,t4,a1
    41f4:	9336                	add	t1,t1,a3
        for (i=0; i<N; i++) {
    41f6:	4e01                	li	t3,0
                for (j=0; j<N; j++) {
    41f8:	40d305b3          	sub	a1,t1,a3
    41fc:	ffe58293          	addi	t0,a1,-2
    4200:	0012d393          	srli	t2,t0,0x1
    4204:	00138413          	addi	s0,t2,1
    4208:	001e1793          	slli	a5,t3,0x1
    420c:	00747493          	andi	s1,s0,7
    4210:	97b2                	add	a5,a5,a2
        for (i=0; i<N; i++) {
    4212:	8736                	mv	a4,a3
    4214:	4801                	li	a6,0
    4216:	c4c5                	beqz	s1,42be <matrix_mul_vect+0xf0>
    4218:	4f05                	li	t5,1
    421a:	09e48763          	beq	s1,t5,42a8 <matrix_mul_vect+0xda>
    421e:	4909                	li	s2,2
    4220:	07248b63          	beq	s1,s2,4296 <matrix_mul_vect+0xc8>
    4224:	498d                	li	s3,3
    4226:	05348f63          	beq	s1,s3,4284 <matrix_mul_vect+0xb6>
    422a:	4a11                	li	s4,4
    422c:	05448363          	beq	s1,s4,4272 <matrix_mul_vect+0xa4>
    4230:	4a95                	li	s5,5
    4232:	03548763          	beq	s1,s5,4260 <matrix_mul_vect+0x92>
    4236:	4b19                	li	s6,6
    4238:	01648b63          	beq	s1,s6,424e <matrix_mul_vect+0x80>
                        C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
    423c:	00079803          	lh	a6,0(a5)
    4240:	00069b83          	lh	s7,0(a3)
                for (j=0; j<N; j++) {
    4244:	0789                	addi	a5,a5,2
    4246:	00268713          	addi	a4,a3,2
                        C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
    424a:	03780833          	mul	a6,a6,s7
    424e:	00079c03          	lh	s8,0(a5)
    4252:	00071c83          	lh	s9,0(a4)
                for (j=0; j<N; j++) {
    4256:	0789                	addi	a5,a5,2
    4258:	0709                	addi	a4,a4,2
                        C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
    425a:	039c0fb3          	mul	t6,s8,s9
    425e:	987e                	add	a6,a6,t6
    4260:	00079583          	lh	a1,0(a5)
    4264:	00071283          	lh	t0,0(a4)
                for (j=0; j<N; j++) {
    4268:	0789                	addi	a5,a5,2
    426a:	0709                	addi	a4,a4,2
                        C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
    426c:	025583b3          	mul	t2,a1,t0
    4270:	981e                	add	a6,a6,t2
    4272:	00079403          	lh	s0,0(a5)
    4276:	00071483          	lh	s1,0(a4)
                for (j=0; j<N; j++) {
    427a:	0789                	addi	a5,a5,2
    427c:	0709                	addi	a4,a4,2
                        C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
    427e:	02940f33          	mul	t5,s0,s1
    4282:	987a                	add	a6,a6,t5
    4284:	00079903          	lh	s2,0(a5)
    4288:	00071983          	lh	s3,0(a4)
                for (j=0; j<N; j++) {
    428c:	0789                	addi	a5,a5,2
    428e:	0709                	addi	a4,a4,2
                        C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
    4290:	03390a33          	mul	s4,s2,s3
    4294:	9852                	add	a6,a6,s4
    4296:	00079a83          	lh	s5,0(a5)
    429a:	00071b03          	lh	s6,0(a4)
                for (j=0; j<N; j++) {
    429e:	0789                	addi	a5,a5,2
    42a0:	0709                	addi	a4,a4,2
                        C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
    42a2:	036a8bb3          	mul	s7,s5,s6
    42a6:	985e                	add	a6,a6,s7
    42a8:	00079c03          	lh	s8,0(a5)
    42ac:	00071c83          	lh	s9,0(a4)
                for (j=0; j<N; j++) {
    42b0:	0709                	addi	a4,a4,2
    42b2:	0789                	addi	a5,a5,2
                        C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
    42b4:	039c0fb3          	mul	t6,s8,s9
    42b8:	987e                	add	a6,a6,t6
                for (j=0; j<N; j++) {
    42ba:	08e30563          	beq	t1,a4,4344 <matrix_mul_vect+0x176>
                        C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
    42be:	00071283          	lh	t0,0(a4)
    42c2:	00079583          	lh	a1,0(a5)
    42c6:	00271c83          	lh	s9,2(a4)
    42ca:	00279a83          	lh	s5,2(a5)
    42ce:	00479903          	lh	s2,4(a5)
    42d2:	00471c03          	lh	s8,4(a4)
    42d6:	025585b3          	mul	a1,a1,t0
    42da:	00679403          	lh	s0,6(a5)
    42de:	00671b83          	lh	s7,6(a4)
    42e2:	00879383          	lh	t2,8(a5)
    42e6:	00871b03          	lh	s6,8(a4)
    42ea:	00a79283          	lh	t0,10(a5)
    42ee:	00a71a03          	lh	s4,10(a4)
    42f2:	00c79f83          	lh	t6,12(a5)
    42f6:	00c71983          	lh	s3,12(a4)
    42fa:	00e79f03          	lh	t5,14(a5)
    42fe:	039a8ab3          	mul	s5,s5,s9
    4302:	00e71483          	lh	s1,14(a4)
    4306:	982e                	add	a6,a6,a1
                for (j=0; j<N; j++) {
    4308:	0741                	addi	a4,a4,16
    430a:	07c1                	addi	a5,a5,16
                        C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
    430c:	03890cb3          	mul	s9,s2,s8
    4310:	01580933          	add	s2,a6,s5
    4314:	03740c33          	mul	s8,s0,s7
    4318:	01990433          	add	s0,s2,s9
    431c:	03638bb3          	mul	s7,t2,s6
    4320:	018405b3          	add	a1,s0,s8
    4324:	034283b3          	mul	t2,t0,s4
    4328:	01758b33          	add	s6,a1,s7
    432c:	033f82b3          	mul	t0,t6,s3
    4330:	007b0a33          	add	s4,s6,t2
    4334:	029f0fb3          	mul	t6,t5,s1
    4338:	005a09b3          	add	s3,s4,t0
    433c:	01f98833          	add	a6,s3,t6
                for (j=0; j<N; j++) {
    4340:	f6e31fe3          	bne	t1,a4,42be <matrix_mul_vect+0xf0>
    4344:	0108a023          	sw	a6,0(a7)
        for (i=0; i<N; i++) {
    4348:	0891                	addi	a7,a7,4
    434a:	9e2a                	add	t3,t3,a0
    434c:	eb1e96e3          	bne	t4,a7,41f8 <matrix_mul_vect+0x2a>
}
    4350:	5432                	lw	s0,44(sp)
    4352:	54a2                	lw	s1,40(sp)
    4354:	5912                	lw	s2,36(sp)
    4356:	5982                	lw	s3,32(sp)
    4358:	4a72                	lw	s4,28(sp)
    435a:	4ae2                	lw	s5,24(sp)
    435c:	4b52                	lw	s6,20(sp)
    435e:	4bc2                	lw	s7,16(sp)
    4360:	4c32                	lw	s8,12(sp)
    4362:	4ca2                	lw	s9,8(sp)
    4364:	6145                	addi	sp,sp,48
    4366:	8082                	ret
    4368:	8082                	ret

0000436a <matrix_mul_matrix>:
        for (i=0; i<N; i++) {
    436a:	1e050263          	beqz	a0,454e <matrix_mul_matrix+0x1e4>
void matrix_mul_matrix(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B) {
    436e:	7139                	addi	sp,sp,-64
    4370:	83b2                	mv	t2,a2
    4372:	00151613          	slli	a2,a0,0x1
    4376:	dc26                	sw	s1,56(sp)
    4378:	da4a                	sw	s2,52(sp)
    437a:	d84e                	sw	s3,48(sp)
    437c:	de22                	sw	s0,60(sp)
    437e:	89b6                	mv	s3,a3
    4380:	d652                	sw	s4,44(sp)
    4382:	d456                	sw	s5,40(sp)
    4384:	d25a                	sw	s6,36(sp)
    4386:	d05e                	sw	s7,32(sp)
    4388:	ce62                	sw	s8,28(sp)
    438a:	cc66                	sw	s9,24(sp)
    438c:	ca6a                	sw	s10,20(sp)
    438e:	c86e                	sw	s11,16(sp)
    4390:	892a                	mv	s2,a0
    4392:	00c38fb3          	add	t6,t2,a2
        for (i=0; i<N; i++) {
    4396:	4681                	li	a3,0
    4398:	4481                	li	s1,0
                for (j=0; j<N; j++) {
    439a:	00269413          	slli	s0,a3,0x2
    439e:	942e                	add	s0,s0,a1
    43a0:	82ce                	mv	t0,s3
    43a2:	4a01                	li	s4,0
    43a4:	c62e                	sw	a1,12(sp)
                        for(k=0;k<N;k++)
    43a6:	407f8833          	sub	a6,t6,t2
    43aa:	ffe80313          	addi	t1,a6,-2
    43ae:	00135513          	srli	a0,t1,0x1
    43b2:	00150593          	addi	a1,a0,1
    43b6:	0075f713          	andi	a4,a1,7
                for (j=0; j<N; j++) {
    43ba:	851e                	mv	a0,t2
    43bc:	8596                	mv	a1,t0
    43be:	4781                	li	a5,0
    43c0:	c74d                	beqz	a4,446a <matrix_mul_matrix+0x100>
    43c2:	4885                	li	a7,1
    43c4:	09170863          	beq	a4,a7,4454 <matrix_mul_matrix+0xea>
    43c8:	4a89                	li	s5,2
    43ca:	07570c63          	beq	a4,s5,4442 <matrix_mul_matrix+0xd8>
    43ce:	4b0d                	li	s6,3
    43d0:	07670063          	beq	a4,s6,4430 <matrix_mul_matrix+0xc6>
    43d4:	4b91                	li	s7,4
    43d6:	05770463          	beq	a4,s7,441e <matrix_mul_matrix+0xb4>
    43da:	4c15                	li	s8,5
    43dc:	03870863          	beq	a4,s8,440c <matrix_mul_matrix+0xa2>
    43e0:	4c99                	li	s9,6
    43e2:	01970c63          	beq	a4,s9,43fa <matrix_mul_matrix+0x90>
                                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    43e6:	00039783          	lh	a5,0(t2)
    43ea:	00029d03          	lh	s10,0(t0)
                        for(k=0;k<N;k++)
    43ee:	00238513          	addi	a0,t2,2
    43f2:	00c285b3          	add	a1,t0,a2
                                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    43f6:	03a787b3          	mul	a5,a5,s10
    43fa:	00051d83          	lh	s11,0(a0)
    43fe:	00059e03          	lh	t3,0(a1)
                        for(k=0;k<N;k++)
    4402:	0509                	addi	a0,a0,2
    4404:	95b2                	add	a1,a1,a2
                                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    4406:	03cd8eb3          	mul	t4,s11,t3
    440a:	97f6                	add	a5,a5,t4
    440c:	00051f03          	lh	t5,0(a0)
    4410:	00059803          	lh	a6,0(a1)
                        for(k=0;k<N;k++)
    4414:	0509                	addi	a0,a0,2
    4416:	95b2                	add	a1,a1,a2
                                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    4418:	030f0333          	mul	t1,t5,a6
    441c:	979a                	add	a5,a5,t1
    441e:	00051703          	lh	a4,0(a0)
    4422:	00059883          	lh	a7,0(a1)
                        for(k=0;k<N;k++)
    4426:	0509                	addi	a0,a0,2
    4428:	95b2                	add	a1,a1,a2
                                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    442a:	03170ab3          	mul	s5,a4,a7
    442e:	97d6                	add	a5,a5,s5
    4430:	00051b03          	lh	s6,0(a0)
    4434:	00059b83          	lh	s7,0(a1)
                        for(k=0;k<N;k++)
    4438:	0509                	addi	a0,a0,2
    443a:	95b2                	add	a1,a1,a2
                                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    443c:	037b0c33          	mul	s8,s6,s7
    4440:	97e2                	add	a5,a5,s8
    4442:	00051c83          	lh	s9,0(a0)
    4446:	00059d03          	lh	s10,0(a1)
                        for(k=0;k<N;k++)
    444a:	0509                	addi	a0,a0,2
    444c:	95b2                	add	a1,a1,a2
                                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    444e:	03ac8db3          	mul	s11,s9,s10
    4452:	97ee                	add	a5,a5,s11
    4454:	00051e03          	lh	t3,0(a0)
    4458:	00059e83          	lh	t4,0(a1)
                        for(k=0;k<N;k++)
    445c:	0509                	addi	a0,a0,2
    445e:	95b2                	add	a1,a1,a2
                                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    4460:	03de0f33          	mul	t5,t3,t4
    4464:	97fa                	add	a5,a5,t5
                        for(k=0;k<N;k++)
    4466:	0aaf8363          	beq	t6,a0,450c <matrix_mul_matrix+0x1a2>
    446a:	00c58333          	add	t1,a1,a2
                                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    446e:	00059703          	lh	a4,0(a1)
    4472:	00051803          	lh	a6,0(a0)
    4476:	00031b83          	lh	s7,0(t1)
    447a:	00251b03          	lh	s6,2(a0)
    447e:	02e80833          	mul	a6,a6,a4
                        for(k=0;k<N;k++)
    4482:	00c308b3          	add	a7,t1,a2
    4486:	00c88c33          	add	s8,a7,a2
                                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    448a:	00089a83          	lh	s5,0(a7)
    448e:	00451d83          	lh	s11,4(a0)
    4492:	000c1d03          	lh	s10,0(s8)
                        for(k=0;k<N;k++)
    4496:	00cc0cb3          	add	s9,s8,a2
                                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    449a:	00651f03          	lh	t5,6(a0)
                        for(k=0;k<N;k++)
    449e:	00cc85b3          	add	a1,s9,a2
                                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    44a2:	00851e83          	lh	t4,8(a0)
    44a6:	037b0b33          	mul	s6,s6,s7
    44aa:	000c9c83          	lh	s9,0(s9)
    44ae:	00a51e03          	lh	t3,10(a0)
    44b2:	00059c03          	lh	s8,0(a1)
                        for(k=0;k<N;k++)
    44b6:	00c58733          	add	a4,a1,a2
                                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    44ba:	00c51303          	lh	t1,12(a0)
    44be:	00071b83          	lh	s7,0(a4)
                        for(k=0;k<N;k++)
    44c2:	00c705b3          	add	a1,a4,a2
                                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    44c6:	00e51883          	lh	a7,14(a0)
    44ca:	00059703          	lh	a4,0(a1)
    44ce:	035d8db3          	mul	s11,s11,s5
    44d2:	97c2                	add	a5,a5,a6
    44d4:	01678ab3          	add	s5,a5,s6
                        for(k=0;k<N;k++)
    44d8:	0541                	addi	a0,a0,16
    44da:	95b2                	add	a1,a1,a2
                                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    44dc:	03af0f33          	mul	t5,t5,s10
    44e0:	01ba8833          	add	a6,s5,s11
    44e4:	039e8d33          	mul	s10,t4,s9
    44e8:	01e80eb3          	add	t4,a6,t5
    44ec:	038e0cb3          	mul	s9,t3,s8
    44f0:	01ae8e33          	add	t3,t4,s10
    44f4:	03730c33          	mul	s8,t1,s7
    44f8:	019e0333          	add	t1,t3,s9
    44fc:	02e88b33          	mul	s6,a7,a4
    4500:	01830bb3          	add	s7,t1,s8
    4504:	016b87b3          	add	a5,s7,s6
                        for(k=0;k<N;k++)
    4508:	f6af91e3          	bne	t6,a0,446a <matrix_mul_matrix+0x100>
    450c:	c01c                	sw	a5,0(s0)
                for (j=0; j<N; j++) {
    450e:	001a0513          	addi	a0,s4,1
    4512:	0411                	addi	s0,s0,4
    4514:	0289                	addi	t0,t0,2
    4516:	00a90463          	beq	s2,a0,451e <matrix_mul_matrix+0x1b4>
    451a:	8a2a                	mv	s4,a0
    451c:	b569                	j	43a6 <matrix_mul_matrix+0x3c>
        for (i=0; i<N; i++) {
    451e:	45b2                	lw	a1,12(sp)
    4520:	00148413          	addi	s0,s1,1
    4524:	93b2                	add	t2,t2,a2
    4526:	96ca                	add	a3,a3,s2
    4528:	9fb2                	add	t6,t6,a2
    452a:	01448463          	beq	s1,s4,4532 <matrix_mul_matrix+0x1c8>
    452e:	84a2                	mv	s1,s0
    4530:	b5ad                	j	439a <matrix_mul_matrix+0x30>
}
    4532:	5472                	lw	s0,60(sp)
    4534:	54e2                	lw	s1,56(sp)
    4536:	5952                	lw	s2,52(sp)
    4538:	59c2                	lw	s3,48(sp)
    453a:	5a32                	lw	s4,44(sp)
    453c:	5aa2                	lw	s5,40(sp)
    453e:	5b12                	lw	s6,36(sp)
    4540:	5b82                	lw	s7,32(sp)
    4542:	4c72                	lw	s8,28(sp)
    4544:	4ce2                	lw	s9,24(sp)
    4546:	4d52                	lw	s10,20(sp)
    4548:	4dc2                	lw	s11,16(sp)
    454a:	6121                	addi	sp,sp,64
    454c:	8082                	ret
    454e:	8082                	ret

00004550 <matrix_mul_matrix_bitextract>:
        for (i=0; i<N; i++) {
    4550:	1a050363          	beqz	a0,46f6 <matrix_mul_matrix_bitextract+0x1a6>
void matrix_mul_matrix_bitextract(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B) {
    4554:	1101                	addi	sp,sp,-32
    4556:	00151813          	slli	a6,a0,0x1
    455a:	ce22                	sw	s0,28(sp)
    455c:	cc26                	sw	s1,24(sp)
    455e:	ca4a                	sw	s2,20(sp)
    4560:	c84e                	sw	s3,16(sp)
    4562:	c652                	sw	s4,12(sp)
    4564:	c456                	sw	s5,8(sp)
    4566:	c25a                	sw	s6,4(sp)
    4568:	8faa                	mv	t6,a0
    456a:	842e                	mv	s0,a1
    456c:	84b6                	mv	s1,a3
    456e:	8eb2                	mv	t4,a2
    4570:	010608b3          	add	a7,a2,a6
        for (i=0; i<N; i++) {
    4574:	4281                	li	t0,0
    4576:	4381                	li	t2,0
                for (j=0; j<N; j++) {
    4578:	00229e13          	slli	t3,t0,0x2
    457c:	9e22                	add	t3,t3,s0
    457e:	8326                	mv	t1,s1
    4580:	4f01                	li	t5,0
                        for(k=0;k<N;k++)
    4582:	41d887b3          	sub	a5,a7,t4
    4586:	ffe78513          	addi	a0,a5,-2
    458a:	00155593          	srli	a1,a0,0x1
    458e:	00158613          	addi	a2,a1,1
    4592:	00367993          	andi	s3,a2,3
                for (j=0; j<N; j++) {
    4596:	851a                	mv	a0,t1
    4598:	8776                	mv	a4,t4
    459a:	4901                	li	s2,0
    459c:	08098463          	beqz	s3,4624 <matrix_mul_matrix_bitextract+0xd4>
    45a0:	4685                	li	a3,1
    45a2:	04d98c63          	beq	s3,a3,45fa <matrix_mul_matrix_bitextract+0xaa>
    45a6:	4a09                	li	s4,2
    45a8:	03498663          	beq	s3,s4,45d4 <matrix_mul_matrix_bitextract+0x84>
                                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    45ac:	000e9903          	lh	s2,0(t4)
    45b0:	00031a83          	lh	s5,0(t1)
                        for(k=0;k<N;k++)
    45b4:	002e8713          	addi	a4,t4,2
    45b8:	01030533          	add	a0,t1,a6
                                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    45bc:	03590b33          	mul	s6,s2,s5
                                C[i*N+j]+=bit_extract(tmp,2,4)*bit_extract(tmp,5,7);
    45c0:	402b5593          	srai	a1,s6,0x2
    45c4:	405b5793          	srai	a5,s6,0x5
    45c8:	00f5f613          	andi	a2,a1,15
    45cc:	07f7f993          	andi	s3,a5,127
    45d0:	03360933          	mul	s2,a2,s3
                                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    45d4:	00071a03          	lh	s4,0(a4)
    45d8:	00051683          	lh	a3,0(a0)
                        for(k=0;k<N;k++)
    45dc:	0709                	addi	a4,a4,2
    45de:	9542                	add	a0,a0,a6
                                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    45e0:	02da0ab3          	mul	s5,s4,a3
                                C[i*N+j]+=bit_extract(tmp,2,4)*bit_extract(tmp,5,7);
    45e4:	402adb13          	srai	s6,s5,0x2
    45e8:	405ad593          	srai	a1,s5,0x5
    45ec:	00fb7613          	andi	a2,s6,15
    45f0:	07f5f793          	andi	a5,a1,127
    45f4:	02f609b3          	mul	s3,a2,a5
    45f8:	994e                	add	s2,s2,s3
                                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    45fa:	00071a03          	lh	s4,0(a4)
    45fe:	00051683          	lh	a3,0(a0)
                        for(k=0;k<N;k++)
    4602:	0709                	addi	a4,a4,2
    4604:	9542                	add	a0,a0,a6
                                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    4606:	02da0ab3          	mul	s5,s4,a3
                                C[i*N+j]+=bit_extract(tmp,2,4)*bit_extract(tmp,5,7);
    460a:	402adb13          	srai	s6,s5,0x2
    460e:	405ad593          	srai	a1,s5,0x5
    4612:	00fb7613          	andi	a2,s6,15
    4616:	07f5f793          	andi	a5,a1,127
    461a:	02f609b3          	mul	s3,a2,a5
    461e:	994e                	add	s2,s2,s3
                        for(k=0;k<N;k++)
    4620:	08e88f63          	beq	a7,a4,46be <matrix_mul_matrix_bitextract+0x16e>
    4624:	01050a33          	add	s4,a0,a6
                                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    4628:	00071683          	lh	a3,0(a4)
    462c:	00051a83          	lh	s5,0(a0)
    4630:	000a1b03          	lh	s6,0(s4)
                        for(k=0;k<N;k++)
    4634:	010a07b3          	add	a5,s4,a6
                                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    4638:	00271583          	lh	a1,2(a4)
    463c:	00079a03          	lh	s4,0(a5)
                        for(k=0;k<N;k++)
    4640:	01078533          	add	a0,a5,a6
                                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    4644:	00471603          	lh	a2,4(a4)
    4648:	035689b3          	mul	s3,a3,s5
    464c:	00051a83          	lh	s5,0(a0)
    4650:	00671683          	lh	a3,6(a4)
                        for(k=0;k<N;k++)
    4654:	0721                	addi	a4,a4,8
    4656:	9542                	add	a0,a0,a6
                                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    4658:	036585b3          	mul	a1,a1,s6
                                C[i*N+j]+=bit_extract(tmp,2,4)*bit_extract(tmp,5,7);
    465c:	4029d793          	srai	a5,s3,0x2
    4660:	4059db13          	srai	s6,s3,0x5
    4664:	07fb7993          	andi	s3,s6,127
    4668:	8bbd                	andi	a5,a5,15
                                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    466a:	03460633          	mul	a2,a2,s4
                                C[i*N+j]+=bit_extract(tmp,2,4)*bit_extract(tmp,5,7);
    466e:	4025da13          	srai	s4,a1,0x2
    4672:	8595                	srai	a1,a1,0x5
    4674:	00fa7b13          	andi	s6,s4,15
    4678:	07f5fa13          	andi	s4,a1,127
                                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    467c:	035686b3          	mul	a3,a3,s5
                                C[i*N+j]+=bit_extract(tmp,2,4)*bit_extract(tmp,5,7);
    4680:	40265a93          	srai	s5,a2,0x2
    4684:	8615                	srai	a2,a2,0x5
    4686:	00faf593          	andi	a1,s5,15
    468a:	07f67a93          	andi	s5,a2,127
    468e:	033787b3          	mul	a5,a5,s3
    4692:	4026d993          	srai	s3,a3,0x2
    4696:	8695                	srai	a3,a3,0x5
    4698:	00f9f613          	andi	a2,s3,15
    469c:	07f6f993          	andi	s3,a3,127
    46a0:	034b0b33          	mul	s6,s6,s4
    46a4:	993e                	add	s2,s2,a5
    46a6:	03558a33          	mul	s4,a1,s5
    46aa:	016905b3          	add	a1,s2,s6
    46ae:	03360ab3          	mul	s5,a2,s3
    46b2:	014587b3          	add	a5,a1,s4
    46b6:	01578933          	add	s2,a5,s5
                        for(k=0;k<N;k++)
    46ba:	f6e895e3          	bne	a7,a4,4624 <matrix_mul_matrix_bitextract+0xd4>
    46be:	012e2023          	sw	s2,0(t3)
                for (j=0; j<N; j++) {
    46c2:	001f0713          	addi	a4,t5,1
    46c6:	0e11                	addi	t3,t3,4
    46c8:	0309                	addi	t1,t1,2
    46ca:	00ef8463          	beq	t6,a4,46d2 <matrix_mul_matrix_bitextract+0x182>
    46ce:	8f3a                	mv	t5,a4
    46d0:	bd4d                	j	4582 <matrix_mul_matrix_bitextract+0x32>
        for (i=0; i<N; i++) {
    46d2:	00138e13          	addi	t3,t2,1
    46d6:	9ec2                	add	t4,t4,a6
    46d8:	92fe                	add	t0,t0,t6
    46da:	98c2                	add	a7,a7,a6
    46dc:	01e38463          	beq	t2,t5,46e4 <matrix_mul_matrix_bitextract+0x194>
    46e0:	83f2                	mv	t2,t3
    46e2:	bd59                	j	4578 <matrix_mul_matrix_bitextract+0x28>
}
    46e4:	4472                	lw	s0,28(sp)
    46e6:	44e2                	lw	s1,24(sp)
    46e8:	4952                	lw	s2,20(sp)
    46ea:	49c2                	lw	s3,16(sp)
    46ec:	4a32                	lw	s4,12(sp)
    46ee:	4aa2                	lw	s5,8(sp)
    46f0:	4b12                	lw	s6,4(sp)
    46f2:	6105                	addi	sp,sp,32
    46f4:	8082                	ret
    46f6:	8082                	ret

000046f8 <core_init_state>:
        size--;
    46f8:	fff50313          	addi	t1,a0,-1
        while ((total+next+1)<size) {
    46fc:	4785                	li	a5,1
void core_init_state(ee_u32 size, ee_s16 seed, ee_u8 *p) {
    46fe:	88b2                	mv	a7,a2
        while ((total+next+1)<size) {
    4700:	1667f663          	bgeu	a5,t1,486c <core_init_state+0x174>
    4704:	0585                	addi	a1,a1,1
    4706:	01059693          	slli	a3,a1,0x10
    470a:	82c1                	srli	a3,a3,0x10
                if (next>0) {
    470c:	6641                	lui	a2,0x10
                                buf=intpat[(seed>>3) & 0x3];
    470e:	0036d293          	srli	t0,a3,0x3
                switch (seed & 0x7) {
    4712:	4e9d                	li	t4,7
    4714:	0076f713          	andi	a4,a3,7
        ee_u32 total=0,next=0,i;
    4718:	4801                	li	a6,0
                switch (seed & 0x7) {
    471a:	0a860613          	addi	a2,a2,168 # 100a8 <intpat>
    471e:	4591                	li	a1,4
    4720:	4e05                	li	t3,1
                        *(p+total+i)=',';
    4722:	02c00f13          	li	t5,44
                                buf=intpat[(seed>>3) & 0x3];
    4726:	0032f393          	andi	t2,t0,3
                switch (seed & 0x7) {
    472a:	07d70e63          	beq	a4,t4,47a6 <core_init_state+0xae>
    472e:	12e5e063          	bltu	a1,a4,484e <core_init_state+0x156>
    4732:	ffd70f93          	addi	t6,a4,-3
    4736:	010f9793          	slli	a5,t6,0x10
                                buf=floatpat[(seed>>3) & 0x3];
    473a:	00239293          	slli	t0,t2,0x2
                switch (seed & 0x7) {
    473e:	0107d713          	srli	a4,a5,0x10
                                buf=floatpat[(seed>>3) & 0x3];
    4742:	005603b3          	add	t2,a2,t0
                switch (seed & 0x7) {
    4746:	0eee6363          	bltu	t3,a4,482c <core_init_state+0x134>
                                buf=floatpat[(seed>>3) & 0x3];
    474a:	0103a703          	lw	a4,16(t2)
        while ((total+next+1)<size) {
    474e:	00168793          	addi	a5,a3,1
    4752:	01079393          	slli	t2,a5,0x10
    4756:	00980293          	addi	t0,a6,9
    475a:	0103d693          	srli	a3,t2,0x10
    475e:	0662f363          	bgeu	t0,t1,47c4 <core_init_state+0xcc>
                if (next>0) {
    4762:	00170793          	addi	a5,a4,1
    4766:	01088fb3          	add	t6,a7,a6
    476a:	40ff83b3          	sub	t2,t6,a5
    476e:	0033b793          	sltiu	a5,t2,3
    4772:	e7ad                	bnez	a5,47dc <core_init_state+0xe4>
    4774:	01f763b3          	or	t2,a4,t6
    4778:	0033f793          	andi	a5,t2,3
    477c:	e3a5                	bnez	a5,47dc <core_init_state+0xe4>
                                *(p+total+i)=buf[i];
    477e:	00072803          	lw	a6,0(a4)
    4782:	47a1                	li	a5,8
    4784:	010fa023          	sw	a6,0(t6)
    4788:	4358                	lw	a4,4(a4)
    478a:	00efa223          	sw	a4,4(t6)
                        *(p+total+i)=',';
    478e:	9fbe                	add	t6,t6,a5
    4790:	8816                	mv	a6,t0
    4792:	01ef8023          	sb	t5,0(t6)
                                buf=intpat[(seed>>3) & 0x3];
    4796:	0036d293          	srli	t0,a3,0x3
    479a:	0076f713          	andi	a4,a3,7
    479e:	0032f393          	andi	t2,t0,3
                switch (seed & 0x7) {
    47a2:	f9d716e3          	bne	a4,t4,472e <core_init_state+0x36>
                                buf=errpat[(seed>>3) & 0x3];
    47a6:	00239f93          	slli	t6,t2,0x2
    47aa:	01f607b3          	add	a5,a2,t6
    47ae:	5b98                	lw	a4,48(a5)
        while ((total+next+1)<size) {
    47b0:	00168793          	addi	a5,a3,1
    47b4:	01079393          	slli	t2,a5,0x10
    47b8:	00980293          	addi	t0,a6,9
    47bc:	0103d693          	srli	a3,t2,0x10
    47c0:	fa62e1e3          	bltu	t0,t1,4762 <core_init_state+0x6a>
        while (total<size) { /* fill the rest with 0 */
    47c4:	0aa87363          	bgeu	a6,a0,486a <core_init_state+0x172>
                *(p+total)=0;
    47c8:	00180313          	addi	t1,a6,1
    47cc:	4605                	li	a2,1
    47ce:	08657763          	bgeu	a0,t1,485c <core_init_state+0x164>
    47d2:	4581                	li	a1,0
    47d4:	01088533          	add	a0,a7,a6
    47d8:	0cb0306f          	j	80a2 <memset>
    47dc:	00180393          	addi	t2,a6,1
        while ((total+next+1)<size) {
    47e0:	47a1                	li	a5,8
                                *(p+total+i)=buf[i];
    47e2:	00074803          	lbu	a6,0(a4)
    47e6:	93c6                	add	t2,t2,a7
    47e8:	010f8023          	sb	a6,0(t6)
    47ec:	00174803          	lbu	a6,1(a4)
    47f0:	01038023          	sb	a6,0(t2)
    47f4:	00274383          	lbu	t2,2(a4)
    47f8:	007f8123          	sb	t2,2(t6)
    47fc:	00374803          	lbu	a6,3(a4)
    4800:	010f81a3          	sb	a6,3(t6)
                        for(i=0;i<next;i++)
    4804:	f8b785e3          	beq	a5,a1,478e <core_init_state+0x96>
                                *(p+total+i)=buf[i];
    4808:	00474383          	lbu	t2,4(a4)
    480c:	47a1                	li	a5,8
    480e:	007f8223          	sb	t2,4(t6)
    4812:	00574803          	lbu	a6,5(a4)
    4816:	010f82a3          	sb	a6,5(t6)
    481a:	00674383          	lbu	t2,6(a4)
    481e:	007f8323          	sb	t2,6(t6)
    4822:	00774703          	lbu	a4,7(a4)
    4826:	00ef83a3          	sb	a4,7(t6)
                        for(i=0;i<next;i++)
    482a:	b795                	j	478e <core_init_state+0x96>
        while ((total+next+1)<size) {
    482c:	0685                	addi	a3,a3,1
    482e:	01069f93          	slli	t6,a3,0x10
    4832:	00580293          	addi	t0,a6,5
                                buf=intpat[(seed>>3) & 0x3];
    4836:	0003a703          	lw	a4,0(t2)
        while ((total+next+1)<size) {
    483a:	010fd693          	srli	a3,t6,0x10
    483e:	00180393          	addi	t2,a6,1
    4842:	f862f1e3          	bgeu	t0,t1,47c4 <core_init_state+0xcc>
                                next=4;
    4846:	4791                	li	a5,4
    4848:	01088fb3          	add	t6,a7,a6
    484c:	bf59                	j	47e2 <core_init_state+0xea>
                                buf=scipat[(seed>>3) & 0x3];
    484e:	00239293          	slli	t0,t2,0x2
    4852:	005603b3          	add	t2,a2,t0
    4856:	0203a703          	lw	a4,32(t2)
                        break;
    485a:	bdd5                	j	474e <core_init_state+0x56>
                *(p+total)=0;
    485c:	41050633          	sub	a2,a0,a6
    4860:	4581                	li	a1,0
    4862:	01088533          	add	a0,a7,a6
    4866:	03d0306f          	j	80a2 <memset>
    486a:	8082                	ret
        ee_u32 total=0,next=0,i;
    486c:	4801                	li	a6,0
    486e:	bfa9                	j	47c8 <core_init_state+0xd0>

00004870 <core_state_transition>:
        ee_u8 *str=*instr;
    4870:	4118                	lw	a4,0(a0)
enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
    4872:	862a                	mv	a2,a0
        for( ; *str && state != CORE_INVALID; str++ ) {
    4874:	00074683          	lbu	a3,0(a4)
    4878:	20068d63          	beqz	a3,4a92 <core_state_transition+0x222>
                if (NEXT_SYMBOL==',') /* end of this input */ {
    487c:	02c00793          	li	a5,44
    4880:	4501                	li	a0,0
    4882:	18f68e63          	beq	a3,a5,4a1e <core_state_transition+0x1ae>
        retval = ((c>='0') & (c<='9')) ? 1 : 0;
    4886:	fd068513          	addi	a0,a3,-48
    488a:	0ff57293          	zext.b	t0,a0
    488e:	4825                	li	a6,9
    4890:	02587d63          	bgeu	a6,t0,48ca <core_state_transition+0x5a>
                        else if( NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-' ) {
    4894:	02d00313          	li	t1,45
    4898:	18668f63          	beq	a3,t1,4a36 <core_state_transition+0x1c6>
    489c:	02e00393          	li	t2,46
    48a0:	08768163          	beq	a3,t2,4922 <core_state_transition+0xb2>
    48a4:	02b00e93          	li	t4,43
    48a8:	19d68763          	beq	a3,t4,4a36 <core_state_transition+0x1c6>
                                transition_count[CORE_INVALID]++;
    48ac:	41d4                	lw	a3,4(a1)
                        transition_count[CORE_START]++;
    48ae:	0005a883          	lw	a7,0(a1)
        for( ; *str && state != CORE_INVALID; str++ ) {
    48b2:	0705                	addi	a4,a4,1
                                transition_count[CORE_INVALID]++;
    48b4:	00168e13          	addi	t3,a3,1
                        transition_count[CORE_START]++;
    48b8:	00188e93          	addi	t4,a7,1
                                transition_count[CORE_INVALID]++;
    48bc:	01c5a223          	sw	t3,4(a1)
                        transition_count[CORE_START]++;
    48c0:	01d5a023          	sw	t4,0(a1)
                                state = CORE_INVALID;
    48c4:	4505                	li	a0,1
        *instr=str;
    48c6:	c218                	sw	a4,0(a2)
}
    48c8:	8082                	ret
                        transition_count[CORE_START]++;
    48ca:	0005af03          	lw	t5,0(a1)
        for( ; *str && state != CORE_INVALID; str++ ) {
    48ce:	00170693          	addi	a3,a4,1
                        transition_count[CORE_START]++;
    48d2:	001f0f93          	addi	t6,t5,1
    48d6:	01f5a023          	sw	t6,0(a1)
        for( ; *str && state != CORE_INVALID; str++ ) {
    48da:	00174503          	lbu	a0,1(a4)
    48de:	1a050463          	beqz	a0,4a86 <core_state_transition+0x216>
                if (NEXT_SYMBOL==',') /* end of this input */ {
    48e2:	12f50c63          	beq	a0,a5,4a1a <core_state_transition+0x1aa>
                        if( NEXT_SYMBOL == '.' ) {
    48e6:	02e00293          	li	t0,46
    48ea:	12550163          	beq	a0,t0,4a0c <core_state_transition+0x19c>
        retval = ((c>='0') & (c<='9')) ? 1 : 0;
    48ee:	fd050713          	addi	a4,a0,-48
    48f2:	0ff77813          	zext.b	a6,a4
    48f6:	47a5                	li	a5,9
    48f8:	0107ea63          	bltu	a5,a6,490c <core_state_transition+0x9c>
        for( ; *str && state != CORE_INVALID; str++ ) {
    48fc:	0016c503          	lbu	a0,1(a3)
    4900:	0685                	addi	a3,a3,1
    4902:	18050263          	beqz	a0,4a86 <core_state_transition+0x216>
                if (NEXT_SYMBOL==',') /* end of this input */ {
    4906:	02c00793          	li	a5,44
    490a:	bfe1                	j	48e2 <core_state_transition+0x72>
                                transition_count[CORE_INT]++;
    490c:	0105a303          	lw	t1,16(a1)
        for( ; *str && state != CORE_INVALID; str++ ) {
    4910:	00168713          	addi	a4,a3,1
                                state = CORE_INVALID;
    4914:	4505                	li	a0,1
                                transition_count[CORE_INT]++;
    4916:	00130393          	addi	t2,t1,1
    491a:	0075a823          	sw	t2,16(a1)
        *instr=str;
    491e:	c218                	sw	a4,0(a2)
}
    4920:	8082                	ret
                        transition_count[CORE_START]++;
    4922:	0005a883          	lw	a7,0(a1)
        for( ; *str && state != CORE_INVALID; str++ ) {
    4926:	00170693          	addi	a3,a4,1
                        transition_count[CORE_START]++;
    492a:	00188e13          	addi	t3,a7,1
    492e:	01c5a023          	sw	t3,0(a1)
        for( ; *str && state != CORE_INVALID; str++ ) {
    4932:	00174e83          	lbu	t4,1(a4)
    4936:	140e8b63          	beqz	t4,4a8c <core_state_transition+0x21c>
                if (NEXT_SYMBOL==',') /* end of this input */ {
    493a:	16fe8d63          	beq	t4,a5,4ab4 <core_state_transition+0x244>
                        if( NEXT_SYMBOL == 'E' || NEXT_SYMBOL == 'e' ) {
    493e:	0dfeff13          	andi	t5,t4,223
    4942:	04500f93          	li	t6,69
    4946:	03ff0163          	beq	t5,t6,4968 <core_state_transition+0xf8>
        retval = ((c>='0') & (c<='9')) ? 1 : 0;
    494a:	fd0e8293          	addi	t0,t4,-48
    494e:	0ff2f813          	zext.b	a6,t0
    4952:	4325                	li	t1,9
    4954:	0d036763          	bltu	t1,a6,4a22 <core_state_transition+0x1b2>
        for( ; *str && state != CORE_INVALID; str++ ) {
    4958:	0016ce83          	lbu	t4,1(a3)
    495c:	0685                	addi	a3,a3,1
    495e:	120e8763          	beqz	t4,4a8c <core_state_transition+0x21c>
                if (NEXT_SYMBOL==',') /* end of this input */ {
    4962:	02c00793          	li	a5,44
    4966:	bfd1                	j	493a <core_state_transition+0xca>
                                transition_count[CORE_FLOAT]++;
    4968:	49c8                	lw	a0,20(a1)
        for( ; *str && state != CORE_INVALID; str++ ) {
    496a:	00168713          	addi	a4,a3,1
                                transition_count[CORE_FLOAT]++;
    496e:	00150e13          	addi	t3,a0,1
    4972:	01c5aa23          	sw	t3,20(a1)
        for( ; *str && state != CORE_INVALID; str++ ) {
    4976:	0016ce83          	lbu	t4,1(a3)
    497a:	120e8063          	beqz	t4,4a9a <core_state_transition+0x22a>
                if (NEXT_SYMBOL==',') /* end of this input */ {
    497e:	02c00f13          	li	t5,44
    4982:	11ee8e63          	beq	t4,t5,4a9e <core_state_transition+0x22e>
                                transition_count[CORE_S2]++;
    4986:	45d8                	lw	a4,12(a1)
                        if( NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-' ) {
    4988:	fd5e8793          	addi	a5,t4,-43
    498c:	0fd7ff93          	andi	t6,a5,253
                                transition_count[CORE_S2]++;
    4990:	00170293          	addi	t0,a4,1
    4994:	0055a623          	sw	t0,12(a1)
                        if( NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-' ) {
    4998:	000f8763          	beqz	t6,49a6 <core_state_transition+0x136>
        for( ; *str && state != CORE_INVALID; str++ ) {
    499c:	00268713          	addi	a4,a3,2
                                state = CORE_INVALID;
    49a0:	4505                	li	a0,1
        *instr=str;
    49a2:	c218                	sw	a4,0(a2)
}
    49a4:	8082                	ret
        for( ; *str && state != CORE_INVALID; str++ ) {
    49a6:	0026c803          	lbu	a6,2(a3)
    49aa:	00268713          	addi	a4,a3,2
    49ae:	0e080463          	beqz	a6,4a96 <core_state_transition+0x226>
                if (NEXT_SYMBOL==',') /* end of this input */ {
    49b2:	0fe80963          	beq	a6,t5,4aa4 <core_state_transition+0x234>
                                transition_count[CORE_EXPONENT]++;
    49b6:	0185a303          	lw	t1,24(a1)
        retval = ((c>='0') & (c<='9')) ? 1 : 0;
    49ba:	fd080393          	addi	t2,a6,-48
    49be:	0ff3f893          	zext.b	a7,t2
                                transition_count[CORE_EXPONENT]++;
    49c2:	00130513          	addi	a0,t1,1
        retval = ((c>='0') & (c<='9')) ? 1 : 0;
    49c6:	4e25                	li	t3,9
                                transition_count[CORE_EXPONENT]++;
    49c8:	cd88                	sw	a0,24(a1)
        retval = ((c>='0') & (c<='9')) ? 1 : 0;
    49ca:	011e7763          	bgeu	t3,a7,49d8 <core_state_transition+0x168>
        for( ; *str && state != CORE_INVALID; str++ ) {
    49ce:	00368713          	addi	a4,a3,3
                                state = CORE_INVALID;
    49d2:	4505                	li	a0,1
        *instr=str;
    49d4:	c218                	sw	a4,0(a2)
}
    49d6:	8082                	ret
        retval = ((c>='0') & (c<='9')) ? 1 : 0;
    49d8:	42a5                	li	t0,9
        for( ; *str && state != CORE_INVALID; str++ ) {
    49da:	00174683          	lbu	a3,1(a4)
        retval = ((c>='0') & (c<='9')) ? 1 : 0;
    49de:	8eba                	mv	t4,a4
                if (NEXT_SYMBOL==',') /* end of this input */ {
    49e0:	02c00f13          	li	t5,44
        retval = ((c>='0') & (c<='9')) ? 1 : 0;
    49e4:	fd068793          	addi	a5,a3,-48
        for( ; *str && state != CORE_INVALID; str++ ) {
    49e8:	0705                	addi	a4,a4,1
        retval = ((c>='0') & (c<='9')) ? 1 : 0;
    49ea:	0ff7ff93          	zext.b	t6,a5
        for( ; *str && state != CORE_INVALID; str++ ) {
    49ee:	c2e9                	beqz	a3,4ab0 <core_state_transition+0x240>
                if (NEXT_SYMBOL==',') /* end of this input */ {
    49f0:	0be68d63          	beq	a3,t5,4aaa <core_state_transition+0x23a>
        retval = ((c>='0') & (c<='9')) ? 1 : 0;
    49f4:	fff2f3e3          	bgeu	t0,t6,49da <core_state_transition+0x16a>
                                transition_count[CORE_INVALID]++;
    49f8:	0045a803          	lw	a6,4(a1)
        for( ; *str && state != CORE_INVALID; str++ ) {
    49fc:	002e8713          	addi	a4,t4,2
                                state = CORE_INVALID;
    4a00:	4505                	li	a0,1
                                transition_count[CORE_INVALID]++;
    4a02:	00180313          	addi	t1,a6,1
    4a06:	0065a223          	sw	t1,4(a1)
        for( ; *str && state != CORE_INVALID; str++ ) {
    4a0a:	bf11                	j	491e <core_state_transition+0xae>
                                transition_count[CORE_INT]++;
    4a0c:	0105a883          	lw	a7,16(a1)
    4a10:	00188e13          	addi	t3,a7,1
    4a14:	01c5a823          	sw	t3,16(a1)
    4a18:	b781                	j	4958 <core_state_transition+0xe8>
        for( ; *str && state != CORE_INVALID; str++ ) {
    4a1a:	8736                	mv	a4,a3
                if (NEXT_SYMBOL==',') /* end of this input */ {
    4a1c:	4511                	li	a0,4
                        str++;
    4a1e:	0705                	addi	a4,a4,1
                        break;
    4a20:	bdfd                	j	491e <core_state_transition+0xae>
                                transition_count[CORE_FLOAT]++;
    4a22:	0145a383          	lw	t2,20(a1)
        for( ; *str && state != CORE_INVALID; str++ ) {
    4a26:	00168713          	addi	a4,a3,1
                                state = CORE_INVALID;
    4a2a:	4505                	li	a0,1
                                transition_count[CORE_FLOAT]++;
    4a2c:	00138893          	addi	a7,t2,1
    4a30:	0115aa23          	sw	a7,20(a1)
        for( ; *str && state != CORE_INVALID; str++ ) {
    4a34:	b5ed                	j	491e <core_state_transition+0xae>
                        transition_count[CORE_START]++;
    4a36:	0005af03          	lw	t5,0(a1)
        for( ; *str && state != CORE_INVALID; str++ ) {
    4a3a:	00170693          	addi	a3,a4,1
                        transition_count[CORE_START]++;
    4a3e:	001f0f93          	addi	t6,t5,1
    4a42:	01f5a023          	sw	t6,0(a1)
        for( ; *str && state != CORE_INVALID; str++ ) {
    4a46:	00174283          	lbu	t0,1(a4)
    4a4a:	06028d63          	beqz	t0,4ac4 <core_state_transition+0x254>
                if (NEXT_SYMBOL==',') /* end of this input */ {
    4a4e:	06f28763          	beq	t0,a5,4abc <core_state_transition+0x24c>
                                transition_count[CORE_S1]++;
    4a52:	4598                	lw	a4,8(a1)
        retval = ((c>='0') & (c<='9')) ? 1 : 0;
    4a54:	fd028793          	addi	a5,t0,-48
    4a58:	0ff7f813          	zext.b	a6,a5
    4a5c:	4525                	li	a0,9
                                transition_count[CORE_S1]++;
    4a5e:	00170313          	addi	t1,a4,1
        retval = ((c>='0') & (c<='9')) ? 1 : 0;
    4a62:	01057c63          	bgeu	a0,a6,4a7a <core_state_transition+0x20a>
                        else if( NEXT_SYMBOL == '.' ) {
    4a66:	02e00393          	li	t2,46
    4a6a:	00728b63          	beq	t0,t2,4a80 <core_state_transition+0x210>
                                transition_count[CORE_S1]++;
    4a6e:	0065a423          	sw	t1,8(a1)
        for( ; *str && state != CORE_INVALID; str++ ) {
    4a72:	00168713          	addi	a4,a3,1
                                state = CORE_INVALID;
    4a76:	4505                	li	a0,1
    4a78:	b55d                	j	491e <core_state_transition+0xae>
                                transition_count[CORE_S1]++;
    4a7a:	0065a423          	sw	t1,8(a1)
    4a7e:	bdbd                	j	48fc <core_state_transition+0x8c>
                                transition_count[CORE_S1]++;
    4a80:	0065a423          	sw	t1,8(a1)
    4a84:	bdd1                	j	4958 <core_state_transition+0xe8>
        for( ; *str && state != CORE_INVALID; str++ ) {
    4a86:	8736                	mv	a4,a3
    4a88:	4511                	li	a0,4
    4a8a:	bd51                	j	491e <core_state_transition+0xae>
    4a8c:	8736                	mv	a4,a3
                                state = CORE_FLOAT;
    4a8e:	4515                	li	a0,5
    4a90:	b579                	j	491e <core_state_transition+0xae>
        enum CORE_STATE state=CORE_START;
    4a92:	4501                	li	a0,0
    4a94:	b569                	j	491e <core_state_transition+0xae>
                                state = CORE_EXPONENT;
    4a96:	4519                	li	a0,6
    4a98:	b559                	j	491e <core_state_transition+0xae>
                                state = CORE_S2;
    4a9a:	450d                	li	a0,3
    4a9c:	b549                	j	491e <core_state_transition+0xae>
    4a9e:	450d                	li	a0,3
                        str++;
    4aa0:	0705                	addi	a4,a4,1
                        break;
    4aa2:	bdb5                	j	491e <core_state_transition+0xae>
                                state = CORE_EXPONENT;
    4aa4:	4519                	li	a0,6
                        str++;
    4aa6:	0705                	addi	a4,a4,1
                        break;
    4aa8:	bd9d                	j	491e <core_state_transition+0xae>
                                state = CORE_SCIENTIFIC;
    4aaa:	451d                	li	a0,7
                        str++;
    4aac:	0705                	addi	a4,a4,1
                        break;
    4aae:	bd85                	j	491e <core_state_transition+0xae>
                                state = CORE_SCIENTIFIC;
    4ab0:	451d                	li	a0,7
    4ab2:	b5b5                	j	491e <core_state_transition+0xae>
        for( ; *str && state != CORE_INVALID; str++ ) {
    4ab4:	8736                	mv	a4,a3
                                state = CORE_FLOAT;
    4ab6:	4515                	li	a0,5
                        str++;
    4ab8:	0705                	addi	a4,a4,1
                        break;
    4aba:	b595                	j	491e <core_state_transition+0xae>
        for( ; *str && state != CORE_INVALID; str++ ) {
    4abc:	8736                	mv	a4,a3
                if (NEXT_SYMBOL==',') /* end of this input */ {
    4abe:	4509                	li	a0,2
                        str++;
    4ac0:	0705                	addi	a4,a4,1
                        break;
    4ac2:	bdb1                	j	491e <core_state_transition+0xae>
        for( ; *str && state != CORE_INVALID; str++ ) {
    4ac4:	8736                	mv	a4,a3
    4ac6:	4509                	li	a0,2
    4ac8:	bd99                	j	491e <core_state_transition+0xae>

00004aca <core_bench_state>:
{
    4aca:	7119                	addi	sp,sp,-128
    4acc:	dca2                	sw	s0,120(sp)
    4ace:	daa6                	sw	s1,116(sp)
    4ad0:	d8ca                	sw	s2,112(sp)
    4ad2:	d6ce                	sw	s3,108(sp)
    4ad4:	d4d2                	sw	s4,104(sp)
    4ad6:	d2d6                	sw	s5,100(sp)
    4ad8:	d0da                	sw	s6,96(sp)
    4ada:	cede                	sw	s7,92(sp)
    4adc:	de86                	sw	ra,124(sp)
    4ade:	892e                	mv	s2,a1
        while (*p!=0) {
    4ae0:	0005c583          	lbu	a1,0(a1)
        ee_u8 *p=memblock;
    4ae4:	c64a                	sw	s2,12(sp)
                final_counts[i]=track_counts[i]=0;
    4ae6:	d802                	sw	zero,48(sp)
    4ae8:	c802                	sw	zero,16(sp)
    4aea:	da02                	sw	zero,52(sp)
    4aec:	dc02                	sw	zero,56(sp)
    4aee:	de02                	sw	zero,60(sp)
    4af0:	c082                	sw	zero,64(sp)
    4af2:	c282                	sw	zero,68(sp)
    4af4:	c482                	sw	zero,72(sp)
    4af6:	c682                	sw	zero,76(sp)
    4af8:	ca02                	sw	zero,20(sp)
    4afa:	cc02                	sw	zero,24(sp)
    4afc:	ce02                	sw	zero,28(sp)
    4afe:	d002                	sw	zero,32(sp)
    4b00:	d202                	sw	zero,36(sp)
    4b02:	d402                	sw	zero,40(sp)
    4b04:	d602                	sw	zero,44(sp)
    4b06:	1804                	addi	s1,sp,48
{
    4b08:	8b2a                	mv	s6,a0
    4b0a:	8bb2                	mv	s7,a2
    4b0c:	8a36                	mv	s4,a3
    4b0e:	8aba                	mv	s5,a4
    4b10:	843e                	mv	s0,a5
    4b12:	00c10993          	addi	s3,sp,12
        while (*p!=0) {
    4b16:	4a0582e3          	beqz	a1,57ba <core_bench_state+0xcf0>
                enum CORE_STATE fstate=core_state_transition(&p,track_counts);
    4b1a:	85a6                	mv	a1,s1
    4b1c:	854e                	mv	a0,s3
    4b1e:	3b89                	jal	4870 <core_state_transition>
    4b20:	87aa                	mv	a5,a0
                final_counts[fstate]++;
    4b22:	00279293          	slli	t0,a5,0x2
    4b26:	05028313          	addi	t1,t0,80
    4b2a:	002303b3          	add	t2,t1,sp
        while (*p!=0) {
    4b2e:	46b2                	lw	a3,12(sp)
                final_counts[fstate]++;
    4b30:	fc03a703          	lw	a4,-64(t2)
                enum CORE_STATE fstate=core_state_transition(&p,track_counts);
    4b34:	85a6                	mv	a1,s1
        while (*p!=0) {
    4b36:	0006c603          	lbu	a2,0(a3)
                final_counts[fstate]++;
    4b3a:	00170813          	addi	a6,a4,1
    4b3e:	fd03a023          	sw	a6,-64(t2)
                enum CORE_STATE fstate=core_state_transition(&p,track_counts);
    4b42:	854e                	mv	a0,s3
        while (*p!=0) {
    4b44:	ce25                	beqz	a2,4bbc <core_bench_state+0xf2>
                enum CORE_STATE fstate=core_state_transition(&p,track_counts);
    4b46:	332d                	jal	4870 <core_state_transition>
    4b48:	88aa                	mv	a7,a0
                final_counts[fstate]++;
    4b4a:	00289e13          	slli	t3,a7,0x2
    4b4e:	050e0e93          	addi	t4,t3,80
    4b52:	002e8f33          	add	t5,t4,sp
        while (*p!=0) {
    4b56:	47b2                	lw	a5,12(sp)
                final_counts[fstate]++;
    4b58:	fc0f2f83          	lw	t6,-64(t5)
                enum CORE_STATE fstate=core_state_transition(&p,track_counts);
    4b5c:	85a6                	mv	a1,s1
        while (*p!=0) {
    4b5e:	0007c283          	lbu	t0,0(a5)
                final_counts[fstate]++;
    4b62:	001f8313          	addi	t1,t6,1
    4b66:	fc6f2023          	sw	t1,-64(t5)
                enum CORE_STATE fstate=core_state_transition(&p,track_counts);
    4b6a:	854e                	mv	a0,s3
        while (*p!=0) {
    4b6c:	04028863          	beqz	t0,4bbc <core_bench_state+0xf2>
                enum CORE_STATE fstate=core_state_transition(&p,track_counts);
    4b70:	3301                	jal	4870 <core_state_transition>
    4b72:	83aa                	mv	t2,a0
                final_counts[fstate]++;
    4b74:	00239713          	slli	a4,t2,0x2
    4b78:	05070693          	addi	a3,a4,80
    4b7c:	00268633          	add	a2,a3,sp
        while (*p!=0) {
    4b80:	48b2                	lw	a7,12(sp)
                final_counts[fstate]++;
    4b82:	fc062803          	lw	a6,-64(a2)
                enum CORE_STATE fstate=core_state_transition(&p,track_counts);
    4b86:	85a6                	mv	a1,s1
        while (*p!=0) {
    4b88:	0008ce03          	lbu	t3,0(a7)
                final_counts[fstate]++;
    4b8c:	00180e93          	addi	t4,a6,1
    4b90:	fdd62023          	sw	t4,-64(a2)
                enum CORE_STATE fstate=core_state_transition(&p,track_counts);
    4b94:	854e                	mv	a0,s3
        while (*p!=0) {
    4b96:	020e0363          	beqz	t3,4bbc <core_bench_state+0xf2>
                enum CORE_STATE fstate=core_state_transition(&p,track_counts);
    4b9a:	39d9                	jal	4870 <core_state_transition>
                final_counts[fstate]++;
    4b9c:	050a                	slli	a0,a0,0x2
    4b9e:	05050593          	addi	a1,a0,80
    4ba2:	00258f33          	add	t5,a1,sp
        while (*p!=0) {
    4ba6:	47b2                	lw	a5,12(sp)
                final_counts[fstate]++;
    4ba8:	fc0f2f83          	lw	t6,-64(t5)
        while (*p!=0) {
    4bac:	0007c283          	lbu	t0,0(a5)
                final_counts[fstate]++;
    4bb0:	001f8313          	addi	t1,t6,1
    4bb4:	fc6f2023          	sw	t1,-64(t5)
        while (*p!=0) {
    4bb8:	f60291e3          	bnez	t0,4b1a <core_bench_state+0x50>
        p=memblock;
    4bbc:	c64a                	sw	s2,12(sp)
        while (p < (memblock+blksize)) { /* insert some corruption */
    4bbe:	9b4a                	add	s6,s6,s2
    4bc0:	17697963          	bgeu	s2,s6,4d32 <core_bench_state+0x268>
    4bc4:	4085                	li	ra,1
    4bc6:	3a1a94e3          	bne	s5,ra,576e <core_bench_state+0xca4>
                if (*p!=',')
    4bca:	00094803          	lbu	a6,0(s2)
    4bce:	fff94893          	not	a7,s2
    4bd2:	011b0e33          	add	t3,s6,a7
    4bd6:	02c00e93          	li	t4,44
    4bda:	007e7513          	andi	a0,t3,7
    4bde:	01d80663          	beq	a6,t4,4bea <core_bench_state+0x120>
                        *p^=(ee_u8)seed1;
    4be2:	017845b3          	xor	a1,a6,s7
    4be6:	00b90023          	sb	a1,0(s2)
        while (p < (memblock+blksize)) { /* insert some corruption */
    4bea:	00190793          	addi	a5,s2,1
    4bee:	1367fc63          	bgeu	a5,s6,4d26 <core_bench_state+0x25c>
    4bf2:	c545                	beqz	a0,4c9a <core_bench_state+0x1d0>
    4bf4:	4f05                	li	t5,1
    4bf6:	09e50763          	beq	a0,t5,4c84 <core_bench_state+0x1ba>
    4bfa:	4f89                	li	t6,2
    4bfc:	07f50b63          	beq	a0,t6,4c72 <core_bench_state+0x1a8>
    4c00:	428d                	li	t0,3
    4c02:	04550f63          	beq	a0,t0,4c60 <core_bench_state+0x196>
    4c06:	4311                	li	t1,4
    4c08:	04650363          	beq	a0,t1,4c4e <core_bench_state+0x184>
    4c0c:	4095                	li	ra,5
    4c0e:	02150763          	beq	a0,ra,4c3c <core_bench_state+0x172>
    4c12:	4399                	li	t2,6
    4c14:	00750b63          	beq	a0,t2,4c2a <core_bench_state+0x160>
                if (*p!=',')
    4c18:	0007c703          	lbu	a4,0(a5)
    4c1c:	01d70663          	beq	a4,t4,4c28 <core_bench_state+0x15e>
                        *p^=(ee_u8)seed1;
    4c20:	017746b3          	xor	a3,a4,s7
    4c24:	00d78023          	sb	a3,0(a5)
        while (p < (memblock+blksize)) { /* insert some corruption */
    4c28:	0785                	addi	a5,a5,1
                if (*p!=',')
    4c2a:	0007c603          	lbu	a2,0(a5)
    4c2e:	01d60663          	beq	a2,t4,4c3a <core_bench_state+0x170>
                        *p^=(ee_u8)seed1;
    4c32:	017649b3          	xor	s3,a2,s7
    4c36:	01378023          	sb	s3,0(a5)
        while (p < (memblock+blksize)) { /* insert some corruption */
    4c3a:	0785                	addi	a5,a5,1
                if (*p!=',')
    4c3c:	0007c803          	lbu	a6,0(a5)
    4c40:	01d80663          	beq	a6,t4,4c4c <core_bench_state+0x182>
                        *p^=(ee_u8)seed1;
    4c44:	017848b3          	xor	a7,a6,s7
    4c48:	01178023          	sb	a7,0(a5)
        while (p < (memblock+blksize)) { /* insert some corruption */
    4c4c:	0785                	addi	a5,a5,1
                if (*p!=',')
    4c4e:	0007ce03          	lbu	t3,0(a5)
    4c52:	01de0663          	beq	t3,t4,4c5e <core_bench_state+0x194>
                        *p^=(ee_u8)seed1;
    4c56:	017e4533          	xor	a0,t3,s7
    4c5a:	00a78023          	sb	a0,0(a5)
        while (p < (memblock+blksize)) { /* insert some corruption */
    4c5e:	0785                	addi	a5,a5,1
                if (*p!=',')
    4c60:	0007c583          	lbu	a1,0(a5)
    4c64:	01d58663          	beq	a1,t4,4c70 <core_bench_state+0x1a6>
                        *p^=(ee_u8)seed1;
    4c68:	0175cf33          	xor	t5,a1,s7
    4c6c:	01e78023          	sb	t5,0(a5)
        while (p < (memblock+blksize)) { /* insert some corruption */
    4c70:	0785                	addi	a5,a5,1
                if (*p!=',')
    4c72:	0007cf83          	lbu	t6,0(a5)
    4c76:	01df8663          	beq	t6,t4,4c82 <core_bench_state+0x1b8>
                        *p^=(ee_u8)seed1;
    4c7a:	017fc2b3          	xor	t0,t6,s7
    4c7e:	00578023          	sb	t0,0(a5)
        while (p < (memblock+blksize)) { /* insert some corruption */
    4c82:	0785                	addi	a5,a5,1
                if (*p!=',')
    4c84:	0007c303          	lbu	t1,0(a5)
    4c88:	01d30663          	beq	t1,t4,4c94 <core_bench_state+0x1ca>
                        *p^=(ee_u8)seed1;
    4c8c:	017340b3          	xor	ra,t1,s7
    4c90:	00178023          	sb	ra,0(a5)
        while (p < (memblock+blksize)) { /* insert some corruption */
    4c94:	0785                	addi	a5,a5,1
    4c96:	0967f863          	bgeu	a5,s6,4d26 <core_bench_state+0x25c>
                if (*p!=',')
    4c9a:	0007c383          	lbu	t2,0(a5)
    4c9e:	01d38663          	beq	t2,t4,4caa <core_bench_state+0x1e0>
                        *p^=(ee_u8)seed1;
    4ca2:	0173c733          	xor	a4,t2,s7
    4ca6:	00e78023          	sb	a4,0(a5)
                if (*p!=',')
    4caa:	0017c603          	lbu	a2,1(a5)
        while (p < (memblock+blksize)) { /* insert some corruption */
    4cae:	00178693          	addi	a3,a5,1
                if (*p!=',')
    4cb2:	01d60663          	beq	a2,t4,4cbe <core_bench_state+0x1f4>
                        *p^=(ee_u8)seed1;
    4cb6:	017649b3          	xor	s3,a2,s7
    4cba:	013780a3          	sb	s3,1(a5)
                if (*p!=',')
    4cbe:	0016c783          	lbu	a5,1(a3)
    4cc2:	01d78663          	beq	a5,t4,4cce <core_bench_state+0x204>
                        *p^=(ee_u8)seed1;
    4cc6:	0177c833          	xor	a6,a5,s7
    4cca:	010680a3          	sb	a6,1(a3)
                if (*p!=',')
    4cce:	0026c883          	lbu	a7,2(a3)
    4cd2:	01d88663          	beq	a7,t4,4cde <core_bench_state+0x214>
                        *p^=(ee_u8)seed1;
    4cd6:	0178ce33          	xor	t3,a7,s7
    4cda:	01c68123          	sb	t3,2(a3)
                if (*p!=',')
    4cde:	0036c503          	lbu	a0,3(a3)
    4ce2:	01d50663          	beq	a0,t4,4cee <core_bench_state+0x224>
                        *p^=(ee_u8)seed1;
    4ce6:	017545b3          	xor	a1,a0,s7
    4cea:	00b681a3          	sb	a1,3(a3)
                if (*p!=',')
    4cee:	0046cf03          	lbu	t5,4(a3)
    4cf2:	01df0663          	beq	t5,t4,4cfe <core_bench_state+0x234>
                        *p^=(ee_u8)seed1;
    4cf6:	017f4fb3          	xor	t6,t5,s7
    4cfa:	01f68223          	sb	t6,4(a3)
                if (*p!=',')
    4cfe:	0056c283          	lbu	t0,5(a3)
    4d02:	01d28663          	beq	t0,t4,4d0e <core_bench_state+0x244>
                        *p^=(ee_u8)seed1;
    4d06:	0172c333          	xor	t1,t0,s7
    4d0a:	006682a3          	sb	t1,5(a3)
                if (*p!=',')
    4d0e:	0066c083          	lbu	ra,6(a3)
    4d12:	01d08663          	beq	ra,t4,4d1e <core_bench_state+0x254>
                        *p^=(ee_u8)seed1;
    4d16:	0170c3b3          	xor	t2,ra,s7
    4d1a:	00768323          	sb	t2,6(a3)
        while (p < (memblock+blksize)) { /* insert some corruption */
    4d1e:	00768793          	addi	a5,a3,7
    4d22:	f767ece3          	bltu	a5,s6,4c9a <core_bench_state+0x1d0>
        while (*p!=0) {
    4d26:	00094b83          	lbu	s7,0(s2)
    4d2a:	00c10993          	addi	s3,sp,12
    4d2e:	220b8be3          	beqz	s7,5764 <core_bench_state+0xc9a>
                enum CORE_STATE fstate=core_state_transition(&p,track_counts);
    4d32:	85a6                	mv	a1,s1
    4d34:	854e                	mv	a0,s3
    4d36:	3e2d                	jal	4870 <core_state_transition>
    4d38:	8eaa                	mv	t4,a0
                final_counts[fstate]++;
    4d3a:	002e9713          	slli	a4,t4,0x2
    4d3e:	05070613          	addi	a2,a4,80
    4d42:	00260833          	add	a6,a2,sp
        while (*p!=0) {
    4d46:	46b2                	lw	a3,12(sp)
                final_counts[fstate]++;
    4d48:	fc082883          	lw	a7,-64(a6)
                enum CORE_STATE fstate=core_state_transition(&p,track_counts);
    4d4c:	85a6                	mv	a1,s1
        while (*p!=0) {
    4d4e:	0006ce03          	lbu	t3,0(a3)
                final_counts[fstate]++;
    4d52:	00188f13          	addi	t5,a7,1
    4d56:	fde82023          	sw	t5,-64(a6)
                enum CORE_STATE fstate=core_state_transition(&p,track_counts);
    4d5a:	854e                	mv	a0,s3
        while (*p!=0) {
    4d5c:	060e0d63          	beqz	t3,4dd6 <core_bench_state+0x30c>
                enum CORE_STATE fstate=core_state_transition(&p,track_counts);
    4d60:	3e01                	jal	4870 <core_state_transition>
    4d62:	8faa                	mv	t6,a0
                final_counts[fstate]++;
    4d64:	002f9293          	slli	t0,t6,0x2
    4d68:	05028313          	addi	t1,t0,80
    4d6c:	002303b3          	add	t2,t1,sp
        while (*p!=0) {
    4d70:	4bb2                	lw	s7,12(sp)
                final_counts[fstate]++;
    4d72:	fc03a783          	lw	a5,-64(t2)
                enum CORE_STATE fstate=core_state_transition(&p,track_counts);
    4d76:	85a6                	mv	a1,s1
        while (*p!=0) {
    4d78:	000bce83          	lbu	t4,0(s7)
                final_counts[fstate]++;
    4d7c:	00178713          	addi	a4,a5,1
    4d80:	fce3a023          	sw	a4,-64(t2)
                enum CORE_STATE fstate=core_state_transition(&p,track_counts);
    4d84:	854e                	mv	a0,s3
        while (*p!=0) {
    4d86:	040e8863          	beqz	t4,4dd6 <core_bench_state+0x30c>
                enum CORE_STATE fstate=core_state_transition(&p,track_counts);
    4d8a:	34dd                	jal	4870 <core_state_transition>
    4d8c:	862a                	mv	a2,a0
                final_counts[fstate]++;
    4d8e:	00261813          	slli	a6,a2,0x2
    4d92:	05080893          	addi	a7,a6,80
    4d96:	00288e33          	add	t3,a7,sp
        while (*p!=0) {
    4d9a:	46b2                	lw	a3,12(sp)
                final_counts[fstate]++;
    4d9c:	fc0e2f03          	lw	t5,-64(t3)
                enum CORE_STATE fstate=core_state_transition(&p,track_counts);
    4da0:	85a6                	mv	a1,s1
        while (*p!=0) {
    4da2:	0006cf83          	lbu	t6,0(a3)
                final_counts[fstate]++;
    4da6:	001f0293          	addi	t0,t5,1
    4daa:	fc5e2023          	sw	t0,-64(t3)
                enum CORE_STATE fstate=core_state_transition(&p,track_counts);
    4dae:	854e                	mv	a0,s3
        while (*p!=0) {
    4db0:	020f8363          	beqz	t6,4dd6 <core_bench_state+0x30c>
                enum CORE_STATE fstate=core_state_transition(&p,track_counts);
    4db4:	3c75                	jal	4870 <core_state_transition>
                final_counts[fstate]++;
    4db6:	050a                	slli	a0,a0,0x2
    4db8:	05050593          	addi	a1,a0,80
    4dbc:	00258333          	add	t1,a1,sp
        while (*p!=0) {
    4dc0:	47b2                	lw	a5,12(sp)
                final_counts[fstate]++;
    4dc2:	fc032383          	lw	t2,-64(t1)
        while (*p!=0) {
    4dc6:	0007cb83          	lbu	s7,0(a5)
                final_counts[fstate]++;
    4dca:	00138e93          	addi	t4,t2,1
    4dce:	fdd32023          	sw	t4,-64(t1)
        while (*p!=0) {
    4dd2:	f60b90e3          	bnez	s7,4d32 <core_bench_state+0x268>
        p=memblock;
    4dd6:	c64a                	sw	s2,12(sp)
        while (p < (memblock+blksize)) { /* undo corruption is seed1 and seed2 are equal */
    4dd8:	17697363          	bgeu	s2,s6,4f3e <core_bench_state+0x474>
    4ddc:	4985                	li	s3,1
    4dde:	1b3a9fe3          	bne	s5,s3,579c <core_bench_state+0xcd2>
                if (*p!=',')
    4de2:	00094a83          	lbu	s5,0(s2)
    4de6:	fff94813          	not	a6,s2
    4dea:	010b08b3          	add	a7,s6,a6
    4dee:	02c00e13          	li	t3,44
    4df2:	0078ff13          	andi	t5,a7,7
    4df6:	01ca8663          	beq	s5,t3,4e02 <core_bench_state+0x338>
                        *p^=(ee_u8)seed2;
    4dfa:	014ac6b3          	xor	a3,s5,s4
    4dfe:	00d90023          	sb	a3,0(s2)
        while (p < (memblock+blksize)) { /* undo corruption is seed1 and seed2 are equal */
    4e02:	0905                	addi	s2,s2,1
    4e04:	13697d63          	bgeu	s2,s6,4f3e <core_bench_state+0x474>
    4e08:	0a0f0563          	beqz	t5,4eb2 <core_bench_state+0x3e8>
    4e0c:	4f85                	li	t6,1
    4e0e:	09ff0763          	beq	t5,t6,4e9c <core_bench_state+0x3d2>
    4e12:	4289                	li	t0,2
    4e14:	065f0b63          	beq	t5,t0,4e8a <core_bench_state+0x3c0>
    4e18:	450d                	li	a0,3
    4e1a:	04af0f63          	beq	t5,a0,4e78 <core_bench_state+0x3ae>
    4e1e:	4591                	li	a1,4
    4e20:	04bf0363          	beq	t5,a1,4e66 <core_bench_state+0x39c>
    4e24:	4315                	li	t1,5
    4e26:	026f0763          	beq	t5,t1,4e54 <core_bench_state+0x38a>
    4e2a:	4399                	li	t2,6
    4e2c:	007f0b63          	beq	t5,t2,4e42 <core_bench_state+0x378>
                if (*p!=',')
    4e30:	00094783          	lbu	a5,0(s2)
    4e34:	01c78663          	beq	a5,t3,4e40 <core_bench_state+0x376>
                        *p^=(ee_u8)seed2;
    4e38:	0147cbb3          	xor	s7,a5,s4
    4e3c:	01790023          	sb	s7,0(s2)
        while (p < (memblock+blksize)) { /* undo corruption is seed1 and seed2 are equal */
    4e40:	0905                	addi	s2,s2,1
                if (*p!=',')
    4e42:	00094e83          	lbu	t4,0(s2)
    4e46:	01ce8663          	beq	t4,t3,4e52 <core_bench_state+0x388>
                        *p^=(ee_u8)seed2;
    4e4a:	014ec9b3          	xor	s3,t4,s4
    4e4e:	01390023          	sb	s3,0(s2)
        while (p < (memblock+blksize)) { /* undo corruption is seed1 and seed2 are equal */
    4e52:	0905                	addi	s2,s2,1
                if (*p!=',')
    4e54:	00094083          	lbu	ra,0(s2)
    4e58:	01c08663          	beq	ra,t3,4e64 <core_bench_state+0x39a>
                        *p^=(ee_u8)seed2;
    4e5c:	0140c633          	xor	a2,ra,s4
    4e60:	00c90023          	sb	a2,0(s2)
        while (p < (memblock+blksize)) { /* undo corruption is seed1 and seed2 are equal */
    4e64:	0905                	addi	s2,s2,1
                if (*p!=',')
    4e66:	00094703          	lbu	a4,0(s2)
    4e6a:	01c70663          	beq	a4,t3,4e76 <core_bench_state+0x3ac>
                        *p^=(ee_u8)seed2;
    4e6e:	01474ab3          	xor	s5,a4,s4
    4e72:	01590023          	sb	s5,0(s2)
        while (p < (memblock+blksize)) { /* undo corruption is seed1 and seed2 are equal */
    4e76:	0905                	addi	s2,s2,1
                if (*p!=',')
    4e78:	00094803          	lbu	a6,0(s2)
    4e7c:	01c80663          	beq	a6,t3,4e88 <core_bench_state+0x3be>
                        *p^=(ee_u8)seed2;
    4e80:	014848b3          	xor	a7,a6,s4
    4e84:	01190023          	sb	a7,0(s2)
        while (p < (memblock+blksize)) { /* undo corruption is seed1 and seed2 are equal */
    4e88:	0905                	addi	s2,s2,1
                if (*p!=',')
    4e8a:	00094f03          	lbu	t5,0(s2)
    4e8e:	01cf0663          	beq	t5,t3,4e9a <core_bench_state+0x3d0>
                        *p^=(ee_u8)seed2;
    4e92:	014f46b3          	xor	a3,t5,s4
    4e96:	00d90023          	sb	a3,0(s2)
        while (p < (memblock+blksize)) { /* undo corruption is seed1 and seed2 are equal */
    4e9a:	0905                	addi	s2,s2,1
                if (*p!=',')
    4e9c:	00094f83          	lbu	t6,0(s2)
    4ea0:	01cf8663          	beq	t6,t3,4eac <core_bench_state+0x3e2>
                        *p^=(ee_u8)seed2;
    4ea4:	014fc2b3          	xor	t0,t6,s4
    4ea8:	00590023          	sb	t0,0(s2)
        while (p < (memblock+blksize)) { /* undo corruption is seed1 and seed2 are equal */
    4eac:	0905                	addi	s2,s2,1
    4eae:	09697863          	bgeu	s2,s6,4f3e <core_bench_state+0x474>
                if (*p!=',')
    4eb2:	00094503          	lbu	a0,0(s2)
    4eb6:	01c50663          	beq	a0,t3,4ec2 <core_bench_state+0x3f8>
                        *p^=(ee_u8)seed2;
    4eba:	014545b3          	xor	a1,a0,s4
    4ebe:	00b90023          	sb	a1,0(s2)
                if (*p!=',')
    4ec2:	00194303          	lbu	t1,1(s2)
        while (p < (memblock+blksize)) { /* undo corruption is seed1 and seed2 are equal */
    4ec6:	00190393          	addi	t2,s2,1
                if (*p!=',')
    4eca:	01c30663          	beq	t1,t3,4ed6 <core_bench_state+0x40c>
                        *p^=(ee_u8)seed2;
    4ece:	014347b3          	xor	a5,t1,s4
    4ed2:	00f900a3          	sb	a5,1(s2)
                if (*p!=',')
    4ed6:	0013c903          	lbu	s2,1(t2)
    4eda:	01c90663          	beq	s2,t3,4ee6 <core_bench_state+0x41c>
                        *p^=(ee_u8)seed2;
    4ede:	01494bb3          	xor	s7,s2,s4
    4ee2:	017380a3          	sb	s7,1(t2)
                if (*p!=',')
    4ee6:	0023ce83          	lbu	t4,2(t2)
    4eea:	01ce8663          	beq	t4,t3,4ef6 <core_bench_state+0x42c>
                        *p^=(ee_u8)seed2;
    4eee:	014ec9b3          	xor	s3,t4,s4
    4ef2:	01338123          	sb	s3,2(t2)
                if (*p!=',')
    4ef6:	0033c083          	lbu	ra,3(t2)
    4efa:	01c08663          	beq	ra,t3,4f06 <core_bench_state+0x43c>
                        *p^=(ee_u8)seed2;
    4efe:	0140c633          	xor	a2,ra,s4
    4f02:	00c381a3          	sb	a2,3(t2)
                if (*p!=',')
    4f06:	0043c703          	lbu	a4,4(t2)
    4f0a:	01c70663          	beq	a4,t3,4f16 <core_bench_state+0x44c>
                        *p^=(ee_u8)seed2;
    4f0e:	01474ab3          	xor	s5,a4,s4
    4f12:	01538223          	sb	s5,4(t2)
                if (*p!=',')
    4f16:	0053c803          	lbu	a6,5(t2)
    4f1a:	01c80663          	beq	a6,t3,4f26 <core_bench_state+0x45c>
                        *p^=(ee_u8)seed2;
    4f1e:	014848b3          	xor	a7,a6,s4
    4f22:	011382a3          	sb	a7,5(t2)
                if (*p!=',')
    4f26:	0063cf03          	lbu	t5,6(t2)
    4f2a:	01cf0663          	beq	t5,t3,4f36 <core_bench_state+0x46c>
                        *p^=(ee_u8)seed2;
    4f2e:	014f46b3          	xor	a3,t5,s4
    4f32:	00d38323          	sb	a3,6(t2)
        while (p < (memblock+blksize)) { /* undo corruption is seed1 and seed2 are equal */
    4f36:	00738913          	addi	s2,t2,7
    4f3a:	f7696ce3          	bltu	s2,s6,4eb2 <core_bench_state+0x3e8>
                   crc |= 0x8000;
    4f3e:	7a69                	lui	s4,0xffffa
    4f40:	0814                	addi	a3,sp,16
    4f42:	8626                	mv	a2,s1
    4f44:	001a0b13          	addi	s6,s4,1 # ffffa001 <tohost+0x2fa7a001>
                crc=crcu32(final_counts[i],crc);
    4f48:	0006ae03          	lw	t3,0(a3)
                crc >>= 1;
    4f4c:	00145b93          	srli	s7,s0,0x1
        crc=crcu8( (ee_u8) (newval)                             ,crc);
    4f50:	0ffe7f93          	zext.b	t6,t3
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    4f54:	008fc433          	xor	s0,t6,s0
        return crcu16((ee_u16)newval, crc);
    4f58:	010e1513          	slli	a0,t3,0x10
                if (x16 == 1)
    4f5c:	00147293          	andi	t0,s0,1
        return crcu16((ee_u16)newval, crc);
    4f60:	01055593          	srli	a1,a0,0x10
                data >>= 1;
    4f64:	001fd313          	srli	t1,t6,0x1
                if (x16 == 1)
    4f68:	00028863          	beqz	t0,4f78 <core_bench_state+0x4ae>
                   crc |= 0x8000;
    4f6c:	016bc3b3          	xor	t2,s7,s6
    4f70:	01039793          	slli	a5,t2,0x10
    4f74:	0107db93          	srli	s7,a5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    4f78:	01734eb3          	xor	t4,t1,s7
                if (x16 == 1)
    4f7c:	001ef993          	andi	s3,t4,1
                data >>= 1;
    4f80:	002fd093          	srli	ra,t6,0x2
                if (x16 == 1)
    4f84:	001bd813          	srli	a6,s7,0x1
    4f88:	00098863          	beqz	s3,4f98 <core_bench_state+0x4ce>
                   crc |= 0x8000;
    4f8c:	01684733          	xor	a4,a6,s6
    4f90:	01071a93          	slli	s5,a4,0x10
    4f94:	010ad813          	srli	a6,s5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    4f98:	0100c8b3          	xor	a7,ra,a6
                if (x16 == 1)
    4f9c:	0018ff13          	andi	t5,a7,1
                data >>= 1;
    4fa0:	003fd913          	srli	s2,t6,0x3
                if (x16 == 1)
    4fa4:	00185293          	srli	t0,a6,0x1
    4fa8:	000f0863          	beqz	t5,4fb8 <core_bench_state+0x4ee>
                   crc |= 0x8000;
    4fac:	0162ca33          	xor	s4,t0,s6
    4fb0:	010a1413          	slli	s0,s4,0x10
    4fb4:	01045293          	srli	t0,s0,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    4fb8:	00594533          	xor	a0,s2,t0
                if (x16 == 1)
    4fbc:	00157313          	andi	t1,a0,1
                data >>= 1;
    4fc0:	004fd393          	srli	t2,t6,0x4
                if (x16 == 1)
    4fc4:	0012de93          	srli	t4,t0,0x1
    4fc8:	00030863          	beqz	t1,4fd8 <core_bench_state+0x50e>
                   crc |= 0x8000;
    4fcc:	016ec7b3          	xor	a5,t4,s6
    4fd0:	01079b93          	slli	s7,a5,0x10
    4fd4:	010bde93          	srli	t4,s7,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    4fd8:	01d3c9b3          	xor	s3,t2,t4
                if (x16 == 1)
    4fdc:	0019f093          	andi	ra,s3,1
                data >>= 1;
    4fe0:	005fd713          	srli	a4,t6,0x5
                if (x16 == 1)
    4fe4:	001edf13          	srli	t5,t4,0x1
    4fe8:	00008863          	beqz	ra,4ff8 <core_bench_state+0x52e>
                   crc |= 0x8000;
    4fec:	016f4ab3          	xor	s5,t5,s6
    4ff0:	010a9813          	slli	a6,s5,0x10
    4ff4:	01085f13          	srli	t5,a6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    4ff8:	01e748b3          	xor	a7,a4,t5
                if (x16 == 1)
    4ffc:	0018f913          	andi	s2,a7,1
                data >>= 1;
    5000:	006fda13          	srli	s4,t6,0x6
                if (x16 == 1)
    5004:	001f5313          	srli	t1,t5,0x1
    5008:	00090863          	beqz	s2,5018 <core_bench_state+0x54e>
                   crc |= 0x8000;
    500c:	01634433          	xor	s0,t1,s6
    5010:	01041293          	slli	t0,s0,0x10
    5014:	0102d313          	srli	t1,t0,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5018:	006a4533          	xor	a0,s4,t1
                if (x16 == 1)
    501c:	00157393          	andi	t2,a0,1
                data >>= 1;
    5020:	007fdf93          	srli	t6,t6,0x7
                if (x16 == 1)
    5024:	00135e93          	srli	t4,t1,0x1
    5028:	00038863          	beqz	t2,5038 <core_bench_state+0x56e>
                   crc |= 0x8000;
    502c:	016ec7b3          	xor	a5,t4,s6
    5030:	01079b93          	slli	s7,a5,0x10
    5034:	010bde93          	srli	t4,s7,0x10
                if (x16 == 1)
    5038:	001ef993          	andi	s3,t4,1
    503c:	001eda93          	srli	s5,t4,0x1
    5040:	01f98863          	beq	s3,t6,5050 <core_bench_state+0x586>
                   crc |= 0x8000;
    5044:	016ac0b3          	xor	ra,s5,s6
    5048:	01009713          	slli	a4,ra,0x10
    504c:	01075a93          	srli	s5,a4,0x10
        crc=crcu8( (ee_u8) ((newval)>>8)        ,crc);
    5050:	0085df13          	srli	t5,a1,0x8
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5054:	015f4833          	xor	a6,t5,s5
                if (x16 == 1)
    5058:	00187893          	andi	a7,a6,1
                data >>= 1;
    505c:	81a5                	srli	a1,a1,0x9
                if (x16 == 1)
    505e:	001ad413          	srli	s0,s5,0x1
    5062:	00088863          	beqz	a7,5072 <core_bench_state+0x5a8>
                   crc |= 0x8000;
    5066:	01644933          	xor	s2,s0,s6
    506a:	01091a13          	slli	s4,s2,0x10
    506e:	010a5413          	srli	s0,s4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5072:	0085c2b3          	xor	t0,a1,s0
                if (x16 == 1)
    5076:	0012f313          	andi	t1,t0,1
                data >>= 1;
    507a:	002f5513          	srli	a0,t5,0x2
                if (x16 == 1)
    507e:	00145793          	srli	a5,s0,0x1
    5082:	00030863          	beqz	t1,5092 <core_bench_state+0x5c8>
                   crc |= 0x8000;
    5086:	0167c3b3          	xor	t2,a5,s6
    508a:	01039f93          	slli	t6,t2,0x10
    508e:	010fd793          	srli	a5,t6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5092:	00f54bb3          	xor	s7,a0,a5
                if (x16 == 1)
    5096:	001bfe93          	andi	t4,s7,1
                data >>= 1;
    509a:	003f5993          	srli	s3,t5,0x3
                if (x16 == 1)
    509e:	0017da93          	srli	s5,a5,0x1
    50a2:	000e8863          	beqz	t4,50b2 <core_bench_state+0x5e8>
                   crc |= 0x8000;
    50a6:	016ac0b3          	xor	ra,s5,s6
    50aa:	01009713          	slli	a4,ra,0x10
    50ae:	01075a93          	srli	s5,a4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    50b2:	0159c833          	xor	a6,s3,s5
                if (x16 == 1)
    50b6:	00187893          	andi	a7,a6,1
                data >>= 1;
    50ba:	004f5593          	srli	a1,t5,0x4
                if (x16 == 1)
    50be:	001ad413          	srli	s0,s5,0x1
    50c2:	00088863          	beqz	a7,50d2 <core_bench_state+0x608>
                   crc |= 0x8000;
    50c6:	01644933          	xor	s2,s0,s6
    50ca:	01091a13          	slli	s4,s2,0x10
    50ce:	010a5413          	srli	s0,s4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    50d2:	0085c2b3          	xor	t0,a1,s0
                if (x16 == 1)
    50d6:	0012f313          	andi	t1,t0,1
                data >>= 1;
    50da:	005f5513          	srli	a0,t5,0x5
                if (x16 == 1)
    50de:	00145793          	srli	a5,s0,0x1
    50e2:	00030863          	beqz	t1,50f2 <core_bench_state+0x628>
                   crc |= 0x8000;
    50e6:	0167c3b3          	xor	t2,a5,s6
    50ea:	01039f93          	slli	t6,t2,0x10
    50ee:	010fd793          	srli	a5,t6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    50f2:	00f54bb3          	xor	s7,a0,a5
                if (x16 == 1)
    50f6:	001bfe93          	andi	t4,s7,1
                data >>= 1;
    50fa:	006f5993          	srli	s3,t5,0x6
                if (x16 == 1)
    50fe:	0017da93          	srli	s5,a5,0x1
    5102:	000e8863          	beqz	t4,5112 <core_bench_state+0x648>
                   crc |= 0x8000;
    5106:	016ac0b3          	xor	ra,s5,s6
    510a:	01009713          	slli	a4,ra,0x10
    510e:	01075a93          	srli	s5,a4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5112:	0159c833          	xor	a6,s3,s5
                if (x16 == 1)
    5116:	00187893          	andi	a7,a6,1
                data >>= 1;
    511a:	007f5f13          	srli	t5,t5,0x7
                if (x16 == 1)
    511e:	001ada13          	srli	s4,s5,0x1
    5122:	00088863          	beqz	a7,5132 <core_bench_state+0x668>
                   crc |= 0x8000;
    5126:	016a45b3          	xor	a1,s4,s6
    512a:	01059913          	slli	s2,a1,0x10
    512e:	01095a13          	srli	s4,s2,0x10
                if (x16 == 1)
    5132:	001a7413          	andi	s0,s4,1
    5136:	001a5393          	srli	t2,s4,0x1
    513a:	01e40863          	beq	s0,t5,514a <core_bench_state+0x680>
                   crc |= 0x8000;
    513e:	0163c2b3          	xor	t0,t2,s6
    5142:	01029313          	slli	t1,t0,0x10
    5146:	01035393          	srli	t2,t1,0x10
        crc=crc16((ee_s16) (newval>>16) ,crc);
    514a:	010e5513          	srli	a0,t3,0x10
        crc=crcu8( (ee_u8) (newval)                             ,crc);
    514e:	0ff57f93          	zext.b	t6,a0
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5152:	007fc7b3          	xor	a5,t6,t2
                if (x16 == 1)
    5156:	0017fb93          	andi	s7,a5,1
        return crcu16((ee_u16)newval, crc);
    515a:	010e5e13          	srli	t3,t3,0x10
                data >>= 1;
    515e:	001fde93          	srli	t4,t6,0x1
                if (x16 == 1)
    5162:	0013d713          	srli	a4,t2,0x1
    5166:	000b8863          	beqz	s7,5176 <core_bench_state+0x6ac>
                   crc |= 0x8000;
    516a:	016749b3          	xor	s3,a4,s6
    516e:	01099093          	slli	ra,s3,0x10
    5172:	0100d713          	srli	a4,ra,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5176:	00eecab3          	xor	s5,t4,a4
                if (x16 == 1)
    517a:	001af893          	andi	a7,s5,1
                data >>= 1;
    517e:	002fd813          	srli	a6,t6,0x2
                if (x16 == 1)
    5182:	00175913          	srli	s2,a4,0x1
    5186:	00088863          	beqz	a7,5196 <core_bench_state+0x6cc>
                   crc |= 0x8000;
    518a:	01694f33          	xor	t5,s2,s6
    518e:	010f1593          	slli	a1,t5,0x10
    5192:	0105d913          	srli	s2,a1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5196:	01284a33          	xor	s4,a6,s2
                if (x16 == 1)
    519a:	001a7413          	andi	s0,s4,1
                data >>= 1;
    519e:	003fd293          	srli	t0,t6,0x3
                if (x16 == 1)
    51a2:	00195513          	srli	a0,s2,0x1
    51a6:	c419                	beqz	s0,51b4 <core_bench_state+0x6ea>
                   crc |= 0x8000;
    51a8:	01654333          	xor	t1,a0,s6
    51ac:	01031393          	slli	t2,t1,0x10
    51b0:	0103d513          	srli	a0,t2,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    51b4:	00a2c7b3          	xor	a5,t0,a0
                if (x16 == 1)
    51b8:	0017fb93          	andi	s7,a5,1
                data >>= 1;
    51bc:	004fde93          	srli	t4,t6,0x4
                if (x16 == 1)
    51c0:	00155713          	srli	a4,a0,0x1
    51c4:	000b8863          	beqz	s7,51d4 <core_bench_state+0x70a>
                   crc |= 0x8000;
    51c8:	016749b3          	xor	s3,a4,s6
    51cc:	01099093          	slli	ra,s3,0x10
    51d0:	0100d713          	srli	a4,ra,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    51d4:	00eecab3          	xor	s5,t4,a4
                if (x16 == 1)
    51d8:	001af813          	andi	a6,s5,1
                data >>= 1;
    51dc:	005fd893          	srli	a7,t6,0x5
                if (x16 == 1)
    51e0:	00175913          	srli	s2,a4,0x1
    51e4:	00080863          	beqz	a6,51f4 <core_bench_state+0x72a>
                   crc |= 0x8000;
    51e8:	01694f33          	xor	t5,s2,s6
    51ec:	010f1593          	slli	a1,t5,0x10
    51f0:	0105d913          	srli	s2,a1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    51f4:	0128ca33          	xor	s4,a7,s2
                if (x16 == 1)
    51f8:	001a7413          	andi	s0,s4,1
                data >>= 1;
    51fc:	006fd293          	srli	t0,t6,0x6
                if (x16 == 1)
    5200:	00195793          	srli	a5,s2,0x1
    5204:	c419                	beqz	s0,5212 <core_bench_state+0x748>
                   crc |= 0x8000;
    5206:	0167c333          	xor	t1,a5,s6
    520a:	01031393          	slli	t2,t1,0x10
    520e:	0103d793          	srli	a5,t2,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5212:	00f2c533          	xor	a0,t0,a5
                if (x16 == 1)
    5216:	00157b93          	andi	s7,a0,1
                data >>= 1;
    521a:	007fdf93          	srli	t6,t6,0x7
                if (x16 == 1)
    521e:	0017d093          	srli	ra,a5,0x1
    5222:	000b8863          	beqz	s7,5232 <core_bench_state+0x768>
                   crc |= 0x8000;
    5226:	0160ceb3          	xor	t4,ra,s6
    522a:	010e9993          	slli	s3,t4,0x10
    522e:	0109d093          	srli	ra,s3,0x10
                if (x16 == 1)
    5232:	0010f713          	andi	a4,ra,1
    5236:	0010d893          	srli	a7,ra,0x1
    523a:	01f70863          	beq	a4,t6,524a <core_bench_state+0x780>
                   crc |= 0x8000;
    523e:	0168cab3          	xor	s5,a7,s6
    5242:	010a9813          	slli	a6,s5,0x10
    5246:	01085893          	srli	a7,a6,0x10
        crc=crcu8( (ee_u8) ((newval)>>8)        ,crc);
    524a:	008e5f13          	srli	t5,t3,0x8
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    524e:	011f45b3          	xor	a1,t5,a7
                if (x16 == 1)
    5252:	0015f913          	andi	s2,a1,1
                data >>= 1;
    5256:	009e5e13          	srli	t3,t3,0x9
                if (x16 == 1)
    525a:	0018d293          	srli	t0,a7,0x1
    525e:	00090863          	beqz	s2,526e <core_bench_state+0x7a4>
                   crc |= 0x8000;
    5262:	0162ca33          	xor	s4,t0,s6
    5266:	010a1413          	slli	s0,s4,0x10
    526a:	01045293          	srli	t0,s0,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    526e:	005e4333          	xor	t1,t3,t0
                if (x16 == 1)
    5272:	00137393          	andi	t2,t1,1
                data >>= 1;
    5276:	002f5513          	srli	a0,t5,0x2
                if (x16 == 1)
    527a:	0012df93          	srli	t6,t0,0x1
    527e:	00038863          	beqz	t2,528e <core_bench_state+0x7c4>
                   crc |= 0x8000;
    5282:	016fc7b3          	xor	a5,t6,s6
    5286:	01079b93          	slli	s7,a5,0x10
    528a:	010bdf93          	srli	t6,s7,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    528e:	01f54eb3          	xor	t4,a0,t6
                if (x16 == 1)
    5292:	001ef993          	andi	s3,t4,1
                data >>= 1;
    5296:	003f5093          	srli	ra,t5,0x3
                if (x16 == 1)
    529a:	001fd893          	srli	a7,t6,0x1
    529e:	00098863          	beqz	s3,52ae <core_bench_state+0x7e4>
                   crc |= 0x8000;
    52a2:	0168c733          	xor	a4,a7,s6
    52a6:	01071a93          	slli	s5,a4,0x10
    52aa:	010ad893          	srli	a7,s5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    52ae:	0110c833          	xor	a6,ra,a7
                if (x16 == 1)
    52b2:	00187913          	andi	s2,a6,1
                data >>= 1;
    52b6:	004f5593          	srli	a1,t5,0x4
                if (x16 == 1)
    52ba:	0018d413          	srli	s0,a7,0x1
    52be:	00090863          	beqz	s2,52ce <core_bench_state+0x804>
                   crc |= 0x8000;
    52c2:	01644e33          	xor	t3,s0,s6
    52c6:	010e1a13          	slli	s4,t3,0x10
    52ca:	010a5413          	srli	s0,s4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    52ce:	0085c2b3          	xor	t0,a1,s0
                if (x16 == 1)
    52d2:	0012f313          	andi	t1,t0,1
                data >>= 1;
    52d6:	005f5393          	srli	t2,t5,0x5
                if (x16 == 1)
    52da:	00145b93          	srli	s7,s0,0x1
    52de:	00030863          	beqz	t1,52ee <core_bench_state+0x824>
                   crc |= 0x8000;
    52e2:	016bc533          	xor	a0,s7,s6
    52e6:	01051793          	slli	a5,a0,0x10
    52ea:	0107db93          	srli	s7,a5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    52ee:	0173cfb3          	xor	t6,t2,s7
                if (x16 == 1)
    52f2:	001ffe93          	andi	t4,t6,1
                data >>= 1;
    52f6:	006f5993          	srli	s3,t5,0x6
                if (x16 == 1)
    52fa:	001bda93          	srli	s5,s7,0x1
    52fe:	000e8863          	beqz	t4,530e <core_bench_state+0x844>
                   crc |= 0x8000;
    5302:	016ac0b3          	xor	ra,s5,s6
    5306:	01009713          	slli	a4,ra,0x10
    530a:	01075a93          	srli	s5,a4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    530e:	0159c8b3          	xor	a7,s3,s5
                if (x16 == 1)
    5312:	0018f813          	andi	a6,a7,1
                data >>= 1;
    5316:	007f5f13          	srli	t5,t5,0x7
                if (x16 == 1)
    531a:	001ade13          	srli	t3,s5,0x1
    531e:	00080863          	beqz	a6,532e <core_bench_state+0x864>
                   crc |= 0x8000;
    5322:	016e4933          	xor	s2,t3,s6
    5326:	01091593          	slli	a1,s2,0x10
    532a:	0105de13          	srli	t3,a1,0x10
                if (x16 == 1)
    532e:	001e7a13          	andi	s4,t3,1
    5332:	001e5313          	srli	t1,t3,0x1
    5336:	01ea0863          	beq	s4,t5,5346 <core_bench_state+0x87c>
                   crc |= 0x8000;
    533a:	01634433          	xor	s0,t1,s6
    533e:	01041293          	slli	t0,s0,0x10
    5342:	0102d313          	srli	t1,t0,0x10
                crc=crcu32(track_counts[i],crc);
    5346:	00062383          	lw	t2,0(a2)
        return crcu16((ee_u16)newval, crc);
    534a:	00135a93          	srli	s5,t1,0x1
        crc=crcu8( (ee_u8) (newval)                             ,crc);
    534e:	0ff3f513          	zext.b	a0,t2
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5352:	006547b3          	xor	a5,a0,t1
        return crcu16((ee_u16)newval, crc);
    5356:	01039f93          	slli	t6,t2,0x10
                if (x16 == 1)
    535a:	0017fb93          	andi	s7,a5,1
        return crcu16((ee_u16)newval, crc);
    535e:	010fde93          	srli	t4,t6,0x10
                data >>= 1;
    5362:	00155993          	srli	s3,a0,0x1
                if (x16 == 1)
    5366:	000b8863          	beqz	s7,5376 <core_bench_state+0x8ac>
                   crc |= 0x8000;
    536a:	016ac0b3          	xor	ra,s5,s6
    536e:	01009713          	slli	a4,ra,0x10
    5372:	01075a93          	srli	s5,a4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5376:	0159c8b3          	xor	a7,s3,s5
                if (x16 == 1)
    537a:	0018f813          	andi	a6,a7,1
                data >>= 1;
    537e:	00255f13          	srli	t5,a0,0x2
                if (x16 == 1)
    5382:	001ade13          	srli	t3,s5,0x1
    5386:	00080863          	beqz	a6,5396 <core_bench_state+0x8cc>
                   crc |= 0x8000;
    538a:	016e4933          	xor	s2,t3,s6
    538e:	01091593          	slli	a1,s2,0x10
    5392:	0105de13          	srli	t3,a1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5396:	01cf4a33          	xor	s4,t5,t3
                if (x16 == 1)
    539a:	001a7293          	andi	t0,s4,1
                data >>= 1;
    539e:	00355313          	srli	t1,a0,0x3
                if (x16 == 1)
    53a2:	001e5b93          	srli	s7,t3,0x1
    53a6:	00028863          	beqz	t0,53b6 <core_bench_state+0x8ec>
                   crc |= 0x8000;
    53aa:	016bc433          	xor	s0,s7,s6
    53ae:	01041793          	slli	a5,s0,0x10
    53b2:	0107db93          	srli	s7,a5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    53b6:	01734fb3          	xor	t6,t1,s7
                if (x16 == 1)
    53ba:	001ff993          	andi	s3,t6,1
                data >>= 1;
    53be:	00455093          	srli	ra,a0,0x4
                if (x16 == 1)
    53c2:	001bd813          	srli	a6,s7,0x1
    53c6:	00098863          	beqz	s3,53d6 <core_bench_state+0x90c>
                   crc |= 0x8000;
    53ca:	01684733          	xor	a4,a6,s6
    53ce:	01071a93          	slli	s5,a4,0x10
    53d2:	010ad813          	srli	a6,s5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    53d6:	0100c8b3          	xor	a7,ra,a6
                if (x16 == 1)
    53da:	0018ff13          	andi	t5,a7,1
                data >>= 1;
    53de:	00555913          	srli	s2,a0,0x5
                if (x16 == 1)
    53e2:	00185a13          	srli	s4,a6,0x1
    53e6:	000f0863          	beqz	t5,53f6 <core_bench_state+0x92c>
                   crc |= 0x8000;
    53ea:	016a45b3          	xor	a1,s4,s6
    53ee:	01059e13          	slli	t3,a1,0x10
    53f2:	010e5a13          	srli	s4,t3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    53f6:	014942b3          	xor	t0,s2,s4
                if (x16 == 1)
    53fa:	0012f313          	andi	t1,t0,1
                data >>= 1;
    53fe:	00655793          	srli	a5,a0,0x6
                if (x16 == 1)
    5402:	001a5f93          	srli	t6,s4,0x1
    5406:	00030863          	beqz	t1,5416 <core_bench_state+0x94c>
                   crc |= 0x8000;
    540a:	016fc433          	xor	s0,t6,s6
    540e:	01041b93          	slli	s7,s0,0x10
    5412:	010bdf93          	srli	t6,s7,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5416:	01f7c9b3          	xor	s3,a5,t6
                if (x16 == 1)
    541a:	0019f093          	andi	ra,s3,1
                data >>= 1;
    541e:	00755713          	srli	a4,a0,0x7
                if (x16 == 1)
    5422:	001fd813          	srli	a6,t6,0x1
    5426:	00008863          	beqz	ra,5436 <core_bench_state+0x96c>
                   crc |= 0x8000;
    542a:	01684533          	xor	a0,a6,s6
    542e:	01051a93          	slli	s5,a0,0x10
    5432:	010ad813          	srli	a6,s5,0x10
                if (x16 == 1)
    5436:	00187893          	andi	a7,a6,1
    543a:	00185593          	srli	a1,a6,0x1
    543e:	00e88863          	beq	a7,a4,544e <core_bench_state+0x984>
                   crc |= 0x8000;
    5442:	0165cf33          	xor	t5,a1,s6
    5446:	010f1913          	slli	s2,t5,0x10
    544a:	01095593          	srli	a1,s2,0x10
        crc=crcu8( (ee_u8) ((newval)>>8)        ,crc);
    544e:	008ede13          	srli	t3,t4,0x8
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5452:	00be4a33          	xor	s4,t3,a1
                if (x16 == 1)
    5456:	001a7293          	andi	t0,s4,1
                data >>= 1;
    545a:	009ede93          	srli	t4,t4,0x9
                if (x16 == 1)
    545e:	0015d413          	srli	s0,a1,0x1
    5462:	00028863          	beqz	t0,5472 <core_bench_state+0x9a8>
                   crc |= 0x8000;
    5466:	01644333          	xor	t1,s0,s6
    546a:	01031793          	slli	a5,t1,0x10
    546e:	0107d413          	srli	s0,a5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5472:	008ecbb3          	xor	s7,t4,s0
                if (x16 == 1)
    5476:	001bff93          	andi	t6,s7,1
                data >>= 1;
    547a:	002e5993          	srli	s3,t3,0x2
                if (x16 == 1)
    547e:	00145a93          	srli	s5,s0,0x1
    5482:	000f8863          	beqz	t6,5492 <core_bench_state+0x9c8>
                   crc |= 0x8000;
    5486:	016ac0b3          	xor	ra,s5,s6
    548a:	01009713          	slli	a4,ra,0x10
    548e:	01075a93          	srli	s5,a4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5492:	0159c533          	xor	a0,s3,s5
                if (x16 == 1)
    5496:	00157893          	andi	a7,a0,1
                data >>= 1;
    549a:	003e5813          	srli	a6,t3,0x3
                if (x16 == 1)
    549e:	001ad593          	srli	a1,s5,0x1
    54a2:	00088863          	beqz	a7,54b2 <core_bench_state+0x9e8>
                   crc |= 0x8000;
    54a6:	0165cf33          	xor	t5,a1,s6
    54aa:	010f1913          	slli	s2,t5,0x10
    54ae:	01095593          	srli	a1,s2,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    54b2:	00b84a33          	xor	s4,a6,a1
                if (x16 == 1)
    54b6:	001a7293          	andi	t0,s4,1
                data >>= 1;
    54ba:	004e5e93          	srli	t4,t3,0x4
                if (x16 == 1)
    54be:	0015d413          	srli	s0,a1,0x1
    54c2:	00028863          	beqz	t0,54d2 <core_bench_state+0xa08>
                   crc |= 0x8000;
    54c6:	01644333          	xor	t1,s0,s6
    54ca:	01031793          	slli	a5,t1,0x10
    54ce:	0107d413          	srli	s0,a5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    54d2:	008ecbb3          	xor	s7,t4,s0
                if (x16 == 1)
    54d6:	001bff93          	andi	t6,s7,1
                data >>= 1;
    54da:	005e5993          	srli	s3,t3,0x5
                if (x16 == 1)
    54de:	00145a93          	srli	s5,s0,0x1
    54e2:	000f8863          	beqz	t6,54f2 <core_bench_state+0xa28>
                   crc |= 0x8000;
    54e6:	016ac0b3          	xor	ra,s5,s6
    54ea:	01009713          	slli	a4,ra,0x10
    54ee:	01075a93          	srli	s5,a4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    54f2:	0159c533          	xor	a0,s3,s5
                if (x16 == 1)
    54f6:	00157893          	andi	a7,a0,1
                data >>= 1;
    54fa:	006e5813          	srli	a6,t3,0x6
                if (x16 == 1)
    54fe:	001ad593          	srli	a1,s5,0x1
    5502:	00088863          	beqz	a7,5512 <core_bench_state+0xa48>
                   crc |= 0x8000;
    5506:	0165cf33          	xor	t5,a1,s6
    550a:	010f1913          	slli	s2,t5,0x10
    550e:	01095593          	srli	a1,s2,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5512:	00b84a33          	xor	s4,a6,a1
                if (x16 == 1)
    5516:	001a7293          	andi	t0,s4,1
                data >>= 1;
    551a:	007e5e13          	srli	t3,t3,0x7
                if (x16 == 1)
    551e:	0015d793          	srli	a5,a1,0x1
    5522:	00028863          	beqz	t0,5532 <core_bench_state+0xa68>
                   crc |= 0x8000;
    5526:	0167ceb3          	xor	t4,a5,s6
    552a:	010e9313          	slli	t1,t4,0x10
    552e:	01035793          	srli	a5,t1,0x10
                if (x16 == 1)
    5532:	0017fb93          	andi	s7,a5,1
    5536:	0017d993          	srli	s3,a5,0x1
    553a:	01cb8863          	beq	s7,t3,554a <core_bench_state+0xa80>
                   crc |= 0x8000;
    553e:	0169c433          	xor	s0,s3,s6
    5542:	01041f93          	slli	t6,s0,0x10
    5546:	010fd993          	srli	s3,t6,0x10
        crc=crc16((ee_s16) (newval>>16) ,crc);
    554a:	0103d093          	srli	ra,t2,0x10
        crc=crcu8( (ee_u8) (newval)                             ,crc);
    554e:	0ff0f713          	zext.b	a4,ra
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5552:	01374ab3          	xor	s5,a4,s3
                if (x16 == 1)
    5556:	001af513          	andi	a0,s5,1
        return crcu16((ee_u16)newval, crc);
    555a:	0103d393          	srli	t2,t2,0x10
                data >>= 1;
    555e:	00175893          	srli	a7,a4,0x1
                if (x16 == 1)
    5562:	0019d913          	srli	s2,s3,0x1
    5566:	c519                	beqz	a0,5574 <core_bench_state+0xaaa>
                   crc |= 0x8000;
    5568:	01694833          	xor	a6,s2,s6
    556c:	01081f13          	slli	t5,a6,0x10
    5570:	010f5913          	srli	s2,t5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5574:	0128c5b3          	xor	a1,a7,s2
                if (x16 == 1)
    5578:	0015fa13          	andi	s4,a1,1
                data >>= 1;
    557c:	00275293          	srli	t0,a4,0x2
                if (x16 == 1)
    5580:	00195313          	srli	t1,s2,0x1
    5584:	000a0863          	beqz	s4,5594 <core_bench_state+0xaca>
                   crc |= 0x8000;
    5588:	01634e33          	xor	t3,t1,s6
    558c:	010e1e93          	slli	t4,t3,0x10
    5590:	010ed313          	srli	t1,t4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5594:	0062c7b3          	xor	a5,t0,t1
                if (x16 == 1)
    5598:	0017fb93          	andi	s7,a5,1
                data >>= 1;
    559c:	00375f93          	srli	t6,a4,0x3
                if (x16 == 1)
    55a0:	00135093          	srli	ra,t1,0x1
    55a4:	000b8863          	beqz	s7,55b4 <core_bench_state+0xaea>
                   crc |= 0x8000;
    55a8:	0160c433          	xor	s0,ra,s6
    55ac:	01041993          	slli	s3,s0,0x10
    55b0:	0109d093          	srli	ra,s3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    55b4:	001fcab3          	xor	s5,t6,ra
                if (x16 == 1)
    55b8:	001af893          	andi	a7,s5,1
                data >>= 1;
    55bc:	00475513          	srli	a0,a4,0x4
                if (x16 == 1)
    55c0:	0010d913          	srli	s2,ra,0x1
    55c4:	00088863          	beqz	a7,55d4 <core_bench_state+0xb0a>
                   crc |= 0x8000;
    55c8:	01694833          	xor	a6,s2,s6
    55cc:	01081f13          	slli	t5,a6,0x10
    55d0:	010f5913          	srli	s2,t5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    55d4:	012545b3          	xor	a1,a0,s2
                if (x16 == 1)
    55d8:	0015fa13          	andi	s4,a1,1
                data >>= 1;
    55dc:	00575293          	srli	t0,a4,0x5
                if (x16 == 1)
    55e0:	00195313          	srli	t1,s2,0x1
    55e4:	000a0863          	beqz	s4,55f4 <core_bench_state+0xb2a>
                   crc |= 0x8000;
    55e8:	01634e33          	xor	t3,t1,s6
    55ec:	010e1e93          	slli	t4,t3,0x10
    55f0:	010ed313          	srli	t1,t4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    55f4:	0062c7b3          	xor	a5,t0,t1
                if (x16 == 1)
    55f8:	0017fb93          	andi	s7,a5,1
                data >>= 1;
    55fc:	00675f93          	srli	t6,a4,0x6
                if (x16 == 1)
    5600:	00135093          	srli	ra,t1,0x1
    5604:	000b8863          	beqz	s7,5614 <core_bench_state+0xb4a>
                   crc |= 0x8000;
    5608:	0160c433          	xor	s0,ra,s6
    560c:	01041993          	slli	s3,s0,0x10
    5610:	0109d093          	srli	ra,s3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5614:	001fcab3          	xor	s5,t6,ra
                if (x16 == 1)
    5618:	001af893          	andi	a7,s5,1
                data >>= 1;
    561c:	831d                	srli	a4,a4,0x7
                if (x16 == 1)
    561e:	0010df13          	srli	t5,ra,0x1
    5622:	00088863          	beqz	a7,5632 <core_bench_state+0xb68>
                   crc |= 0x8000;
    5626:	016f4533          	xor	a0,t5,s6
    562a:	01051813          	slli	a6,a0,0x10
    562e:	01085f13          	srli	t5,a6,0x10
                if (x16 == 1)
    5632:	001f7913          	andi	s2,t5,1
    5636:	001f5293          	srli	t0,t5,0x1
    563a:	00e90863          	beq	s2,a4,564a <core_bench_state+0xb80>
                   crc |= 0x8000;
    563e:	0162c5b3          	xor	a1,t0,s6
    5642:	01059a13          	slli	s4,a1,0x10
    5646:	010a5293          	srli	t0,s4,0x10
        crc=crcu8( (ee_u8) ((newval)>>8)        ,crc);
    564a:	0083de13          	srli	t3,t2,0x8
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    564e:	005e4eb3          	xor	t4,t3,t0
                if (x16 == 1)
    5652:	001ef313          	andi	t1,t4,1
                data >>= 1;
    5656:	0093d393          	srli	t2,t2,0x9
                if (x16 == 1)
    565a:	0012df93          	srli	t6,t0,0x1
    565e:	00030863          	beqz	t1,566e <core_bench_state+0xba4>
                   crc |= 0x8000;
    5662:	016fc7b3          	xor	a5,t6,s6
    5666:	01079b93          	slli	s7,a5,0x10
    566a:	010bdf93          	srli	t6,s7,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    566e:	01f3c433          	xor	s0,t2,t6
                if (x16 == 1)
    5672:	00147993          	andi	s3,s0,1
                data >>= 1;
    5676:	002e5093          	srli	ra,t3,0x2
                if (x16 == 1)
    567a:	001fd713          	srli	a4,t6,0x1
    567e:	00098863          	beqz	s3,568e <core_bench_state+0xbc4>
                   crc |= 0x8000;
    5682:	01674ab3          	xor	s5,a4,s6
    5686:	010a9893          	slli	a7,s5,0x10
    568a:	0108d713          	srli	a4,a7,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    568e:	00e0c533          	xor	a0,ra,a4
                if (x16 == 1)
    5692:	00157813          	andi	a6,a0,1
                data >>= 1;
    5696:	003e5f13          	srli	t5,t3,0x3
                if (x16 == 1)
    569a:	00175a13          	srli	s4,a4,0x1
    569e:	00080863          	beqz	a6,56ae <core_bench_state+0xbe4>
                   crc |= 0x8000;
    56a2:	016a4933          	xor	s2,s4,s6
    56a6:	01091593          	slli	a1,s2,0x10
    56aa:	0105da13          	srli	s4,a1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    56ae:	014f42b3          	xor	t0,t5,s4
                if (x16 == 1)
    56b2:	0012fe93          	andi	t4,t0,1
                data >>= 1;
    56b6:	004e5313          	srli	t1,t3,0x4
                if (x16 == 1)
    56ba:	001a5b93          	srli	s7,s4,0x1
    56be:	000e8863          	beqz	t4,56ce <core_bench_state+0xc04>
                   crc |= 0x8000;
    56c2:	016bc3b3          	xor	t2,s7,s6
    56c6:	01039793          	slli	a5,t2,0x10
    56ca:	0107db93          	srli	s7,a5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    56ce:	01734fb3          	xor	t6,t1,s7
                if (x16 == 1)
    56d2:	001ff993          	andi	s3,t6,1
                data >>= 1;
    56d6:	005e5093          	srli	ra,t3,0x5
                if (x16 == 1)
    56da:	001bd893          	srli	a7,s7,0x1
    56de:	00098863          	beqz	s3,56ee <core_bench_state+0xc24>
                   crc |= 0x8000;
    56e2:	0168c433          	xor	s0,a7,s6
    56e6:	01041a93          	slli	s5,s0,0x10
    56ea:	010ad893          	srli	a7,s5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    56ee:	0110c733          	xor	a4,ra,a7
                if (x16 == 1)
    56f2:	00177513          	andi	a0,a4,1
                data >>= 1;
    56f6:	006e5813          	srli	a6,t3,0x6
                if (x16 == 1)
    56fa:	0018da13          	srli	s4,a7,0x1
    56fe:	c519                	beqz	a0,570c <core_bench_state+0xc42>
                   crc |= 0x8000;
    5700:	016a4f33          	xor	t5,s4,s6
    5704:	010f1913          	slli	s2,t5,0x10
    5708:	01095a13          	srli	s4,s2,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    570c:	014845b3          	xor	a1,a6,s4
                if (x16 == 1)
    5710:	0015f293          	andi	t0,a1,1
                data >>= 1;
    5714:	007e5e13          	srli	t3,t3,0x7
                if (x16 == 1)
    5718:	001a5393          	srli	t2,s4,0x1
    571c:	00028863          	beqz	t0,572c <core_bench_state+0xc62>
                   crc |= 0x8000;
    5720:	0163ceb3          	xor	t4,t2,s6
    5724:	010e9313          	slli	t1,t4,0x10
    5728:	01035393          	srli	t2,t1,0x10
                if (x16 == 1)
    572c:	0013f793          	andi	a5,t2,1
    5730:	0013d413          	srli	s0,t2,0x1
    5734:	01c78863          	beq	a5,t3,5744 <core_bench_state+0xc7a>
                   crc |= 0x8000;
    5738:	01644bb3          	xor	s7,s0,s6
    573c:	010b9f93          	slli	t6,s7,0x10
    5740:	010fd413          	srli	s0,t6,0x10
        for (i=0; i<NUM_CORE_STATES; i++) {
    5744:	0691                	addi	a3,a3,4
    5746:	0611                	addi	a2,a2,4
    5748:	80d490e3          	bne	s1,a3,4f48 <core_bench_state+0x47e>
}
    574c:	50f6                	lw	ra,124(sp)
    574e:	8522                	mv	a0,s0
    5750:	5466                	lw	s0,120(sp)
    5752:	54d6                	lw	s1,116(sp)
    5754:	5946                	lw	s2,112(sp)
    5756:	59b6                	lw	s3,108(sp)
    5758:	5a26                	lw	s4,104(sp)
    575a:	5a96                	lw	s5,100(sp)
    575c:	5b06                	lw	s6,96(sp)
    575e:	4bf6                	lw	s7,92(sp)
    5760:	6109                	addi	sp,sp,128
    5762:	8082                	ret
        p=memblock;
    5764:	c64a                	sw	s2,12(sp)
        while (p < (memblock+blksize)) { /* undo corruption is seed1 and seed2 are equal */
    5766:	e7696e63          	bltu	s2,s6,4de2 <core_bench_state+0x318>
    576a:	fd4ff06f          	j	4f3e <core_bench_state+0x474>
    576e:	86ca                	mv	a3,s2
                if (*p!=',')
    5770:	02c00993          	li	s3,44
    5774:	0006c383          	lbu	t2,0(a3)
                        *p^=(ee_u8)seed1;
    5778:	0173c733          	xor	a4,t2,s7
                if (*p!=',')
    577c:	01338463          	beq	t2,s3,5784 <core_bench_state+0xcba>
                        *p^=(ee_u8)seed1;
    5780:	00e68023          	sb	a4,0(a3)
        while (p < (memblock+blksize)) { /* insert some corruption */
    5784:	96d6                	add	a3,a3,s5
    5786:	ff66e7e3          	bltu	a3,s6,5774 <core_bench_state+0xcaa>
        while (*p!=0) {
    578a:	00094603          	lbu	a2,0(s2)
    578e:	00c10993          	addi	s3,sp,12
    5792:	da061063          	bnez	a2,4d32 <core_bench_state+0x268>
        p=memblock;
    5796:	c64a                	sw	s2,12(sp)
        while (p < (memblock+blksize)) { /* undo corruption is seed1 and seed2 are equal */
    5798:	fb697363          	bgeu	s2,s6,4f3e <core_bench_state+0x474>
                if (*p!=',')
    579c:	02c00093          	li	ra,44
    57a0:	00094603          	lbu	a2,0(s2)
                        *p^=(ee_u8)seed2;
    57a4:	01464733          	xor	a4,a2,s4
                if (*p!=',')
    57a8:	00160463          	beq	a2,ra,57b0 <core_bench_state+0xce6>
                        *p^=(ee_u8)seed2;
    57ac:	00e90023          	sb	a4,0(s2)
        while (p < (memblock+blksize)) { /* undo corruption is seed1 and seed2 are equal */
    57b0:	9956                	add	s2,s2,s5
    57b2:	ff6967e3          	bltu	s2,s6,57a0 <core_bench_state+0xcd6>
    57b6:	f88ff06f          	j	4f3e <core_bench_state+0x474>
        while (p < (memblock+blksize)) { /* insert some corruption */
    57ba:	00a90b33          	add	s6,s2,a0
    57be:	c1696363          	bltu	s2,s6,4bc4 <core_bench_state+0xfa>
    57c2:	f7cff06f          	j	4f3e <core_bench_state+0x474>

000057c6 <calc_func>:
ee_s16 calc_func(ee_s16 *pdata, core_results *res) {
    57c6:	1101                	addi	sp,sp,-32
    57c8:	ca26                	sw	s1,20(sp)
        ee_s16 data=*pdata;
    57ca:	00051483          	lh	s1,0(a0)
ee_s16 calc_func(ee_s16 *pdata, core_results *res) {
    57ce:	ce06                	sw	ra,28(sp)
    57d0:	cc22                	sw	s0,24(sp)
        ee_u8 optype=(data>>7) & 1; /* bit 7 indicates if the function result has been cached */
    57d2:	4074d793          	srai	a5,s1,0x7
ee_s16 calc_func(ee_s16 *pdata, core_results *res) {
    57d6:	c84a                	sw	s2,16(sp)
    57d8:	c64e                	sw	s3,12(sp)
        if (optype) /* if cached, use cache */
    57da:	0017f093          	andi	ra,a5,1
    57de:	00008b63          	beqz	ra,57f4 <calc_func+0x2e>
}
    57e2:	40f2                	lw	ra,28(sp)
    57e4:	4462                	lw	s0,24(sp)
    57e6:	4942                	lw	s2,16(sp)
    57e8:	49b2                	lw	s3,12(sp)
                return (data & 0x007f);
    57ea:	07f4f513          	andi	a0,s1,127
}
    57ee:	44d2                	lw	s1,20(sp)
    57f0:	6105                	addi	sp,sp,32
    57f2:	8082                	ret
                ee_s16 dtype=((data>>3) & 0xf); /* bits 3-6 is specific data for the operation */
    57f4:	4034d293          	srai	t0,s1,0x3
    57f8:	00f2f313          	andi	t1,t0,15
                dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
    57fc:	00431713          	slli	a4,t1,0x4
                ee_s16 flag=data & 0x7; /* bits 0-2 is type of function to perform */
    5800:	0074f693          	andi	a3,s1,7
                                retval=core_bench_state(res->size,res->memblock[3],res->seed1,res->seed2,dtype,res->crc);
    5804:	0385d403          	lhu	s0,56(a1)
    5808:	89aa                	mv	s3,a0
    580a:	892e                	mv	s2,a1
                dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
    580c:	00676733          	or	a4,a4,t1
                switch (flag) {
    5810:	50068563          	beqz	a3,5d1a <calc_func+0x554>
    5814:	4505                	li	a0,1
    5816:	4ea69d63          	bne	a3,a0,5d10 <calc_func+0x54a>
        crc=crc16(matrix_test(N,C,A,B,val),crc);
    581a:	55d0                	lw	a2,44(a1)
    581c:	5994                	lw	a3,48(a1)
    581e:	02892503          	lw	a0,40(s2)
    5822:	59cc                	lw	a1,52(a1)
    5824:	a53fb0ef          	jal	ra,1276 <matrix_test>
        crc=crcu8( (ee_u8) (newval)                             ,crc);
    5828:	0ff57593          	zext.b	a1,a0
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    582c:	0085c633          	xor	a2,a1,s0
        return crcu16((ee_u16)newval, crc);
    5830:	01051e13          	slli	t3,a0,0x10
                if (x16 == 1)
    5834:	00167893          	andi	a7,a2,1
        return crcu16((ee_u16)newval, crc);
    5838:	010e5e93          	srli	t4,t3,0x10
                data >>= 1;
    583c:	0015df13          	srli	t5,a1,0x1
                crc >>= 1;
    5840:	00145313          	srli	t1,s0,0x1
                if (x16 == 1)
    5844:	00088b63          	beqz	a7,585a <calc_func+0x94>
                   crc |= 0x8000;
    5848:	7fe9                	lui	t6,0xffffa
    584a:	001f8793          	addi	a5,t6,1 # ffffa001 <tohost+0x2fa7a001>
    584e:	00f340b3          	xor	ra,t1,a5
    5852:	01009293          	slli	t0,ra,0x10
    5856:	0102d313          	srli	t1,t0,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    585a:	006f4733          	xor	a4,t5,t1
                if (x16 == 1)
    585e:	00177393          	andi	t2,a4,1
                data >>= 1;
    5862:	0025d693          	srli	a3,a1,0x2
                crc >>= 1;
    5866:	00135893          	srli	a7,t1,0x1
                if (x16 == 1)
    586a:	00038b63          	beqz	t2,5880 <calc_func+0xba>
                   crc |= 0x8000;
    586e:	7869                	lui	a6,0xffffa
    5870:	00180413          	addi	s0,a6,1 # ffffa001 <tohost+0x2fa7a001>
    5874:	0088c533          	xor	a0,a7,s0
    5878:	01051613          	slli	a2,a0,0x10
    587c:	01065893          	srli	a7,a2,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5880:	0116ce33          	xor	t3,a3,a7
                if (x16 == 1)
    5884:	001e7f13          	andi	t5,t3,1
                data >>= 1;
    5888:	0035df93          	srli	t6,a1,0x3
                crc >>= 1;
    588c:	0018d713          	srli	a4,a7,0x1
                if (x16 == 1)
    5890:	000f0b63          	beqz	t5,58a6 <calc_func+0xe0>
                   crc |= 0x8000;
    5894:	77e9                	lui	a5,0xffffa
    5896:	00178093          	addi	ra,a5,1 # ffffa001 <tohost+0x2fa7a001>
    589a:	001742b3          	xor	t0,a4,ra
    589e:	01029313          	slli	t1,t0,0x10
    58a2:	01035713          	srli	a4,t1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    58a6:	00efc3b3          	xor	t2,t6,a4
                if (x16 == 1)
    58aa:	0013f813          	andi	a6,t2,1
                data >>= 1;
    58ae:	0045d693          	srli	a3,a1,0x4
                crc >>= 1;
    58b2:	00175e13          	srli	t3,a4,0x1
                if (x16 == 1)
    58b6:	00080b63          	beqz	a6,58cc <calc_func+0x106>
                   crc |= 0x8000;
    58ba:	7469                	lui	s0,0xffffa
    58bc:	00140613          	addi	a2,s0,1 # ffffa001 <tohost+0x2fa7a001>
    58c0:	00ce4533          	xor	a0,t3,a2
    58c4:	01051893          	slli	a7,a0,0x10
    58c8:	0108de13          	srli	t3,a7,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    58cc:	01c6cf33          	xor	t5,a3,t3
                if (x16 == 1)
    58d0:	001f7f93          	andi	t6,t5,1
                data >>= 1;
    58d4:	0055d793          	srli	a5,a1,0x5
                crc >>= 1;
    58d8:	001e5393          	srli	t2,t3,0x1
                if (x16 == 1)
    58dc:	000f8b63          	beqz	t6,58f2 <calc_func+0x12c>
                   crc |= 0x8000;
    58e0:	70e9                	lui	ra,0xffffa
    58e2:	00108293          	addi	t0,ra,1 # ffffa001 <tohost+0x2fa7a001>
    58e6:	0053c333          	xor	t1,t2,t0
    58ea:	01031713          	slli	a4,t1,0x10
    58ee:	01075393          	srli	t2,a4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    58f2:	0077c833          	xor	a6,a5,t2
                if (x16 == 1)
    58f6:	00187413          	andi	s0,a6,1
                data >>= 1;
    58fa:	0065d693          	srli	a3,a1,0x6
                crc >>= 1;
    58fe:	0013df13          	srli	t5,t2,0x1
                if (x16 == 1)
    5902:	c811                	beqz	s0,5916 <calc_func+0x150>
                   crc |= 0x8000;
    5904:	7669                	lui	a2,0xffffa
    5906:	00160893          	addi	a7,a2,1 # ffffa001 <tohost+0x2fa7a001>
    590a:	011f4533          	xor	a0,t5,a7
    590e:	01051e13          	slli	t3,a0,0x10
    5912:	010e5f13          	srli	t5,t3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5916:	01e6cfb3          	xor	t6,a3,t5
                if (x16 == 1)
    591a:	001ff793          	andi	a5,t6,1
                data >>= 1;
    591e:	819d                	srli	a1,a1,0x7
                crc >>= 1;
    5920:	001f5393          	srli	t2,t5,0x1
                if (x16 == 1)
    5924:	cb91                	beqz	a5,5938 <calc_func+0x172>
                   crc |= 0x8000;
    5926:	70e9                	lui	ra,0xffffa
    5928:	00108293          	addi	t0,ra,1 # ffffa001 <tohost+0x2fa7a001>
    592c:	0053c333          	xor	t1,t2,t0
    5930:	01031713          	slli	a4,t1,0x10
    5934:	01075393          	srli	t2,a4,0x10
                if (x16 == 1)
    5938:	0013f813          	andi	a6,t2,1
                crc >>= 1;
    593c:	0013d513          	srli	a0,t2,0x1
                if (x16 == 1)
    5940:	00b80b63          	beq	a6,a1,5956 <calc_func+0x190>
                   crc |= 0x8000;
    5944:	7469                	lui	s0,0xffffa
    5946:	00140693          	addi	a3,s0,1 # ffffa001 <tohost+0x2fa7a001>
    594a:	00d54633          	xor	a2,a0,a3
    594e:	01061893          	slli	a7,a2,0x10
    5952:	0108d513          	srli	a0,a7,0x10
        crc=crcu8( (ee_u8) ((newval)>>8)        ,crc);
    5956:	008ede13          	srli	t3,t4,0x8
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    595a:	00ae4f33          	xor	t5,t3,a0
                if (x16 == 1)
    595e:	001f7f93          	andi	t6,t5,1
                data >>= 1;
    5962:	009ede93          	srli	t4,t4,0x9
                if (x16 == 1)
    5966:	00155313          	srli	t1,a0,0x1
    596a:	000f8b63          	beqz	t6,5980 <calc_func+0x1ba>
                   crc |= 0x8000;
    596e:	77e9                	lui	a5,0xffffa
    5970:	00178593          	addi	a1,a5,1 # ffffa001 <tohost+0x2fa7a001>
    5974:	00b340b3          	xor	ra,t1,a1
    5978:	01009293          	slli	t0,ra,0x10
    597c:	0102d313          	srli	t1,t0,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5980:	006ec733          	xor	a4,t4,t1
                if (x16 == 1)
    5984:	00177393          	andi	t2,a4,1
                data >>= 1;
    5988:	002e5813          	srli	a6,t3,0x2
                if (x16 == 1)
    598c:	00135513          	srli	a0,t1,0x1
    5990:	00038b63          	beqz	t2,59a6 <calc_func+0x1e0>
                   crc |= 0x8000;
    5994:	7469                	lui	s0,0xffffa
    5996:	00140693          	addi	a3,s0,1 # ffffa001 <tohost+0x2fa7a001>
    599a:	00d54633          	xor	a2,a0,a3
    599e:	01061893          	slli	a7,a2,0x10
    59a2:	0108d513          	srli	a0,a7,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    59a6:	00a84f33          	xor	t5,a6,a0
                if (x16 == 1)
    59aa:	001f7f93          	andi	t6,t5,1
                data >>= 1;
    59ae:	003e5e93          	srli	t4,t3,0x3
                if (x16 == 1)
    59b2:	00155313          	srli	t1,a0,0x1
    59b6:	000f8b63          	beqz	t6,59cc <calc_func+0x206>
                   crc |= 0x8000;
    59ba:	77e9                	lui	a5,0xffffa
    59bc:	00178593          	addi	a1,a5,1 # ffffa001 <tohost+0x2fa7a001>
    59c0:	00b340b3          	xor	ra,t1,a1
    59c4:	01009293          	slli	t0,ra,0x10
    59c8:	0102d313          	srli	t1,t0,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    59cc:	006ec733          	xor	a4,t4,t1
                if (x16 == 1)
    59d0:	00177393          	andi	t2,a4,1
                data >>= 1;
    59d4:	004e5813          	srli	a6,t3,0x4
                if (x16 == 1)
    59d8:	00135513          	srli	a0,t1,0x1
    59dc:	00038b63          	beqz	t2,59f2 <calc_func+0x22c>
                   crc |= 0x8000;
    59e0:	7469                	lui	s0,0xffffa
    59e2:	00140693          	addi	a3,s0,1 # ffffa001 <tohost+0x2fa7a001>
    59e6:	00d54633          	xor	a2,a0,a3
    59ea:	01061893          	slli	a7,a2,0x10
    59ee:	0108d513          	srli	a0,a7,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    59f2:	00a84f33          	xor	t5,a6,a0
                if (x16 == 1)
    59f6:	001f7f93          	andi	t6,t5,1
                data >>= 1;
    59fa:	005e5e93          	srli	t4,t3,0x5
                if (x16 == 1)
    59fe:	00155313          	srli	t1,a0,0x1
    5a02:	000f8b63          	beqz	t6,5a18 <calc_func+0x252>
                   crc |= 0x8000;
    5a06:	77e9                	lui	a5,0xffffa
    5a08:	00178593          	addi	a1,a5,1 # ffffa001 <tohost+0x2fa7a001>
    5a0c:	00b340b3          	xor	ra,t1,a1
    5a10:	01009293          	slli	t0,ra,0x10
    5a14:	0102d313          	srli	t1,t0,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5a18:	006ec733          	xor	a4,t4,t1
                if (x16 == 1)
    5a1c:	00177393          	andi	t2,a4,1
                data >>= 1;
    5a20:	006e5813          	srli	a6,t3,0x6
                if (x16 == 1)
    5a24:	00135513          	srli	a0,t1,0x1
    5a28:	00038b63          	beqz	t2,5a3e <calc_func+0x278>
                   crc |= 0x8000;
    5a2c:	7469                	lui	s0,0xffffa
    5a2e:	00140693          	addi	a3,s0,1 # ffffa001 <tohost+0x2fa7a001>
    5a32:	00d54633          	xor	a2,a0,a3
    5a36:	01061893          	slli	a7,a2,0x10
    5a3a:	0108d513          	srli	a0,a7,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5a3e:	00a84f33          	xor	t5,a6,a0
                if (x16 == 1)
    5a42:	001f7f93          	andi	t6,t5,1
                data >>= 1;
    5a46:	007e5e13          	srli	t3,t3,0x7
                if (x16 == 1)
    5a4a:	00155293          	srli	t0,a0,0x1
    5a4e:	000f8b63          	beqz	t6,5a64 <calc_func+0x29e>
                   crc |= 0x8000;
    5a52:	7ee9                	lui	t4,0xffffa
    5a54:	001e8793          	addi	a5,t4,1 # ffffa001 <tohost+0x2fa7a001>
    5a58:	00f2c5b3          	xor	a1,t0,a5
    5a5c:	01059093          	slli	ra,a1,0x10
    5a60:	0100d293          	srli	t0,ra,0x10
                if (x16 == 1)
    5a64:	0012f313          	andi	t1,t0,1
    5a68:	0012d513          	srli	a0,t0,0x1
    5a6c:	01c30b63          	beq	t1,t3,5a82 <calc_func+0x2bc>
                   crc |= 0x8000;
    5a70:	7769                	lui	a4,0xffffa
    5a72:	00170393          	addi	t2,a4,1 # ffffa001 <tohost+0x2fa7a001>
    5a76:	00754833          	xor	a6,a0,t2
    5a7a:	01081413          	slli	s0,a6,0x10
    5a7e:	01045513          	srli	a0,s0,0x10
                                if (res->crcmatrix==0)
    5a82:	03c95683          	lhu	a3,60(s2)
    5a86:	e299                	bnez	a3,5a8c <calc_func+0x2c6>
                                        res->crcmatrix=retval;
    5a88:	02a91e23          	sh	a0,60(s2)
    5a8c:	03895403          	lhu	s0,56(s2)
                                retval=core_bench_matrix(&(res->mat),dtype,res->crc);
    5a90:	01051613          	slli	a2,a0,0x10
    5a94:	41065893          	srai	a7,a2,0x10
        crc=crcu8( (ee_u8) (newval)                             ,crc);
    5a98:	0ff8ff13          	zext.b	t5,a7
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5a9c:	008f4fb3          	xor	t6,t5,s0
                if (x16 == 1)
    5aa0:	001ffe13          	andi	t3,t6,1
                data >>= 1;
    5aa4:	001f5e93          	srli	t4,t5,0x1
                if (x16 == 1)
    5aa8:	00145313          	srli	t1,s0,0x1
    5aac:	000e0b63          	beqz	t3,5ac2 <calc_func+0x2fc>
                   crc |= 0x8000;
    5ab0:	75e9                	lui	a1,0xffffa
    5ab2:	00158093          	addi	ra,a1,1 # ffffa001 <tohost+0x2fa7a001>
    5ab6:	001347b3          	xor	a5,t1,ra
    5aba:	01079293          	slli	t0,a5,0x10
    5abe:	0102d313          	srli	t1,t0,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5ac2:	006ec733          	xor	a4,t4,t1
                if (x16 == 1)
    5ac6:	00177393          	andi	t2,a4,1
                data >>= 1;
    5aca:	002f5813          	srli	a6,t5,0x2
                if (x16 == 1)
    5ace:	00135e13          	srli	t3,t1,0x1
    5ad2:	00038b63          	beqz	t2,5ae8 <calc_func+0x322>
                   crc |= 0x8000;
    5ad6:	76e9                	lui	a3,0xffffa
    5ad8:	00168413          	addi	s0,a3,1 # ffffa001 <tohost+0x2fa7a001>
    5adc:	008e4633          	xor	a2,t3,s0
    5ae0:	01061f93          	slli	t6,a2,0x10
    5ae4:	010fde13          	srli	t3,t6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5ae8:	01c84eb3          	xor	t4,a6,t3
                if (x16 == 1)
    5aec:	001ef093          	andi	ra,t4,1
                data >>= 1;
    5af0:	003f5593          	srli	a1,t5,0x3
                if (x16 == 1)
    5af4:	001e5393          	srli	t2,t3,0x1
    5af8:	00008b63          	beqz	ra,5b0e <calc_func+0x348>
                   crc |= 0x8000;
    5afc:	72e9                	lui	t0,0xffffa
    5afe:	00128313          	addi	t1,t0,1 # ffffa001 <tohost+0x2fa7a001>
    5b02:	0063c7b3          	xor	a5,t2,t1
    5b06:	01079713          	slli	a4,a5,0x10
    5b0a:	01075393          	srli	t2,a4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5b0e:	0075c833          	xor	a6,a1,t2
                if (x16 == 1)
    5b12:	00187693          	andi	a3,a6,1
                data >>= 1;
    5b16:	004f5413          	srli	s0,t5,0x4
                if (x16 == 1)
    5b1a:	0013d093          	srli	ra,t2,0x1
    5b1e:	ca91                	beqz	a3,5b32 <calc_func+0x36c>
                   crc |= 0x8000;
    5b20:	7669                	lui	a2,0xffffa
    5b22:	00160f93          	addi	t6,a2,1 # ffffa001 <tohost+0x2fa7a001>
    5b26:	01f0ce33          	xor	t3,ra,t6
    5b2a:	010e1e93          	slli	t4,t3,0x10
    5b2e:	010ed093          	srli	ra,t4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5b32:	001445b3          	xor	a1,s0,ra
                if (x16 == 1)
    5b36:	0015f293          	andi	t0,a1,1
                data >>= 1;
    5b3a:	005f5313          	srli	t1,t5,0x5
                if (x16 == 1)
    5b3e:	0010d693          	srli	a3,ra,0x1
    5b42:	00028b63          	beqz	t0,5b58 <calc_func+0x392>
                   crc |= 0x8000;
    5b46:	7769                	lui	a4,0xffffa
    5b48:	00170393          	addi	t2,a4,1 # ffffa001 <tohost+0x2fa7a001>
    5b4c:	0076c7b3          	xor	a5,a3,t2
    5b50:	01079813          	slli	a6,a5,0x10
    5b54:	01085693          	srli	a3,a6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5b58:	00d34433          	xor	s0,t1,a3
                if (x16 == 1)
    5b5c:	00147f93          	andi	t6,s0,1
                data >>= 1;
    5b60:	006f5613          	srli	a2,t5,0x6
                if (x16 == 1)
    5b64:	0016d293          	srli	t0,a3,0x1
    5b68:	000f8b63          	beqz	t6,5b7e <calc_func+0x3b8>
                   crc |= 0x8000;
    5b6c:	7e69                	lui	t3,0xffffa
    5b6e:	001e0e93          	addi	t4,t3,1 # ffffa001 <tohost+0x2fa7a001>
    5b72:	01d2c0b3          	xor	ra,t0,t4
    5b76:	01009593          	slli	a1,ra,0x10
    5b7a:	0105d293          	srli	t0,a1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5b7e:	00564333          	xor	t1,a2,t0
                if (x16 == 1)
    5b82:	00137713          	andi	a4,t1,1
                data >>= 1;
    5b86:	007f5f13          	srli	t5,t5,0x7
                if (x16 == 1)
    5b8a:	0012d413          	srli	s0,t0,0x1
    5b8e:	cb11                	beqz	a4,5ba2 <calc_func+0x3dc>
                   crc |= 0x8000;
    5b90:	73e9                	lui	t2,0xffffa
    5b92:	00138813          	addi	a6,t2,1 # ffffa001 <tohost+0x2fa7a001>
    5b96:	010447b3          	xor	a5,s0,a6
    5b9a:	01079693          	slli	a3,a5,0x10
    5b9e:	0106d413          	srli	s0,a3,0x10
                if (x16 == 1)
    5ba2:	00147f93          	andi	t6,s0,1
    5ba6:	00145593          	srli	a1,s0,0x1
    5baa:	01ef8b63          	beq	t6,t5,5bc0 <calc_func+0x3fa>
                   crc |= 0x8000;
    5bae:	7669                	lui	a2,0xffffa
    5bb0:	00160e13          	addi	t3,a2,1 # ffffa001 <tohost+0x2fa7a001>
    5bb4:	01c5ceb3          	xor	t4,a1,t3
    5bb8:	010e9093          	slli	ra,t4,0x10
    5bbc:	0100d593          	srli	a1,ra,0x10
        crc=crcu8( (ee_u8) ((newval)>>8)        ,crc);
    5bc0:	8121                	srli	a0,a0,0x8
    5bc2:	0ff57293          	zext.b	t0,a0
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5bc6:	00b2c333          	xor	t1,t0,a1
                if (x16 == 1)
    5bca:	00137713          	andi	a4,t1,1
                data >>= 1;
    5bce:	0012df13          	srli	t5,t0,0x1
                if (x16 == 1)
    5bd2:	0015d413          	srli	s0,a1,0x1
    5bd6:	cb11                	beqz	a4,5bea <calc_func+0x424>
                   crc |= 0x8000;
    5bd8:	73e9                	lui	t2,0xffffa
    5bda:	00138813          	addi	a6,t2,1 # ffffa001 <tohost+0x2fa7a001>
    5bde:	010447b3          	xor	a5,s0,a6
    5be2:	01079693          	slli	a3,a5,0x10
    5be6:	0106d413          	srli	s0,a3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5bea:	008f4fb3          	xor	t6,t5,s0
                if (x16 == 1)
    5bee:	001ff613          	andi	a2,t6,1
                data >>= 1;
    5bf2:	0022de13          	srli	t3,t0,0x2
                if (x16 == 1)
    5bf6:	00145313          	srli	t1,s0,0x1
    5bfa:	ca11                	beqz	a2,5c0e <calc_func+0x448>
                   crc |= 0x8000;
    5bfc:	7ee9                	lui	t4,0xffffa
    5bfe:	001e8093          	addi	ra,t4,1 # ffffa001 <tohost+0x2fa7a001>
    5c02:	001345b3          	xor	a1,t1,ra
    5c06:	01059513          	slli	a0,a1,0x10
    5c0a:	01055313          	srli	t1,a0,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5c0e:	006e4733          	xor	a4,t3,t1
                if (x16 == 1)
    5c12:	00177f13          	andi	t5,a4,1
                data >>= 1;
    5c16:	0032d393          	srli	t2,t0,0x3
                if (x16 == 1)
    5c1a:	00135f93          	srli	t6,t1,0x1
    5c1e:	000f0b63          	beqz	t5,5c34 <calc_func+0x46e>
                   crc |= 0x8000;
    5c22:	7869                	lui	a6,0xffffa
    5c24:	00180693          	addi	a3,a6,1 # ffffa001 <tohost+0x2fa7a001>
    5c28:	00dfc7b3          	xor	a5,t6,a3
    5c2c:	01079413          	slli	s0,a5,0x10
    5c30:	01045f93          	srli	t6,s0,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5c34:	01f3c633          	xor	a2,t2,t6
                if (x16 == 1)
    5c38:	00167e13          	andi	t3,a2,1
                data >>= 1;
    5c3c:	0042de93          	srli	t4,t0,0x4
                if (x16 == 1)
    5c40:	001fd713          	srli	a4,t6,0x1
    5c44:	000e0b63          	beqz	t3,5c5a <calc_func+0x494>
                   crc |= 0x8000;
    5c48:	70e9                	lui	ra,0xffffa
    5c4a:	00108593          	addi	a1,ra,1 # ffffa001 <tohost+0x2fa7a001>
    5c4e:	00b74533          	xor	a0,a4,a1
    5c52:	01051313          	slli	t1,a0,0x10
    5c56:	01035713          	srli	a4,t1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5c5a:	00eecf33          	xor	t5,t4,a4
                if (x16 == 1)
    5c5e:	001f7393          	andi	t2,t5,1
                data >>= 1;
    5c62:	0052d813          	srli	a6,t0,0x5
                if (x16 == 1)
    5c66:	00175e13          	srli	t3,a4,0x1
    5c6a:	00038b63          	beqz	t2,5c80 <calc_func+0x4ba>
                   crc |= 0x8000;
    5c6e:	76e9                	lui	a3,0xffffa
    5c70:	00168413          	addi	s0,a3,1 # ffffa001 <tohost+0x2fa7a001>
    5c74:	008e47b3          	xor	a5,t3,s0
    5c78:	01079f93          	slli	t6,a5,0x10
    5c7c:	010fde13          	srli	t3,t6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5c80:	01c84633          	xor	a2,a6,t3
                if (x16 == 1)
    5c84:	00167e93          	andi	t4,a2,1
                data >>= 1;
    5c88:	0062d093          	srli	ra,t0,0x6
                if (x16 == 1)
    5c8c:	001e5f13          	srli	t5,t3,0x1
    5c90:	000e8b63          	beqz	t4,5ca6 <calc_func+0x4e0>
                   crc |= 0x8000;
    5c94:	75e9                	lui	a1,0xffffa
    5c96:	00158513          	addi	a0,a1,1 # ffffa001 <tohost+0x2fa7a001>
    5c9a:	00af4333          	xor	t1,t5,a0
    5c9e:	01031713          	slli	a4,t1,0x10
    5ca2:	01075f13          	srli	t5,a4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5ca6:	01e0c3b3          	xor	t2,ra,t5
                if (x16 == 1)
    5caa:	0013f813          	andi	a6,t2,1
                data >>= 1;
    5cae:	0072d293          	srli	t0,t0,0x7
                if (x16 == 1)
    5cb2:	001f5e13          	srli	t3,t5,0x1
    5cb6:	00080b63          	beqz	a6,5ccc <calc_func+0x506>
                   crc |= 0x8000;
    5cba:	76e9                	lui	a3,0xffffa
    5cbc:	00168413          	addi	s0,a3,1 # ffffa001 <tohost+0x2fa7a001>
    5cc0:	008e47b3          	xor	a5,t3,s0
    5cc4:	01079f93          	slli	t6,a5,0x10
    5cc8:	010fde13          	srli	t3,t6,0x10
                if (x16 == 1)
    5ccc:	001e7613          	andi	a2,t3,1
    5cd0:	001e5313          	srli	t1,t3,0x1
    5cd4:	00560b63          	beq	a2,t0,5cea <calc_func+0x524>
                   crc |= 0x8000;
    5cd8:	7ee9                	lui	t4,0xffffa
    5cda:	001e8093          	addi	ra,t4,1 # ffffa001 <tohost+0x2fa7a001>
    5cde:	001345b3          	xor	a1,t1,ra
    5ce2:	01059513          	slli	a0,a1,0x10
    5ce6:	01055313          	srli	t1,a0,0x10
                retval &= 0x007f;
    5cea:	07f8f513          	andi	a0,a7,127
                *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
    5cee:	f004f493          	andi	s1,s1,-256
}
    5cf2:	40f2                	lw	ra,28(sp)
    5cf4:	4462                	lw	s0,24(sp)
                *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
    5cf6:	009568b3          	or	a7,a0,s1
                res->crc=crcu16(retval,res->crc);
    5cfa:	02691c23          	sh	t1,56(s2)
                *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
    5cfe:	0808e913          	ori	s2,a7,128
    5d02:	01299023          	sh	s2,0(s3)
}
    5d06:	44d2                	lw	s1,20(sp)
    5d08:	4942                	lw	s2,16(sp)
    5d0a:	49b2                	lw	s3,12(sp)
    5d0c:	6105                	addi	sp,sp,32
    5d0e:	8082                	ret
                res->crc=crcu16(retval,res->crc);
    5d10:	01049513          	slli	a0,s1,0x10
    5d14:	8141                	srli	a0,a0,0x10
        ee_s16 data=*pdata;
    5d16:	88a6                	mv	a7,s1
    5d18:	b341                	j	5a98 <calc_func+0x2d2>
                                if (dtype<0x22) /* set min period for bit corruption */
    5d1a:	02200393          	li	t2,34
    5d1e:	883a                	mv	a6,a4
    5d20:	00775463          	bge	a4,t2,5d28 <calc_func+0x562>
    5d24:	02200813          	li	a6,34
                                retval=core_bench_state(res->size,res->memblock[3],res->seed1,res->seed2,dtype,res->crc);
    5d28:	00291683          	lh	a3,2(s2)
    5d2c:	00091603          	lh	a2,0(s2)
    5d30:	01492583          	lw	a1,20(s2)
    5d34:	01892503          	lw	a0,24(s2)
    5d38:	87a2                	mv	a5,s0
    5d3a:	0ff87713          	zext.b	a4,a6
    5d3e:	d8dfe0ef          	jal	ra,4aca <core_bench_state>
                                if (res->crcstate==0)
    5d42:	03e95403          	lhu	s0,62(s2)
    5d46:	d40413e3          	bnez	s0,5a8c <calc_func+0x2c6>
                                        res->crcstate=retval;
    5d4a:	02a91f23          	sh	a0,62(s2)
    5d4e:	bb3d                	j	5a8c <calc_func+0x2c6>

00005d50 <cmp_complex>:
ee_s32 cmp_complex(list_data *a, list_data *b, core_results *res) {
    5d50:	1101                	addi	sp,sp,-32
    5d52:	c84a                	sw	s2,16(sp)
        ee_s16 data=*pdata;
    5d54:	00051903          	lh	s2,0(a0)
ee_s32 cmp_complex(list_data *a, list_data *b, core_results *res) {
    5d58:	ce06                	sw	ra,28(sp)
    5d5a:	ca26                	sw	s1,20(sp)
        ee_u8 optype=(data>>7) & 1; /* bit 7 indicates if the function result has been cached */
    5d5c:	40795793          	srai	a5,s2,0x7
ee_s32 cmp_complex(list_data *a, list_data *b, core_results *res) {
    5d60:	c64e                	sw	s3,12(sp)
    5d62:	c452                	sw	s4,8(sp)
    5d64:	cc22                	sw	s0,24(sp)
    5d66:	c256                	sw	s5,4(sp)
        if (optype) /* if cached, use cache */
    5d68:	0017f093          	andi	ra,a5,1
ee_s32 cmp_complex(list_data *a, list_data *b, core_results *res) {
    5d6c:	89ae                	mv	s3,a1
    5d6e:	84b2                	mv	s1,a2
                return (data & 0x007f);
    5d70:	07f97a13          	andi	s4,s2,127
        if (optype) /* if cached, use cache */
    5d74:	2a009263          	bnez	ra,6018 <cmp_complex+0x2c8>
                ee_s16 dtype=((data>>3) & 0xf); /* bits 3-6 is specific data for the operation */
    5d78:	40395713          	srai	a4,s2,0x3
    5d7c:	00f77293          	andi	t0,a4,15
                dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
    5d80:	00429693          	slli	a3,t0,0x4
                ee_s16 flag=data & 0x7; /* bits 0-2 is type of function to perform */
    5d84:	00797313          	andi	t1,s2,7
                                retval=core_bench_state(res->size,res->memblock[3],res->seed1,res->seed2,dtype,res->crc);
    5d88:	03865403          	lhu	s0,56(a2)
    5d8c:	8aaa                	mv	s5,a0
                dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
    5d8e:	00d2e733          	or	a4,t0,a3
                switch (flag) {
    5d92:	7e030d63          	beqz	t1,658c <cmp_complex+0x83c>
    5d96:	4505                	li	a0,1
    5d98:	02a309e3          	beq	t1,a0,65ca <cmp_complex+0x87a>
                res->crc=crcu16(retval,res->crc);
    5d9c:	01091713          	slli	a4,s2,0x10
    5da0:	01075513          	srli	a0,a4,0x10
        ee_s16 data=*pdata;
    5da4:	82ca                	mv	t0,s2
        crc=crcu8( (ee_u8) (newval)                             ,crc);
    5da6:	0ff2f313          	zext.b	t1,t0
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5daa:	008346b3          	xor	a3,t1,s0
                if (x16 == 1)
    5dae:	0016f393          	andi	t2,a3,1
                data >>= 1;
    5db2:	00135813          	srli	a6,t1,0x1
                if (x16 == 1)
    5db6:	00145593          	srli	a1,s0,0x1
    5dba:	00038b63          	beqz	t2,5dd0 <cmp_complex+0x80>
                   crc |= 0x8000;
    5dbe:	78e9                	lui	a7,0xffffa
    5dc0:	00188e13          	addi	t3,a7,1 # ffffa001 <tohost+0x2fa7a001>
    5dc4:	01c5c633          	xor	a2,a1,t3
    5dc8:	01061a13          	slli	s4,a2,0x10
    5dcc:	010a5593          	srli	a1,s4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5dd0:	00b84eb3          	xor	t4,a6,a1
                if (x16 == 1)
    5dd4:	001eff13          	andi	t5,t4,1
                data >>= 1;
    5dd8:	00235f93          	srli	t6,t1,0x2
                if (x16 == 1)
    5ddc:	0015d393          	srli	t2,a1,0x1
    5de0:	000f0b63          	beqz	t5,5df6 <cmp_complex+0xa6>
                   crc |= 0x8000;
    5de4:	70e9                	lui	ra,0xffffa
    5de6:	00108413          	addi	s0,ra,1 # ffffa001 <tohost+0x2fa7a001>
    5dea:	0083c7b3          	xor	a5,t2,s0
    5dee:	01079713          	slli	a4,a5,0x10
    5df2:	01075393          	srli	t2,a4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5df6:	007fc6b3          	xor	a3,t6,t2
                if (x16 == 1)
    5dfa:	0016f813          	andi	a6,a3,1
                data >>= 1;
    5dfe:	00335893          	srli	a7,t1,0x3
                if (x16 == 1)
    5e02:	0013de93          	srli	t4,t2,0x1
    5e06:	00080b63          	beqz	a6,5e1c <cmp_complex+0xcc>
                   crc |= 0x8000;
    5e0a:	7e69                	lui	t3,0xffffa
    5e0c:	001e0613          	addi	a2,t3,1 # ffffa001 <tohost+0x2fa7a001>
    5e10:	00ceca33          	xor	s4,t4,a2
    5e14:	010a1593          	slli	a1,s4,0x10
    5e18:	0105de93          	srli	t4,a1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5e1c:	01d8cf33          	xor	t5,a7,t4
                if (x16 == 1)
    5e20:	001f7f93          	andi	t6,t5,1
                data >>= 1;
    5e24:	00435093          	srli	ra,t1,0x4
                if (x16 == 1)
    5e28:	001ed813          	srli	a6,t4,0x1
    5e2c:	000f8b63          	beqz	t6,5e42 <cmp_complex+0xf2>
                   crc |= 0x8000;
    5e30:	7469                	lui	s0,0xffffa
    5e32:	00140713          	addi	a4,s0,1 # ffffa001 <tohost+0x2fa7a001>
    5e36:	00e847b3          	xor	a5,a6,a4
    5e3a:	01079393          	slli	t2,a5,0x10
    5e3e:	0103d813          	srli	a6,t2,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5e42:	0100c6b3          	xor	a3,ra,a6
                if (x16 == 1)
    5e46:	0016f893          	andi	a7,a3,1
                data >>= 1;
    5e4a:	00535e13          	srli	t3,t1,0x5
                if (x16 == 1)
    5e4e:	00185f13          	srli	t5,a6,0x1
    5e52:	00088b63          	beqz	a7,5e68 <cmp_complex+0x118>
                   crc |= 0x8000;
    5e56:	7669                	lui	a2,0xffffa
    5e58:	00160a13          	addi	s4,a2,1 # ffffa001 <tohost+0x2fa7a001>
    5e5c:	014f45b3          	xor	a1,t5,s4
    5e60:	01059e93          	slli	t4,a1,0x10
    5e64:	010edf13          	srli	t5,t4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5e68:	01ee4fb3          	xor	t6,t3,t5
                if (x16 == 1)
    5e6c:	001ff093          	andi	ra,t6,1
                data >>= 1;
    5e70:	00635413          	srli	s0,t1,0x6
                if (x16 == 1)
    5e74:	001f5893          	srli	a7,t5,0x1
    5e78:	00008b63          	beqz	ra,5e8e <cmp_complex+0x13e>
                   crc |= 0x8000;
    5e7c:	7769                	lui	a4,0xffffa
    5e7e:	00170393          	addi	t2,a4,1 # ffffa001 <tohost+0x2fa7a001>
    5e82:	0078c7b3          	xor	a5,a7,t2
    5e86:	01079813          	slli	a6,a5,0x10
    5e8a:	01085893          	srli	a7,a6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5e8e:	011446b3          	xor	a3,s0,a7
                if (x16 == 1)
    5e92:	0016fe13          	andi	t3,a3,1
                data >>= 1;
    5e96:	00735313          	srli	t1,t1,0x7
                if (x16 == 1)
    5e9a:	0018df13          	srli	t5,a7,0x1
    5e9e:	000e0b63          	beqz	t3,5eb4 <cmp_complex+0x164>
                   crc |= 0x8000;
    5ea2:	7669                	lui	a2,0xffffa
    5ea4:	00160a13          	addi	s4,a2,1 # ffffa001 <tohost+0x2fa7a001>
    5ea8:	014f45b3          	xor	a1,t5,s4
    5eac:	01059e93          	slli	t4,a1,0x10
    5eb0:	010edf13          	srli	t5,t4,0x10
                if (x16 == 1)
    5eb4:	001f7f93          	andi	t6,t5,1
    5eb8:	001f5793          	srli	a5,t5,0x1
    5ebc:	006f8b63          	beq	t6,t1,5ed2 <cmp_complex+0x182>
                   crc |= 0x8000;
    5ec0:	70e9                	lui	ra,0xffffa
    5ec2:	00108413          	addi	s0,ra,1 # ffffa001 <tohost+0x2fa7a001>
    5ec6:	0087c733          	xor	a4,a5,s0
    5eca:	01071393          	slli	t2,a4,0x10
    5ece:	0103d793          	srli	a5,t2,0x10
        crc=crcu8( (ee_u8) ((newval)>>8)        ,crc);
    5ed2:	8121                	srli	a0,a0,0x8
    5ed4:	0ff57813          	zext.b	a6,a0
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5ed8:	00f848b3          	xor	a7,a6,a5
                if (x16 == 1)
    5edc:	0018fe13          	andi	t3,a7,1
                data >>= 1;
    5ee0:	00185693          	srli	a3,a6,0x1
                if (x16 == 1)
    5ee4:	0017de93          	srli	t4,a5,0x1
    5ee8:	000e0b63          	beqz	t3,5efe <cmp_complex+0x1ae>
                   crc |= 0x8000;
    5eec:	7369                	lui	t1,0xffffa
    5eee:	00130613          	addi	a2,t1,1 # ffffa001 <tohost+0x2fa7a001>
    5ef2:	00ceca33          	xor	s4,t4,a2
    5ef6:	010a1593          	slli	a1,s4,0x10
    5efa:	0105de93          	srli	t4,a1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5efe:	01d6cf33          	xor	t5,a3,t4
                if (x16 == 1)
    5f02:	001f7f93          	andi	t6,t5,1
                data >>= 1;
    5f06:	00285093          	srli	ra,a6,0x2
                if (x16 == 1)
    5f0a:	001ed513          	srli	a0,t4,0x1
    5f0e:	000f8b63          	beqz	t6,5f24 <cmp_complex+0x1d4>
                   crc |= 0x8000;
    5f12:	7469                	lui	s0,0xffffa
    5f14:	00140713          	addi	a4,s0,1 # ffffa001 <tohost+0x2fa7a001>
    5f18:	00e543b3          	xor	t2,a0,a4
    5f1c:	01039793          	slli	a5,t2,0x10
    5f20:	0107d513          	srli	a0,a5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5f24:	00a0c8b3          	xor	a7,ra,a0
                if (x16 == 1)
    5f28:	0018fe13          	andi	t3,a7,1
                data >>= 1;
    5f2c:	00385693          	srli	a3,a6,0x3
                if (x16 == 1)
    5f30:	00155e93          	srli	t4,a0,0x1
    5f34:	000e0b63          	beqz	t3,5f4a <cmp_complex+0x1fa>
                   crc |= 0x8000;
    5f38:	7369                	lui	t1,0xffffa
    5f3a:	00130613          	addi	a2,t1,1 # ffffa001 <tohost+0x2fa7a001>
    5f3e:	00ceca33          	xor	s4,t4,a2
    5f42:	010a1593          	slli	a1,s4,0x10
    5f46:	0105de93          	srli	t4,a1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5f4a:	01d6cf33          	xor	t5,a3,t4
                if (x16 == 1)
    5f4e:	001f7f93          	andi	t6,t5,1
                data >>= 1;
    5f52:	00485093          	srli	ra,a6,0x4
                if (x16 == 1)
    5f56:	001ed513          	srli	a0,t4,0x1
    5f5a:	000f8b63          	beqz	t6,5f70 <cmp_complex+0x220>
                   crc |= 0x8000;
    5f5e:	7469                	lui	s0,0xffffa
    5f60:	00140713          	addi	a4,s0,1 # ffffa001 <tohost+0x2fa7a001>
    5f64:	00e543b3          	xor	t2,a0,a4
    5f68:	01039793          	slli	a5,t2,0x10
    5f6c:	0107d513          	srli	a0,a5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5f70:	00a0c8b3          	xor	a7,ra,a0
                if (x16 == 1)
    5f74:	0018fe13          	andi	t3,a7,1
                data >>= 1;
    5f78:	00585693          	srli	a3,a6,0x5
                if (x16 == 1)
    5f7c:	00155e93          	srli	t4,a0,0x1
    5f80:	000e0b63          	beqz	t3,5f96 <cmp_complex+0x246>
                   crc |= 0x8000;
    5f84:	7369                	lui	t1,0xffffa
    5f86:	00130613          	addi	a2,t1,1 # ffffa001 <tohost+0x2fa7a001>
    5f8a:	00ceca33          	xor	s4,t4,a2
    5f8e:	010a1593          	slli	a1,s4,0x10
    5f92:	0105de93          	srli	t4,a1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5f96:	01d6cf33          	xor	t5,a3,t4
                if (x16 == 1)
    5f9a:	001f7f93          	andi	t6,t5,1
                data >>= 1;
    5f9e:	00685093          	srli	ra,a6,0x6
                if (x16 == 1)
    5fa2:	001ed893          	srli	a7,t4,0x1
    5fa6:	000f8b63          	beqz	t6,5fbc <cmp_complex+0x26c>
                   crc |= 0x8000;
    5faa:	7469                	lui	s0,0xffffa
    5fac:	00140713          	addi	a4,s0,1 # ffffa001 <tohost+0x2fa7a001>
    5fb0:	00e8c3b3          	xor	t2,a7,a4
    5fb4:	01039793          	slli	a5,t2,0x10
    5fb8:	0107d893          	srli	a7,a5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5fbc:	0110c533          	xor	a0,ra,a7
                if (x16 == 1)
    5fc0:	00157e13          	andi	t3,a0,1
                data >>= 1;
    5fc4:	00785813          	srli	a6,a6,0x7
                if (x16 == 1)
    5fc8:	0018d593          	srli	a1,a7,0x1
    5fcc:	000e0b63          	beqz	t3,5fe2 <cmp_complex+0x292>
                   crc |= 0x8000;
    5fd0:	76e9                	lui	a3,0xffffa
    5fd2:	00168313          	addi	t1,a3,1 # ffffa001 <tohost+0x2fa7a001>
    5fd6:	0065c633          	xor	a2,a1,t1
    5fda:	01061a13          	slli	s4,a2,0x10
    5fde:	010a5593          	srli	a1,s4,0x10
                if (x16 == 1)
    5fe2:	0015fe93          	andi	t4,a1,1
    5fe6:	0015d713          	srli	a4,a1,0x1
    5fea:	010e8b63          	beq	t4,a6,6000 <cmp_complex+0x2b0>
                   crc |= 0x8000;
    5fee:	7f69                	lui	t5,0xffffa
    5ff0:	001f0f93          	addi	t6,t5,1 # ffffa001 <tohost+0x2fa7a001>
    5ff4:	01f740b3          	xor	ra,a4,t6
    5ff8:	01009413          	slli	s0,ra,0x10
    5ffc:	01045713          	srli	a4,s0,0x10
                retval &= 0x007f;
    6000:	07f2fa13          	andi	s4,t0,127
                *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
    6004:	f0097913          	andi	s2,s2,-256
    6008:	012a62b3          	or	t0,s4,s2
                res->crc=crcu16(retval,res->crc);
    600c:	02e49c23          	sh	a4,56(s1)
                *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
    6010:	0802e393          	ori	t2,t0,128
    6014:	007a9023          	sh	t2,0(s5)
        ee_s16 data=*pdata;
    6018:	00099a83          	lh	s5,0(s3)
        ee_u8 optype=(data>>7) & 1; /* bit 7 indicates if the function result has been cached */
    601c:	407ad793          	srai	a5,s5,0x7
        if (optype) /* if cached, use cache */
    6020:	0017f893          	andi	a7,a5,1
                return (data & 0x007f);
    6024:	07fafe13          	andi	t3,s5,127
        if (optype) /* if cached, use cache */
    6028:	50089863          	bnez	a7,6538 <cmp_complex+0x7e8>
                ee_s16 dtype=((data>>3) & 0xf); /* bits 3-6 is specific data for the operation */
    602c:	403ad513          	srai	a0,s5,0x3
    6030:	00f57e13          	andi	t3,a0,15
                dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
    6034:	004e1813          	slli	a6,t3,0x4
                ee_s16 flag=data & 0x7; /* bits 0-2 is type of function to perform */
    6038:	007af313          	andi	t1,s5,7
                                retval=core_bench_state(res->size,res->memblock[3],res->seed1,res->seed2,dtype,res->crc);
    603c:	0384d403          	lhu	s0,56(s1)
                dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
    6040:	010e6733          	or	a4,t3,a6
                switch (flag) {
    6044:	50030b63          	beqz	t1,655a <cmp_complex+0x80a>
    6048:	4585                	li	a1,1
    604a:	50b31263          	bne	t1,a1,654e <cmp_complex+0x7fe>
        crc=crc16(matrix_test(N,C,A,B,val),crc);
    604e:	5894                	lw	a3,48(s1)
    6050:	54d0                	lw	a2,44(s1)
    6052:	58cc                	lw	a1,52(s1)
    6054:	5488                	lw	a0,40(s1)
    6056:	a20fb0ef          	jal	ra,1276 <matrix_test>
        crc=crcu8( (ee_u8) (newval)                             ,crc);
    605a:	0ff57f13          	zext.b	t5,a0
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    605e:	008f4fb3          	xor	t6,t5,s0
        return crcu16((ee_u16)newval, crc);
    6062:	01051913          	slli	s2,a0,0x10
                if (x16 == 1)
    6066:	001ff713          	andi	a4,t6,1
        return crcu16((ee_u16)newval, crc);
    606a:	01095293          	srli	t0,s2,0x10
                data >>= 1;
    606e:	001f5393          	srli	t2,t5,0x1
                if (x16 == 1)
    6072:	00145513          	srli	a0,s0,0x1
    6076:	cb11                	beqz	a4,608a <cmp_complex+0x33a>
                   crc |= 0x8000;
    6078:	70e9                	lui	ra,0xffffa
    607a:	00108413          	addi	s0,ra,1 # ffffa001 <tohost+0x2fa7a001>
    607e:	008547b3          	xor	a5,a0,s0
    6082:	01079893          	slli	a7,a5,0x10
    6086:	0108d513          	srli	a0,a7,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    608a:	00a3ce33          	xor	t3,t2,a0
                if (x16 == 1)
    608e:	001e7813          	andi	a6,t3,1
                data >>= 1;
    6092:	002f5313          	srli	t1,t5,0x2
                if (x16 == 1)
    6096:	00155f93          	srli	t6,a0,0x1
    609a:	00080b63          	beqz	a6,60b0 <cmp_complex+0x360>
                   crc |= 0x8000;
    609e:	76e9                	lui	a3,0xffffa
    60a0:	00168e93          	addi	t4,a3,1 # ffffa001 <tohost+0x2fa7a001>
    60a4:	01dfc633          	xor	a2,t6,t4
    60a8:	01061593          	slli	a1,a2,0x10
    60ac:	0105df93          	srli	t6,a1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    60b0:	01f34733          	xor	a4,t1,t6
                if (x16 == 1)
    60b4:	00177913          	andi	s2,a4,1
                data >>= 1;
    60b8:	003f5393          	srli	t2,t5,0x3
                if (x16 == 1)
    60bc:	001fd513          	srli	a0,t6,0x1
    60c0:	00090b63          	beqz	s2,60d6 <cmp_complex+0x386>
                   crc |= 0x8000;
    60c4:	70e9                	lui	ra,0xffffa
    60c6:	00108413          	addi	s0,ra,1 # ffffa001 <tohost+0x2fa7a001>
    60ca:	008547b3          	xor	a5,a0,s0
    60ce:	01079893          	slli	a7,a5,0x10
    60d2:	0108d513          	srli	a0,a7,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    60d6:	00a3ce33          	xor	t3,t2,a0
                if (x16 == 1)
    60da:	001e7813          	andi	a6,t3,1
                data >>= 1;
    60de:	004f5313          	srli	t1,t5,0x4
                if (x16 == 1)
    60e2:	00155f93          	srli	t6,a0,0x1
    60e6:	00080b63          	beqz	a6,60fc <cmp_complex+0x3ac>
                   crc |= 0x8000;
    60ea:	76e9                	lui	a3,0xffffa
    60ec:	00168e93          	addi	t4,a3,1 # ffffa001 <tohost+0x2fa7a001>
    60f0:	01dfc633          	xor	a2,t6,t4
    60f4:	01061593          	slli	a1,a2,0x10
    60f8:	0105df93          	srli	t6,a1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    60fc:	01f34733          	xor	a4,t1,t6
                if (x16 == 1)
    6100:	00177913          	andi	s2,a4,1
                data >>= 1;
    6104:	005f5393          	srli	t2,t5,0x5
                if (x16 == 1)
    6108:	001fd513          	srli	a0,t6,0x1
    610c:	00090b63          	beqz	s2,6122 <cmp_complex+0x3d2>
                   crc |= 0x8000;
    6110:	70e9                	lui	ra,0xffffa
    6112:	00108413          	addi	s0,ra,1 # ffffa001 <tohost+0x2fa7a001>
    6116:	008547b3          	xor	a5,a0,s0
    611a:	01079893          	slli	a7,a5,0x10
    611e:	0108d513          	srli	a0,a7,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6122:	00a3ce33          	xor	t3,t2,a0
                if (x16 == 1)
    6126:	001e7813          	andi	a6,t3,1
                data >>= 1;
    612a:	006f5313          	srli	t1,t5,0x6
                if (x16 == 1)
    612e:	00155f93          	srli	t6,a0,0x1
    6132:	00080b63          	beqz	a6,6148 <cmp_complex+0x3f8>
                   crc |= 0x8000;
    6136:	76e9                	lui	a3,0xffffa
    6138:	00168e93          	addi	t4,a3,1 # ffffa001 <tohost+0x2fa7a001>
    613c:	01dfc633          	xor	a2,t6,t4
    6140:	01061593          	slli	a1,a2,0x10
    6144:	0105df93          	srli	t6,a1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6148:	01f34733          	xor	a4,t1,t6
                if (x16 == 1)
    614c:	00177913          	andi	s2,a4,1
                data >>= 1;
    6150:	007f5f13          	srli	t5,t5,0x7
                if (x16 == 1)
    6154:	001fd893          	srli	a7,t6,0x1
    6158:	00090b63          	beqz	s2,616e <cmp_complex+0x41e>
                   crc |= 0x8000;
    615c:	73e9                	lui	t2,0xffffa
    615e:	00138093          	addi	ra,t2,1 # ffffa001 <tohost+0x2fa7a001>
    6162:	0018c433          	xor	s0,a7,ra
    6166:	01041793          	slli	a5,s0,0x10
    616a:	0107d893          	srli	a7,a5,0x10
                if (x16 == 1)
    616e:	0018fe13          	andi	t3,a7,1
    6172:	0018de93          	srli	t4,a7,0x1
    6176:	01ee0b63          	beq	t3,t5,618c <cmp_complex+0x43c>
                   crc |= 0x8000;
    617a:	7869                	lui	a6,0xffffa
    617c:	00180313          	addi	t1,a6,1 # ffffa001 <tohost+0x2fa7a001>
    6180:	006ec533          	xor	a0,t4,t1
    6184:	01051693          	slli	a3,a0,0x10
    6188:	0106de93          	srli	t4,a3,0x10
        crc=crcu8( (ee_u8) ((newval)>>8)        ,crc);
    618c:	0082d593          	srli	a1,t0,0x8
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6190:	01d5c633          	xor	a2,a1,t4
                if (x16 == 1)
    6194:	00167f93          	andi	t6,a2,1
                data >>= 1;
    6198:	0092d293          	srli	t0,t0,0x9
                if (x16 == 1)
    619c:	001ed093          	srli	ra,t4,0x1
    61a0:	000f8b63          	beqz	t6,61b6 <cmp_complex+0x466>
                   crc |= 0x8000;
    61a4:	7769                	lui	a4,0xffffa
    61a6:	00170913          	addi	s2,a4,1 # ffffa001 <tohost+0x2fa7a001>
    61aa:	0120cf33          	xor	t5,ra,s2
    61ae:	010f1393          	slli	t2,t5,0x10
    61b2:	0103d093          	srli	ra,t2,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    61b6:	0012c433          	xor	s0,t0,ra
                if (x16 == 1)
    61ba:	00147893          	andi	a7,s0,1
                data >>= 1;
    61be:	0025d793          	srli	a5,a1,0x2
                if (x16 == 1)
    61c2:	0010d693          	srli	a3,ra,0x1
    61c6:	00088b63          	beqz	a7,61dc <cmp_complex+0x48c>
                   crc |= 0x8000;
    61ca:	7e69                	lui	t3,0xffffa
    61cc:	001e0813          	addi	a6,t3,1 # ffffa001 <tohost+0x2fa7a001>
    61d0:	0106c333          	xor	t1,a3,a6
    61d4:	01031513          	slli	a0,t1,0x10
    61d8:	01055693          	srli	a3,a0,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    61dc:	00d7ceb3          	xor	t4,a5,a3
                if (x16 == 1)
    61e0:	001ef613          	andi	a2,t4,1
                data >>= 1;
    61e4:	0035df93          	srli	t6,a1,0x3
                if (x16 == 1)
    61e8:	0016d393          	srli	t2,a3,0x1
    61ec:	ca11                	beqz	a2,6200 <cmp_complex+0x4b0>
                   crc |= 0x8000;
    61ee:	72e9                	lui	t0,0xffffa
    61f0:	00128713          	addi	a4,t0,1 # ffffa001 <tohost+0x2fa7a001>
    61f4:	00e3c933          	xor	s2,t2,a4
    61f8:	01091f13          	slli	t5,s2,0x10
    61fc:	010f5393          	srli	t2,t5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6200:	007fc0b3          	xor	ra,t6,t2
                if (x16 == 1)
    6204:	0010f413          	andi	s0,ra,1
                data >>= 1;
    6208:	0045d893          	srli	a7,a1,0x4
                if (x16 == 1)
    620c:	0013d513          	srli	a0,t2,0x1
    6210:	c811                	beqz	s0,6224 <cmp_complex+0x4d4>
                   crc |= 0x8000;
    6212:	77e9                	lui	a5,0xffffa
    6214:	00178e13          	addi	t3,a5,1 # ffffa001 <tohost+0x2fa7a001>
    6218:	01c54833          	xor	a6,a0,t3
    621c:	01081313          	slli	t1,a6,0x10
    6220:	01035513          	srli	a0,t1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6224:	00a8c6b3          	xor	a3,a7,a0
                if (x16 == 1)
    6228:	0016fe93          	andi	t4,a3,1
                data >>= 1;
    622c:	0055d613          	srli	a2,a1,0x5
                if (x16 == 1)
    6230:	00155f13          	srli	t5,a0,0x1
    6234:	000e8b63          	beqz	t4,624a <cmp_complex+0x4fa>
                   crc |= 0x8000;
    6238:	7fe9                	lui	t6,0xffffa
    623a:	001f8293          	addi	t0,t6,1 # ffffa001 <tohost+0x2fa7a001>
    623e:	005f4733          	xor	a4,t5,t0
    6242:	01071913          	slli	s2,a4,0x10
    6246:	01095f13          	srli	t5,s2,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    624a:	01e643b3          	xor	t2,a2,t5
                if (x16 == 1)
    624e:	0013f093          	andi	ra,t2,1
                data >>= 1;
    6252:	0065d413          	srli	s0,a1,0x6
                if (x16 == 1)
    6256:	001f5313          	srli	t1,t5,0x1
    625a:	00008b63          	beqz	ra,6270 <cmp_complex+0x520>
                   crc |= 0x8000;
    625e:	78e9                	lui	a7,0xffffa
    6260:	00188793          	addi	a5,a7,1 # ffffa001 <tohost+0x2fa7a001>
    6264:	00f34e33          	xor	t3,t1,a5
    6268:	010e1813          	slli	a6,t3,0x10
    626c:	01085313          	srli	t1,a6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6270:	00644533          	xor	a0,s0,t1
                if (x16 == 1)
    6274:	00157693          	andi	a3,a0,1
                data >>= 1;
    6278:	819d                	srli	a1,a1,0x7
                if (x16 == 1)
    627a:	00135913          	srli	s2,t1,0x1
    627e:	ca91                	beqz	a3,6292 <cmp_complex+0x542>
                   crc |= 0x8000;
    6280:	7ee9                	lui	t4,0xffffa
    6282:	001e8613          	addi	a2,t4,1 # ffffa001 <tohost+0x2fa7a001>
    6286:	00c94fb3          	xor	t6,s2,a2
    628a:	010f9293          	slli	t0,t6,0x10
    628e:	0102d913          	srli	s2,t0,0x10
                if (x16 == 1)
    6292:	00197713          	andi	a4,s2,1
    6296:	00195513          	srli	a0,s2,0x1
    629a:	00b70b63          	beq	a4,a1,62b0 <cmp_complex+0x560>
                   crc |= 0x8000;
    629e:	7f69                	lui	t5,0xffffa
    62a0:	001f0393          	addi	t2,t5,1 # ffffa001 <tohost+0x2fa7a001>
    62a4:	007540b3          	xor	ra,a0,t2
    62a8:	01009413          	slli	s0,ra,0x10
    62ac:	01045513          	srli	a0,s0,0x10
                                if (res->crcmatrix==0)
    62b0:	03c4d883          	lhu	a7,60(s1)
    62b4:	00089463          	bnez	a7,62bc <cmp_complex+0x56c>
                                        res->crcmatrix=retval;
    62b8:	02a49e23          	sh	a0,60(s1)
    62bc:	0384d403          	lhu	s0,56(s1)
                                retval=core_bench_matrix(&(res->mat),dtype,res->crc);
    62c0:	01051793          	slli	a5,a0,0x10
    62c4:	4107de13          	srai	t3,a5,0x10
        crc=crcu8( (ee_u8) (newval)                             ,crc);
    62c8:	0ffe7313          	zext.b	t1,t3
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    62cc:	008346b3          	xor	a3,t1,s0
                if (x16 == 1)
    62d0:	0016f593          	andi	a1,a3,1
                data >>= 1;
    62d4:	00135e93          	srli	t4,t1,0x1
                if (x16 == 1)
    62d8:	00145713          	srli	a4,s0,0x1
    62dc:	c991                	beqz	a1,62f0 <cmp_complex+0x5a0>
                   crc |= 0x8000;
    62de:	7669                	lui	a2,0xffffa
    62e0:	00160f93          	addi	t6,a2,1 # ffffa001 <tohost+0x2fa7a001>
    62e4:	01f742b3          	xor	t0,a4,t6
    62e8:	01029913          	slli	s2,t0,0x10
    62ec:	01095713          	srli	a4,s2,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    62f0:	00eecf33          	xor	t5,t4,a4
                if (x16 == 1)
    62f4:	001f7393          	andi	t2,t5,1
                data >>= 1;
    62f8:	00235093          	srli	ra,t1,0x2
                if (x16 == 1)
    62fc:	00175693          	srli	a3,a4,0x1
    6300:	00038b63          	beqz	t2,6316 <cmp_complex+0x5c6>
                   crc |= 0x8000;
    6304:	78e9                	lui	a7,0xffffa
    6306:	00188413          	addi	s0,a7,1 # ffffa001 <tohost+0x2fa7a001>
    630a:	0086c7b3          	xor	a5,a3,s0
    630e:	01079813          	slli	a6,a5,0x10
    6312:	01085693          	srli	a3,a6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6316:	00d0c5b3          	xor	a1,ra,a3
                if (x16 == 1)
    631a:	0015fe93          	andi	t4,a1,1
                data >>= 1;
    631e:	00335f93          	srli	t6,t1,0x3
                if (x16 == 1)
    6322:	0016df13          	srli	t5,a3,0x1
    6326:	000e8b63          	beqz	t4,633c <cmp_complex+0x5ec>
                   crc |= 0x8000;
    632a:	7669                	lui	a2,0xffffa
    632c:	00160293          	addi	t0,a2,1 # ffffa001 <tohost+0x2fa7a001>
    6330:	005f4933          	xor	s2,t5,t0
    6334:	01091713          	slli	a4,s2,0x10
    6338:	01075f13          	srli	t5,a4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    633c:	01efc3b3          	xor	t2,t6,t5
                if (x16 == 1)
    6340:	0013f093          	andi	ra,t2,1
                data >>= 1;
    6344:	00435893          	srli	a7,t1,0x4
                if (x16 == 1)
    6348:	001f5e93          	srli	t4,t5,0x1
    634c:	00008b63          	beqz	ra,6362 <cmp_complex+0x612>
                   crc |= 0x8000;
    6350:	7469                	lui	s0,0xffffa
    6352:	00140813          	addi	a6,s0,1 # ffffa001 <tohost+0x2fa7a001>
    6356:	010ec7b3          	xor	a5,t4,a6
    635a:	01079693          	slli	a3,a5,0x10
    635e:	0106de93          	srli	t4,a3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6362:	01d8c5b3          	xor	a1,a7,t4
                if (x16 == 1)
    6366:	0015ff93          	andi	t6,a1,1
                data >>= 1;
    636a:	00535293          	srli	t0,t1,0x5
                if (x16 == 1)
    636e:	001ed393          	srli	t2,t4,0x1
    6372:	000f8b63          	beqz	t6,6388 <cmp_complex+0x638>
                   crc |= 0x8000;
    6376:	7669                	lui	a2,0xffffa
    6378:	00160913          	addi	s2,a2,1 # ffffa001 <tohost+0x2fa7a001>
    637c:	0123c733          	xor	a4,t2,s2
    6380:	01071f13          	slli	t5,a4,0x10
    6384:	010f5393          	srli	t2,t5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6388:	0072c0b3          	xor	ra,t0,t2
                if (x16 == 1)
    638c:	0010f893          	andi	a7,ra,1
                data >>= 1;
    6390:	00635413          	srli	s0,t1,0x6
                if (x16 == 1)
    6394:	0013d593          	srli	a1,t2,0x1
    6398:	00088b63          	beqz	a7,63ae <cmp_complex+0x65e>
                   crc |= 0x8000;
    639c:	7869                	lui	a6,0xffffa
    639e:	00180693          	addi	a3,a6,1 # ffffa001 <tohost+0x2fa7a001>
    63a2:	00d5c7b3          	xor	a5,a1,a3
    63a6:	01079e93          	slli	t4,a5,0x10
    63aa:	010ed593          	srli	a1,t4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    63ae:	00b44fb3          	xor	t6,s0,a1
                if (x16 == 1)
    63b2:	001ff293          	andi	t0,t6,1
                data >>= 1;
    63b6:	00735313          	srli	t1,t1,0x7
                if (x16 == 1)
    63ba:	0015d393          	srli	t2,a1,0x1
    63be:	00028b63          	beqz	t0,63d4 <cmp_complex+0x684>
                   crc |= 0x8000;
    63c2:	7669                	lui	a2,0xffffa
    63c4:	00160913          	addi	s2,a2,1 # ffffa001 <tohost+0x2fa7a001>
    63c8:	0123c733          	xor	a4,t2,s2
    63cc:	01071f13          	slli	t5,a4,0x10
    63d0:	010f5393          	srli	t2,t5,0x10
                if (x16 == 1)
    63d4:	0013f093          	andi	ra,t2,1
    63d8:	0013d793          	srli	a5,t2,0x1
    63dc:	00608b63          	beq	ra,t1,63f2 <cmp_complex+0x6a2>
                   crc |= 0x8000;
    63e0:	78e9                	lui	a7,0xffffa
    63e2:	00188413          	addi	s0,a7,1 # ffffa001 <tohost+0x2fa7a001>
    63e6:	0087c833          	xor	a6,a5,s0
    63ea:	01081693          	slli	a3,a6,0x10
    63ee:	0106d793          	srli	a5,a3,0x10
        crc=crcu8( (ee_u8) ((newval)>>8)        ,crc);
    63f2:	8121                	srli	a0,a0,0x8
    63f4:	0ff57e93          	zext.b	t4,a0
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    63f8:	00fec5b3          	xor	a1,t4,a5
                if (x16 == 1)
    63fc:	0015ff93          	andi	t6,a1,1
                data >>= 1;
    6400:	001ed293          	srli	t0,t4,0x1
                if (x16 == 1)
    6404:	0017df13          	srli	t5,a5,0x1
    6408:	000f8b63          	beqz	t6,641e <cmp_complex+0x6ce>
                   crc |= 0x8000;
    640c:	7369                	lui	t1,0xffffa
    640e:	00130613          	addi	a2,t1,1 # ffffa001 <tohost+0x2fa7a001>
    6412:	00cf4933          	xor	s2,t5,a2
    6416:	01091713          	slli	a4,s2,0x10
    641a:	01075f13          	srli	t5,a4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    641e:	01e2c3b3          	xor	t2,t0,t5
                if (x16 == 1)
    6422:	0013f093          	andi	ra,t2,1
                data >>= 1;
    6426:	002ed893          	srli	a7,t4,0x2
                if (x16 == 1)
    642a:	001f5513          	srli	a0,t5,0x1
    642e:	00008b63          	beqz	ra,6444 <cmp_complex+0x6f4>
                   crc |= 0x8000;
    6432:	7469                	lui	s0,0xffffa
    6434:	00140813          	addi	a6,s0,1 # ffffa001 <tohost+0x2fa7a001>
    6438:	010546b3          	xor	a3,a0,a6
    643c:	01069793          	slli	a5,a3,0x10
    6440:	0107d513          	srli	a0,a5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6444:	00a8c5b3          	xor	a1,a7,a0
                if (x16 == 1)
    6448:	0015ff93          	andi	t6,a1,1
                data >>= 1;
    644c:	003ed293          	srli	t0,t4,0x3
                if (x16 == 1)
    6450:	00155f13          	srli	t5,a0,0x1
    6454:	000f8b63          	beqz	t6,646a <cmp_complex+0x71a>
                   crc |= 0x8000;
    6458:	7369                	lui	t1,0xffffa
    645a:	00130613          	addi	a2,t1,1 # ffffa001 <tohost+0x2fa7a001>
    645e:	00cf4933          	xor	s2,t5,a2
    6462:	01091713          	slli	a4,s2,0x10
    6466:	01075f13          	srli	t5,a4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    646a:	01e2c3b3          	xor	t2,t0,t5
                if (x16 == 1)
    646e:	0013f093          	andi	ra,t2,1
                data >>= 1;
    6472:	004ed893          	srli	a7,t4,0x4
                if (x16 == 1)
    6476:	001f5513          	srli	a0,t5,0x1
    647a:	00008b63          	beqz	ra,6490 <cmp_complex+0x740>
                   crc |= 0x8000;
    647e:	7469                	lui	s0,0xffffa
    6480:	00140813          	addi	a6,s0,1 # ffffa001 <tohost+0x2fa7a001>
    6484:	010546b3          	xor	a3,a0,a6
    6488:	01069793          	slli	a5,a3,0x10
    648c:	0107d513          	srli	a0,a5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6490:	00a8c5b3          	xor	a1,a7,a0
                if (x16 == 1)
    6494:	0015ff93          	andi	t6,a1,1
                data >>= 1;
    6498:	005ed293          	srli	t0,t4,0x5
                if (x16 == 1)
    649c:	00155f13          	srli	t5,a0,0x1
    64a0:	000f8b63          	beqz	t6,64b6 <cmp_complex+0x766>
                   crc |= 0x8000;
    64a4:	7369                	lui	t1,0xffffa
    64a6:	00130613          	addi	a2,t1,1 # ffffa001 <tohost+0x2fa7a001>
    64aa:	00cf4933          	xor	s2,t5,a2
    64ae:	01091713          	slli	a4,s2,0x10
    64b2:	01075f13          	srli	t5,a4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    64b6:	01e2c3b3          	xor	t2,t0,t5
                if (x16 == 1)
    64ba:	0013f093          	andi	ra,t2,1
                data >>= 1;
    64be:	006ed893          	srli	a7,t4,0x6
                if (x16 == 1)
    64c2:	001f5593          	srli	a1,t5,0x1
    64c6:	00008b63          	beqz	ra,64dc <cmp_complex+0x78c>
                   crc |= 0x8000;
    64ca:	7469                	lui	s0,0xffffa
    64cc:	00140813          	addi	a6,s0,1 # ffffa001 <tohost+0x2fa7a001>
    64d0:	0105c6b3          	xor	a3,a1,a6
    64d4:	01069793          	slli	a5,a3,0x10
    64d8:	0107d593          	srli	a1,a5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    64dc:	00b8c533          	xor	a0,a7,a1
                if (x16 == 1)
    64e0:	00157f93          	andi	t6,a0,1
                data >>= 1;
    64e4:	007ede93          	srli	t4,t4,0x7
                if (x16 == 1)
    64e8:	0015d713          	srli	a4,a1,0x1
    64ec:	000f8b63          	beqz	t6,6502 <cmp_complex+0x7b2>
                   crc |= 0x8000;
    64f0:	72e9                	lui	t0,0xffffa
    64f2:	00128313          	addi	t1,t0,1 # ffffa001 <tohost+0x2fa7a001>
    64f6:	00674633          	xor	a2,a4,t1
    64fa:	01061913          	slli	s2,a2,0x10
    64fe:	01095713          	srli	a4,s2,0x10
                if (x16 == 1)
    6502:	00177f13          	andi	t5,a4,1
    6506:	00175813          	srli	a6,a4,0x1
    650a:	01df0b63          	beq	t5,t4,6520 <cmp_complex+0x7d0>
                   crc |= 0x8000;
    650e:	73e9                	lui	t2,0xffffa
    6510:	00138093          	addi	ra,t2,1 # ffffa001 <tohost+0x2fa7a001>
    6514:	001848b3          	xor	a7,a6,ra
    6518:	01089413          	slli	s0,a7,0x10
    651c:	01045813          	srli	a6,s0,0x10
                retval &= 0x007f;
    6520:	07fe7e13          	andi	t3,t3,127
                *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
    6524:	f00afa93          	andi	s5,s5,-256
    6528:	015e66b3          	or	a3,t3,s5
                res->crc=crcu16(retval,res->crc);
    652c:	03049c23          	sh	a6,56(s1)
                *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
    6530:	0806e493          	ori	s1,a3,128
    6534:	00999023          	sh	s1,0(s3)
}
    6538:	40f2                	lw	ra,28(sp)
    653a:	4462                	lw	s0,24(sp)
    653c:	44d2                	lw	s1,20(sp)
    653e:	4942                	lw	s2,16(sp)
    6540:	49b2                	lw	s3,12(sp)
    6542:	4a92                	lw	s5,4(sp)
    6544:	41ca0533          	sub	a0,s4,t3
    6548:	4a22                	lw	s4,8(sp)
    654a:	6105                	addi	sp,sp,32
    654c:	8082                	ret
                res->crc=crcu16(retval,res->crc);
    654e:	010a9813          	slli	a6,s5,0x10
    6552:	01085513          	srli	a0,a6,0x10
        ee_s16 data=*pdata;
    6556:	8e56                	mv	t3,s5
    6558:	bb85                	j	62c8 <cmp_complex+0x578>
                                if (dtype<0x22) /* set min period for bit corruption */
    655a:	02200693          	li	a3,34
    655e:	8eba                	mv	t4,a4
    6560:	00d75463          	bge	a4,a3,6568 <cmp_complex+0x818>
    6564:	02200e93          	li	t4,34
                                retval=core_bench_state(res->size,res->memblock[3],res->seed1,res->seed2,dtype,res->crc);
    6568:	00049603          	lh	a2,0(s1)
    656c:	00249683          	lh	a3,2(s1)
    6570:	48cc                	lw	a1,20(s1)
    6572:	4c88                	lw	a0,24(s1)
    6574:	87a2                	mv	a5,s0
    6576:	0ffef713          	zext.b	a4,t4
    657a:	d50fe0ef          	jal	ra,4aca <core_bench_state>
                                if (res->crcstate==0)
    657e:	03e4d603          	lhu	a2,62(s1)
    6582:	d2061de3          	bnez	a2,62bc <cmp_complex+0x56c>
                                        res->crcstate=retval;
    6586:	02a49f23          	sh	a0,62(s1)
    658a:	bb0d                	j	62bc <cmp_complex+0x56c>
                                if (dtype<0x22) /* set min period for bit corruption */
    658c:	02200393          	li	t2,34
    6590:	883a                	mv	a6,a4
    6592:	00775463          	bge	a4,t2,659a <cmp_complex+0x84a>
    6596:	02200813          	li	a6,34
                                retval=core_bench_state(res->size,res->memblock[3],res->seed1,res->seed2,dtype,res->crc);
    659a:	00249683          	lh	a3,2(s1)
    659e:	00049603          	lh	a2,0(s1)
    65a2:	48cc                	lw	a1,20(s1)
    65a4:	4c88                	lw	a0,24(s1)
    65a6:	87a2                	mv	a5,s0
    65a8:	0ff87713          	zext.b	a4,a6
    65ac:	d1efe0ef          	jal	ra,4aca <core_bench_state>
                                if (res->crcstate==0)
    65b0:	03e4d403          	lhu	s0,62(s1)
    65b4:	e019                	bnez	s0,65ba <cmp_complex+0x86a>
                                        res->crcstate=retval;
    65b6:	02a49f23          	sh	a0,62(s1)
                                retval=core_bench_matrix(&(res->mat),dtype,res->crc);
    65ba:	01051793          	slli	a5,a0,0x10
    65be:	0384d403          	lhu	s0,56(s1)
    65c2:	4107d293          	srai	t0,a5,0x10
    65c6:	fe0ff06f          	j	5da6 <cmp_complex+0x56>
        crc=crc16(matrix_test(N,C,A,B,val),crc);
    65ca:	5a14                	lw	a3,48(a2)
    65cc:	58cc                	lw	a1,52(s1)
    65ce:	5650                	lw	a2,44(a2)
    65d0:	5488                	lw	a0,40(s1)
    65d2:	ca5fa0ef          	jal	ra,1276 <matrix_test>
        crc=crcu8( (ee_u8) (newval)                             ,crc);
    65d6:	0ff57593          	zext.b	a1,a0
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    65da:	0085c633          	xor	a2,a1,s0
        return crcu16((ee_u16)newval, crc);
    65de:	01051a13          	slli	s4,a0,0x10
                if (x16 == 1)
    65e2:	00167893          	andi	a7,a2,1
        return crcu16((ee_u16)newval, crc);
    65e6:	010a5e13          	srli	t3,s4,0x10
                data >>= 1;
    65ea:	0015de93          	srli	t4,a1,0x1
                crc >>= 1;
    65ee:	00145713          	srli	a4,s0,0x1
                if (x16 == 1)
    65f2:	00088b63          	beqz	a7,6608 <cmp_complex+0x8b8>
                   crc |= 0x8000;
    65f6:	7f69                	lui	t5,0xffffa
    65f8:	001f0f93          	addi	t6,t5,1 # ffffa001 <tohost+0x2fa7a001>
    65fc:	01f747b3          	xor	a5,a4,t6
    6600:	01079093          	slli	ra,a5,0x10
    6604:	0100d713          	srli	a4,ra,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6608:	00eec2b3          	xor	t0,t4,a4
                if (x16 == 1)
    660c:	0012f313          	andi	t1,t0,1
                data >>= 1;
    6610:	0025d693          	srli	a3,a1,0x2
                crc >>= 1;
    6614:	00175893          	srli	a7,a4,0x1
                if (x16 == 1)
    6618:	00030b63          	beqz	t1,662e <cmp_complex+0x8de>
                   crc |= 0x8000;
    661c:	73e9                	lui	t2,0xffffa
    661e:	00138813          	addi	a6,t2,1 # ffffa001 <tohost+0x2fa7a001>
    6622:	0108c433          	xor	s0,a7,a6
    6626:	01041513          	slli	a0,s0,0x10
    662a:	01055893          	srli	a7,a0,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    662e:	0116c633          	xor	a2,a3,a7
                if (x16 == 1)
    6632:	00167a13          	andi	s4,a2,1
                data >>= 1;
    6636:	0035de93          	srli	t4,a1,0x3
                crc >>= 1;
    663a:	0018d713          	srli	a4,a7,0x1
                if (x16 == 1)
    663e:	000a0b63          	beqz	s4,6654 <cmp_complex+0x904>
                   crc |= 0x8000;
    6642:	7f69                	lui	t5,0xffffa
    6644:	001f0f93          	addi	t6,t5,1 # ffffa001 <tohost+0x2fa7a001>
    6648:	01f747b3          	xor	a5,a4,t6
    664c:	01079093          	slli	ra,a5,0x10
    6650:	0100d713          	srli	a4,ra,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6654:	00eec2b3          	xor	t0,t4,a4
                if (x16 == 1)
    6658:	0012f313          	andi	t1,t0,1
                data >>= 1;
    665c:	0045d693          	srli	a3,a1,0x4
                crc >>= 1;
    6660:	00175893          	srli	a7,a4,0x1
                if (x16 == 1)
    6664:	00030b63          	beqz	t1,667a <cmp_complex+0x92a>
                   crc |= 0x8000;
    6668:	73e9                	lui	t2,0xffffa
    666a:	00138813          	addi	a6,t2,1 # ffffa001 <tohost+0x2fa7a001>
    666e:	0108c433          	xor	s0,a7,a6
    6672:	01041513          	slli	a0,s0,0x10
    6676:	01055893          	srli	a7,a0,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    667a:	0116c633          	xor	a2,a3,a7
                if (x16 == 1)
    667e:	00167a13          	andi	s4,a2,1
                data >>= 1;
    6682:	0055de93          	srli	t4,a1,0x5
                crc >>= 1;
    6686:	0018d713          	srli	a4,a7,0x1
                if (x16 == 1)
    668a:	000a0b63          	beqz	s4,66a0 <cmp_complex+0x950>
                   crc |= 0x8000;
    668e:	7f69                	lui	t5,0xffffa
    6690:	001f0f93          	addi	t6,t5,1 # ffffa001 <tohost+0x2fa7a001>
    6694:	01f747b3          	xor	a5,a4,t6
    6698:	01079093          	slli	ra,a5,0x10
    669c:	0100d713          	srli	a4,ra,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    66a0:	00eec2b3          	xor	t0,t4,a4
                if (x16 == 1)
    66a4:	0012f313          	andi	t1,t0,1
                data >>= 1;
    66a8:	0065d693          	srli	a3,a1,0x6
                crc >>= 1;
    66ac:	00175893          	srli	a7,a4,0x1
                if (x16 == 1)
    66b0:	00030b63          	beqz	t1,66c6 <cmp_complex+0x976>
                   crc |= 0x8000;
    66b4:	73e9                	lui	t2,0xffffa
    66b6:	00138813          	addi	a6,t2,1 # ffffa001 <tohost+0x2fa7a001>
    66ba:	0108c433          	xor	s0,a7,a6
    66be:	01041513          	slli	a0,s0,0x10
    66c2:	01055893          	srli	a7,a0,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    66c6:	0116c633          	xor	a2,a3,a7
                if (x16 == 1)
    66ca:	00167a13          	andi	s4,a2,1
                data >>= 1;
    66ce:	819d                	srli	a1,a1,0x7
                crc >>= 1;
    66d0:	0018d093          	srli	ra,a7,0x1
                if (x16 == 1)
    66d4:	000a0b63          	beqz	s4,66ea <cmp_complex+0x99a>
                   crc |= 0x8000;
    66d8:	7ee9                	lui	t4,0xffffa
    66da:	001e8f13          	addi	t5,t4,1 # ffffa001 <tohost+0x2fa7a001>
    66de:	01e0cfb3          	xor	t6,ra,t5
    66e2:	010f9793          	slli	a5,t6,0x10
    66e6:	0107d093          	srli	ra,a5,0x10
                if (x16 == 1)
    66ea:	0010f713          	andi	a4,ra,1
                crc >>= 1;
    66ee:	0010d813          	srli	a6,ra,0x1
                if (x16 == 1)
    66f2:	00b70b63          	beq	a4,a1,6708 <cmp_complex+0x9b8>
                   crc |= 0x8000;
    66f6:	72e9                	lui	t0,0xffffa
    66f8:	00128313          	addi	t1,t0,1 # ffffa001 <tohost+0x2fa7a001>
    66fc:	006846b3          	xor	a3,a6,t1
    6700:	01069393          	slli	t2,a3,0x10
    6704:	0103d813          	srli	a6,t2,0x10
        crc=crcu8( (ee_u8) ((newval)>>8)        ,crc);
    6708:	008e5413          	srli	s0,t3,0x8
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    670c:	01044533          	xor	a0,s0,a6
                if (x16 == 1)
    6710:	00157893          	andi	a7,a0,1
                data >>= 1;
    6714:	009e5e13          	srli	t3,t3,0x9
                if (x16 == 1)
    6718:	00185f13          	srli	t5,a6,0x1
    671c:	00088b63          	beqz	a7,6732 <cmp_complex+0x9e2>
                   crc |= 0x8000;
    6720:	7669                	lui	a2,0xffffa
    6722:	00160a13          	addi	s4,a2,1 # ffffa001 <tohost+0x2fa7a001>
    6726:	014f45b3          	xor	a1,t5,s4
    672a:	01059e93          	slli	t4,a1,0x10
    672e:	010edf13          	srli	t5,t4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6732:	01ee4fb3          	xor	t6,t3,t5
                if (x16 == 1)
    6736:	001ff093          	andi	ra,t6,1
                data >>= 1;
    673a:	00245793          	srli	a5,s0,0x2
                if (x16 == 1)
    673e:	001f5393          	srli	t2,t5,0x1
    6742:	00008b63          	beqz	ra,6758 <cmp_complex+0xa08>
                   crc |= 0x8000;
    6746:	7769                	lui	a4,0xffffa
    6748:	00170293          	addi	t0,a4,1 # ffffa001 <tohost+0x2fa7a001>
    674c:	0053c333          	xor	t1,t2,t0
    6750:	01031693          	slli	a3,t1,0x10
    6754:	0106d393          	srli	t2,a3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6758:	0077c833          	xor	a6,a5,t2
                if (x16 == 1)
    675c:	00187893          	andi	a7,a6,1
                data >>= 1;
    6760:	00345e13          	srli	t3,s0,0x3
                if (x16 == 1)
    6764:	0013de93          	srli	t4,t2,0x1
    6768:	00088b63          	beqz	a7,677e <cmp_complex+0xa2e>
                   crc |= 0x8000;
    676c:	7669                	lui	a2,0xffffa
    676e:	00160a13          	addi	s4,a2,1 # ffffa001 <tohost+0x2fa7a001>
    6772:	014ec533          	xor	a0,t4,s4
    6776:	01051593          	slli	a1,a0,0x10
    677a:	0105de93          	srli	t4,a1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    677e:	01de4f33          	xor	t5,t3,t4
                if (x16 == 1)
    6782:	001f7f93          	andi	t6,t5,1
                data >>= 1;
    6786:	00445093          	srli	ra,s0,0x4
                if (x16 == 1)
    678a:	001ed693          	srli	a3,t4,0x1
    678e:	000f8b63          	beqz	t6,67a4 <cmp_complex+0xa54>
                   crc |= 0x8000;
    6792:	77e9                	lui	a5,0xffffa
    6794:	00178713          	addi	a4,a5,1 # ffffa001 <tohost+0x2fa7a001>
    6798:	00e6c2b3          	xor	t0,a3,a4
    679c:	01029313          	slli	t1,t0,0x10
    67a0:	01035693          	srli	a3,t1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    67a4:	00d0c3b3          	xor	t2,ra,a3
                if (x16 == 1)
    67a8:	0013f813          	andi	a6,t2,1
                data >>= 1;
    67ac:	00545893          	srli	a7,s0,0x5
                if (x16 == 1)
    67b0:	0016d593          	srli	a1,a3,0x1
    67b4:	00080b63          	beqz	a6,67ca <cmp_complex+0xa7a>
                   crc |= 0x8000;
    67b8:	7e69                	lui	t3,0xffffa
    67ba:	001e0613          	addi	a2,t3,1 # ffffa001 <tohost+0x2fa7a001>
    67be:	00c5ca33          	xor	s4,a1,a2
    67c2:	010a1513          	slli	a0,s4,0x10
    67c6:	01055593          	srli	a1,a0,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    67ca:	00b8ceb3          	xor	t4,a7,a1
                if (x16 == 1)
    67ce:	001eff13          	andi	t5,t4,1
                data >>= 1;
    67d2:	00645f93          	srli	t6,s0,0x6
                if (x16 == 1)
    67d6:	0015d313          	srli	t1,a1,0x1
    67da:	000f0b63          	beqz	t5,67f0 <cmp_complex+0xaa0>
                   crc |= 0x8000;
    67de:	70e9                	lui	ra,0xffffa
    67e0:	00108793          	addi	a5,ra,1 # ffffa001 <tohost+0x2fa7a001>
    67e4:	00f34733          	xor	a4,t1,a5
    67e8:	01071293          	slli	t0,a4,0x10
    67ec:	0102d313          	srli	t1,t0,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    67f0:	006fc6b3          	xor	a3,t6,t1
                if (x16 == 1)
    67f4:	0016f393          	andi	t2,a3,1
                data >>= 1;
    67f8:	801d                	srli	s0,s0,0x7
                if (x16 == 1)
    67fa:	00135a13          	srli	s4,t1,0x1
    67fe:	00038b63          	beqz	t2,6814 <cmp_complex+0xac4>
                   crc |= 0x8000;
    6802:	7869                	lui	a6,0xffffa
    6804:	00180893          	addi	a7,a6,1 # ffffa001 <tohost+0x2fa7a001>
    6808:	011a4e33          	xor	t3,s4,a7
    680c:	010e1613          	slli	a2,t3,0x10
    6810:	01065a13          	srli	s4,a2,0x10
                if (x16 == 1)
    6814:	001a7593          	andi	a1,s4,1
    6818:	001a5513          	srli	a0,s4,0x1
    681c:	00858b63          	beq	a1,s0,6832 <cmp_complex+0xae2>
                   crc |= 0x8000;
    6820:	7ee9                	lui	t4,0xffffa
    6822:	001e8f13          	addi	t5,t4,1 # ffffa001 <tohost+0x2fa7a001>
    6826:	01e54533          	xor	a0,a0,t5
    682a:	01051f93          	slli	t6,a0,0x10
    682e:	010fd513          	srli	a0,t6,0x10
                                if (res->crcmatrix==0)
    6832:	03c4d083          	lhu	ra,60(s1)
    6836:	d80092e3          	bnez	ra,65ba <cmp_complex+0x86a>
                                        res->crcmatrix=retval;
    683a:	02a49e23          	sh	a0,60(s1)
    683e:	bbb5                	j	65ba <cmp_complex+0x86a>

00006840 <core_bench_list>:
        ee_s16 find_num=res->seed3;
    6840:	00451303          	lh	t1,4(a0)
ee_u16 core_bench_list(core_results *res, ee_s16 finder_idx) {
    6844:	7139                	addi	sp,sp,-64
    6846:	dc22                	sw	s0,56(sp)
    6848:	d256                	sw	s5,36(sp)
    684a:	de06                	sw	ra,60(sp)
    684c:	da26                	sw	s1,52(sp)
    684e:	d84a                	sw	s2,48(sp)
    6850:	d64e                	sw	s3,44(sp)
    6852:	d452                	sw	s4,40(sp)
    6854:	d05a                	sw	s6,32(sp)
    6856:	ce5e                	sw	s7,28(sp)
    6858:	cc62                	sw	s8,24(sp)
    685a:	ca66                	sw	s9,20(sp)
    685c:	c86a                	sw	s10,16(sp)
    685e:	c66e                	sw	s11,12(sp)
        list_head *list=res->list;
    6860:	5140                	lw	s0,36(a0)
ee_u16 core_bench_list(core_results *res, ee_s16 finder_idx) {
    6862:	8aaa                	mv	s5,a0
    6864:	88ae                	mv	a7,a1
        for (i=0; i<find_num; i++) {
    6866:	0c6057e3          	blez	t1,7134 <core_bench_list+0x8f4>
        info.idx=finder_idx;
    686a:	8bae                	mv	s7,a1
        ee_u16 found=0,missed=0;
    686c:	4e01                	li	t3,0
        for (i=0; i<find_num; i++) {
    686e:	4581                	li	a1,0
        ee_u16 found=0,missed=0;
    6870:	4801                	li	a6,0
        ee_u16 retval=0;
    6872:	4e81                	li	t4,0
                info.data16= (i & 0xff) ;
    6874:	0ff5fc93          	zext.b	s9,a1
        if (info->idx>=0) {
    6878:	4e0bca63          	bltz	s7,6d6c <core_bench_list+0x52c>
                while (list && (list->info->idx != info->idx))
    687c:	0c0400e3          	beqz	s0,713c <core_bench_list+0x8fc>
    6880:	87a2                	mv	a5,s0
    6882:	a019                	j	6888 <core_bench_list+0x48>
                        list=list->next;
    6884:	439c                	lw	a5,0(a5)
                while (list && (list->info->idx != info->idx))
    6886:	c799                	beqz	a5,6894 <core_bench_list+0x54>
    6888:	0047a283          	lw	t0,4(a5)
    688c:	00229383          	lh	t2,2(t0)
    6890:	ff739ae3          	bne	t2,s7,6884 <core_bench_list+0x44>
                while (list && ((list->info->data16 & 0xff) != info->data16))
    6894:	8b22                	mv	s6,s0
    6896:	4c01                	li	s8,0
                tmp=list->next;
    6898:	000b2683          	lw	a3,0(s6)
                list->next=next;
    689c:	018b2023          	sw	s8,0(s6)
        while (list) {
    68a0:	845a                	mv	s0,s6
    68a2:	cea1                	beqz	a3,68fa <core_bench_list+0xba>
                tmp=list->next;
    68a4:	4290                	lw	a2,0(a3)
                list->next=next;
    68a6:	0166a023          	sw	s6,0(a3)
                next=list;
    68aa:	8436                	mv	s0,a3
        while (list) {
    68ac:	c639                	beqz	a2,68fa <core_bench_list+0xba>
                tmp=list->next;
    68ae:	4204                	lw	s1,0(a2)
                list->next=next;
    68b0:	c214                	sw	a3,0(a2)
                next=list;
    68b2:	8432                	mv	s0,a2
        while (list) {
    68b4:	c0b9                	beqz	s1,68fa <core_bench_list+0xba>
                tmp=list->next;
    68b6:	0004a903          	lw	s2,0(s1)
                list->next=next;
    68ba:	c090                	sw	a2,0(s1)
                next=list;
    68bc:	8426                	mv	s0,s1
        while (list) {
    68be:	02090e63          	beqz	s2,68fa <core_bench_list+0xba>
                tmp=list->next;
    68c2:	00092983          	lw	s3,0(s2)
                list->next=next;
    68c6:	00992023          	sw	s1,0(s2)
                next=list;
    68ca:	844a                	mv	s0,s2
        while (list) {
    68cc:	02098763          	beqz	s3,68fa <core_bench_list+0xba>
                tmp=list->next;
    68d0:	0009a503          	lw	a0,0(s3)
                list->next=next;
    68d4:	0129a023          	sw	s2,0(s3)
                next=list;
    68d8:	844e                	mv	s0,s3
        while (list) {
    68da:	c105                	beqz	a0,68fa <core_bench_list+0xba>
                tmp=list->next;
    68dc:	00052a03          	lw	s4,0(a0)
                list->next=next;
    68e0:	01352023          	sw	s3,0(a0)
                next=list;
    68e4:	842a                	mv	s0,a0
        while (list) {
    68e6:	000a0a63          	beqz	s4,68fa <core_bench_list+0xba>
                tmp=list->next;
    68ea:	000a2b03          	lw	s6,0(s4)
                list->next=next;
    68ee:	00aa2023          	sw	a0,0(s4)
    68f2:	8452                	mv	s0,s4
        while (list) {
    68f4:	8c52                	mv	s8,s4
    68f6:	fa0b11e3          	bnez	s6,6898 <core_bench_list+0x58>
                if (this_find==NULL) {
    68fa:	48078663          	beqz	a5,6d86 <core_bench_list+0x546>
                        if (this_find->info->data16 & 0x1) /* use found value */
    68fe:	0047ad03          	lw	s10,4(a5)
    6902:	000d1d83          	lh	s11,0(s10)
    6906:	001dff13          	andi	t5,s11,1
    690a:	000f0b63          	beqz	t5,6920 <core_bench_list+0xe0>
                                retval+=(this_find->info->data16 >> 9) & 1;
    690e:	409ddf93          	srai	t6,s11,0x9
    6912:	001ff713          	andi	a4,t6,1
    6916:	9eba                	add	t4,t4,a4
    6918:	010e9093          	slli	ra,t4,0x10
    691c:	0100de93          	srli	t4,ra,0x10
                        if (this_find->next != NULL) {
    6920:	0007a283          	lw	t0,0(a5)
    6924:	00028b63          	beqz	t0,693a <core_bench_list+0xfa>
                                this_find->next = finder->next;
    6928:	0002a383          	lw	t2,0(t0)
    692c:	0077a023          	sw	t2,0(a5)
                                finder->next=list->next;
    6930:	401c                	lw	a5,0(s0)
    6932:	00f2a023          	sw	a5,0(t0)
                                list->next=finder;
    6936:	00542023          	sw	t0,0(s0)
                        found++;
    693a:	0805                	addi	a6,a6,1
    693c:	01081693          	slli	a3,a6,0x10
    6940:	0106d813          	srli	a6,a3,0x10
                if (info.idx>=0)
    6944:	000bc763          	bltz	s7,6952 <core_bench_list+0x112>
                        info.idx++;
    6948:	0b85                	addi	s7,s7,1
    694a:	010b9c13          	slli	s8,s7,0x10
    694e:	410c5b93          	srai	s7,s8,0x10
        for (i=0; i<find_num; i++) {
    6952:	0585                	addi	a1,a1,1
    6954:	01059d13          	slli	s10,a1,0x10
    6958:	410d5593          	srai	a1,s10,0x10
    695c:	f0b31ce3          	bne	t1,a1,6874 <core_bench_list+0x34>
        retval+=found*4-missed;
    6960:	00281313          	slli	t1,a6,0x2
    6964:	41c30db3          	sub	s11,t1,t3
    6968:	01be8f33          	add	t5,t4,s11
    696c:	010f1f93          	slli	t6,t5,0x10
    6970:	010fd493          	srli	s1,t6,0x10
        if (finder_idx>0)
    6974:	69104f63          	bgtz	a7,7012 <core_bench_list+0x7d2>
        remover=core_list_remove(list->next);
    6978:	00042e03          	lw	t3,0(s0)
        list_head *ret=item->next;
    697c:	8d22                	mv	s10,s0
    697e:	000e2503          	lw	a0,0(t3)
        tmp=item->info;
    6982:	004e2a83          	lw	s5,4(t3)
        item->info=ret->info;
    6986:	4150                	lw	a2,4(a0)
        item->next=item->next->next;
    6988:	00052983          	lw	s3,0(a0)
        item->info=ret->info;
    698c:	00ce2223          	sw	a2,4(t3)
        ret->info=tmp;
    6990:	01552223          	sw	s5,4(a0)
        item->next=item->next->next;
    6994:	013e2023          	sw	s3,0(t3)
        ret->next=NULL;
    6998:	00052023          	sw	zero,0(a0)
        if (info->idx>=0) {
    699c:	3c0bc163          	bltz	s7,6d5e <core_bench_list+0x51e>
                while (list && (list->info->idx != info->idx))
    69a0:	004d2c83          	lw	s9,4(s10)
    69a4:	002c9c03          	lh	s8,2(s9)
    69a8:	017c0c63          	beq	s8,s7,69c0 <core_bench_list+0x180>
                        list=list->next;
    69ac:	000d2d03          	lw	s10,0(s10)
                while (list && (list->info->idx != info->idx))
    69b0:	760d0b63          	beqz	s10,7126 <core_bench_list+0x8e6>
    69b4:	004d2c83          	lw	s9,4(s10)
    69b8:	002c9c03          	lh	s8,2(s9)
    69bc:	ff7c18e3          	bne	s8,s7,69ac <core_bench_list+0x16c>
                finder=list->next;
    69c0:	400c                	lw	a1,0(s0)
                retval=crc16(list->info->data16,retval);
    69c2:	00442303          	lw	t1,4(s0)
                   crc |= 0x8000;
    69c6:	7de9                	lui	s11,0xffffa
    69c8:	001d8713          	addi	a4,s11,1 # ffffa001 <tohost+0x2fa7a001>
                retval=crc16(list->info->data16,retval);
    69cc:	00031f03          	lh	t5,0(t1)
        crc=crcu8( (ee_u8) ((newval)>>8)        ,crc);
    69d0:	010f1f93          	slli	t6,t5,0x10
    69d4:	010fd093          	srli	ra,t6,0x10
        crc=crcu8( (ee_u8) (newval)                             ,crc);
    69d8:	0fff7693          	zext.b	a3,t5
                data >>= 1;
    69dc:	0016d793          	srli	a5,a3,0x1
    69e0:	0026db13          	srli	s6,a3,0x2
    69e4:	0036da13          	srli	s4,a3,0x3
    69e8:	0046d993          	srli	s3,a3,0x4
    69ec:	0056d913          	srli	s2,a3,0x5
    69f0:	0066d393          	srli	t2,a3,0x6
    69f4:	0076d293          	srli	t0,a3,0x7
        crc=crcu8( (ee_u8) ((newval)>>8)        ,crc);
    69f8:	0080dc93          	srli	s9,ra,0x8
                data >>= 1;
    69fc:	0090db93          	srli	s7,ra,0x9
    6a00:	00a0de93          	srli	t4,ra,0xa
    6a04:	00b0de13          	srli	t3,ra,0xb
    6a08:	00c0d313          	srli	t1,ra,0xc
    6a0c:	00d0d893          	srli	a7,ra,0xd
    6a10:	00e0d813          	srli	a6,ra,0xe
    6a14:	00f0d613          	srli	a2,ra,0xf
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6a18:	0096cc33          	xor	s8,a3,s1
                if (x16 == 1)
    6a1c:	001c7d93          	andi	s11,s8,1
    6a20:	0014df93          	srli	t6,s1,0x1
    6a24:	000d8863          	beqz	s11,6a34 <core_bench_list+0x1f4>
                   crc |= 0x8000;
    6a28:	00efc4b3          	xor	s1,t6,a4
    6a2c:	01049f13          	slli	t5,s1,0x10
    6a30:	010f5f93          	srli	t6,t5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6a34:	01f7c0b3          	xor	ra,a5,t6
                if (x16 == 1)
    6a38:	0010fc13          	andi	s8,ra,1
    6a3c:	001fdf13          	srli	t5,t6,0x1
    6a40:	000c0863          	beqz	s8,6a50 <core_bench_list+0x210>
                   crc |= 0x8000;
    6a44:	00ef4db3          	xor	s11,t5,a4
    6a48:	010d9493          	slli	s1,s11,0x10
    6a4c:	0104df13          	srli	t5,s1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6a50:	01eb4fb3          	xor	t6,s6,t5
                if (x16 == 1)
    6a54:	001ff093          	andi	ra,t6,1
    6a58:	001f5493          	srli	s1,t5,0x1
    6a5c:	00008863          	beqz	ra,6a6c <core_bench_list+0x22c>
                   crc |= 0x8000;
    6a60:	00e4cc33          	xor	s8,s1,a4
    6a64:	010c1d93          	slli	s11,s8,0x10
    6a68:	010dd493          	srli	s1,s11,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6a6c:	009a4f33          	xor	t5,s4,s1
                if (x16 == 1)
    6a70:	001f7f93          	andi	t6,t5,1
    6a74:	0014dd93          	srli	s11,s1,0x1
    6a78:	000f8863          	beqz	t6,6a88 <core_bench_list+0x248>
                   crc |= 0x8000;
    6a7c:	00edc0b3          	xor	ra,s11,a4
    6a80:	01009c13          	slli	s8,ra,0x10
    6a84:	010c5d93          	srli	s11,s8,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6a88:	01b9c4b3          	xor	s1,s3,s11
                if (x16 == 1)
    6a8c:	0014ff13          	andi	t5,s1,1
    6a90:	001ddd93          	srli	s11,s11,0x1
    6a94:	000f0863          	beqz	t5,6aa4 <core_bench_list+0x264>
                   crc |= 0x8000;
    6a98:	00edcfb3          	xor	t6,s11,a4
    6a9c:	010f9093          	slli	ra,t6,0x10
    6aa0:	0100dd93          	srli	s11,ra,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6aa4:	01b94c33          	xor	s8,s2,s11
                if (x16 == 1)
    6aa8:	001c7f13          	andi	t5,s8,1
    6aac:	001dd093          	srli	ra,s11,0x1
    6ab0:	000f0863          	beqz	t5,6ac0 <core_bench_list+0x280>
                   crc |= 0x8000;
    6ab4:	00e0c4b3          	xor	s1,ra,a4
    6ab8:	01049f93          	slli	t6,s1,0x10
    6abc:	010fd093          	srli	ra,t6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6ac0:	0013cdb3          	xor	s11,t2,ra
                if (x16 == 1)
    6ac4:	001dfc13          	andi	s8,s11,1
    6ac8:	0010df93          	srli	t6,ra,0x1
    6acc:	000c0863          	beqz	s8,6adc <core_bench_list+0x29c>
                   crc |= 0x8000;
    6ad0:	00efcf33          	xor	t5,t6,a4
    6ad4:	010f1493          	slli	s1,t5,0x10
    6ad8:	0104df93          	srli	t6,s1,0x10
                if (x16 == 1)
    6adc:	001ff093          	andi	ra,t6,1
    6ae0:	001fdf13          	srli	t5,t6,0x1
    6ae4:	00508863          	beq	ra,t0,6af4 <core_bench_list+0x2b4>
                   crc |= 0x8000;
    6ae8:	00ef4db3          	xor	s11,t5,a4
    6aec:	010d9c13          	slli	s8,s11,0x10
    6af0:	010c5f13          	srli	t5,s8,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6af4:	01ecc4b3          	xor	s1,s9,t5
                if (x16 == 1)
    6af8:	0014ff93          	andi	t6,s1,1
    6afc:	001f5f13          	srli	t5,t5,0x1
    6b00:	000f8863          	beqz	t6,6b10 <core_bench_list+0x2d0>
                   crc |= 0x8000;
    6b04:	00ef40b3          	xor	ra,t5,a4
    6b08:	01009d93          	slli	s11,ra,0x10
    6b0c:	010ddf13          	srli	t5,s11,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6b10:	01ebcc33          	xor	s8,s7,t5
                if (x16 == 1)
    6b14:	001c7f93          	andi	t6,s8,1
    6b18:	001f5d93          	srli	s11,t5,0x1
    6b1c:	000f8863          	beqz	t6,6b2c <core_bench_list+0x2ec>
                   crc |= 0x8000;
    6b20:	00edc4b3          	xor	s1,s11,a4
    6b24:	01049093          	slli	ra,s1,0x10
    6b28:	0100dd93          	srli	s11,ra,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6b2c:	01becf33          	xor	t5,t4,s11
                if (x16 == 1)
    6b30:	001f7c13          	andi	s8,t5,1
    6b34:	001dd093          	srli	ra,s11,0x1
    6b38:	000c0863          	beqz	s8,6b48 <core_bench_list+0x308>
                   crc |= 0x8000;
    6b3c:	00e0cfb3          	xor	t6,ra,a4
    6b40:	010f9493          	slli	s1,t6,0x10
    6b44:	0104d093          	srli	ra,s1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6b48:	001e4db3          	xor	s11,t3,ra
                if (x16 == 1)
    6b4c:	001dff13          	andi	t5,s11,1
    6b50:	0010d493          	srli	s1,ra,0x1
    6b54:	000f0863          	beqz	t5,6b64 <core_bench_list+0x324>
                   crc |= 0x8000;
    6b58:	00e4cc33          	xor	s8,s1,a4
    6b5c:	010c1f93          	slli	t6,s8,0x10
    6b60:	010fd493          	srli	s1,t6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6b64:	009340b3          	xor	ra,t1,s1
                if (x16 == 1)
    6b68:	0010fd93          	andi	s11,ra,1
    6b6c:	0014df93          	srli	t6,s1,0x1
    6b70:	000d8863          	beqz	s11,6b80 <core_bench_list+0x340>
                   crc |= 0x8000;
    6b74:	00efcf33          	xor	t5,t6,a4
    6b78:	010f1c13          	slli	s8,t5,0x10
    6b7c:	010c5f93          	srli	t6,s8,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6b80:	01f8c4b3          	xor	s1,a7,t6
                if (x16 == 1)
    6b84:	0014f093          	andi	ra,s1,1
    6b88:	001fdf93          	srli	t6,t6,0x1
    6b8c:	00008863          	beqz	ra,6b9c <core_bench_list+0x35c>
                   crc |= 0x8000;
    6b90:	00efcdb3          	xor	s11,t6,a4
    6b94:	010d9f13          	slli	t5,s11,0x10
    6b98:	010f5f93          	srli	t6,t5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6b9c:	01f84c33          	xor	s8,a6,t6
                if (x16 == 1)
    6ba0:	001c7093          	andi	ra,s8,1
    6ba4:	001fdf13          	srli	t5,t6,0x1
    6ba8:	00008863          	beqz	ra,6bb8 <core_bench_list+0x378>
                   crc |= 0x8000;
    6bac:	00ef44b3          	xor	s1,t5,a4
    6bb0:	01049d93          	slli	s11,s1,0x10
    6bb4:	010ddf13          	srli	t5,s11,0x10
                if (x16 == 1)
    6bb8:	001f7f93          	andi	t6,t5,1
    6bbc:	001f5493          	srli	s1,t5,0x1
    6bc0:	00cf8863          	beq	t6,a2,6bd0 <core_bench_list+0x390>
                   crc |= 0x8000;
    6bc4:	00e4cc33          	xor	s8,s1,a4
    6bc8:	010c1093          	slli	ra,s8,0x10
    6bcc:	0100d493          	srli	s1,ra,0x10
                finder=finder->next;
    6bd0:	000d2d03          	lw	s10,0(s10)
        while (finder) {
    6bd4:	e40d12e3          	bnez	s10,6a18 <core_bench_list+0x1d8>
        item_removed->info=item_modified->info;
    6bd8:	0045ad03          	lw	s10,4(a1)
        item_removed->next=item_modified->next;
    6bdc:	4198                	lw	a4,0(a1)
    insize = 1;
    6bde:	4c85                	li	s9,1
        item_removed->info=item_modified->info;
    6be0:	01a52223          	sw	s10,4(a0)
        item_modified->info=tmp;
    6be4:	0155a223          	sw	s5,4(a1)
        item_removed->next=item_modified->next;
    6be8:	c118                	sw	a4,0(a0)
        item_modified->next=item_removed;
    6bea:	c188                	sw	a0,0(a1)
        tail = NULL;
    6bec:	4281                	li	t0,0
        list = NULL;
    6bee:	4e81                	li	t4,0
        nmerges = 0;  /* count number of merges we do in this pass */
    6bf0:	4c01                	li	s8,0
        if (nmerges <= 1)   /* allow for nmerges==0, the empty list case */
    6bf2:	4b85                	li	s7,1
            nmerges++;  /* there exists a merge to be done */
    6bf4:	007cf513          	andi	a0,s9,7
    6bf8:	0c05                	addi	s8,s8,1
    6bfa:	83a2                	mv	t2,s0
            psize = 0;
    6bfc:	4781                	li	a5,0
    6bfe:	c925                	beqz	a0,6c6e <core_bench_list+0x42e>
    6c00:	4a85                	li	s5,1
    6c02:	05550f63          	beq	a0,s5,6c60 <core_bench_list+0x420>
    6c06:	4589                	li	a1,2
    6c08:	04b50763          	beq	a0,a1,6c56 <core_bench_list+0x416>
    6c0c:	468d                	li	a3,3
    6c0e:	02d50f63          	beq	a0,a3,6c4c <core_bench_list+0x40c>
    6c12:	4b11                	li	s6,4
    6c14:	03650763          	beq	a0,s6,6c42 <core_bench_list+0x402>
    6c18:	4a15                	li	s4,5
    6c1a:	01450f63          	beq	a0,s4,6c38 <core_bench_list+0x3f8>
    6c1e:	4999                	li	s3,6
    6c20:	01350763          	beq	a0,s3,6c2e <core_bench_list+0x3ee>
                            q = q->next;
    6c24:	00042383          	lw	t2,0(s0)
                psize++;
    6c28:	4785                	li	a5,1
                if (!q) break;
    6c2a:	0a038163          	beqz	t2,6ccc <core_bench_list+0x48c>
                            q = q->next;
    6c2e:	0003a383          	lw	t2,0(t2)
                psize++;
    6c32:	0785                	addi	a5,a5,1
                if (!q) break;
    6c34:	08038c63          	beqz	t2,6ccc <core_bench_list+0x48c>
                            q = q->next;
    6c38:	0003a383          	lw	t2,0(t2)
                psize++;
    6c3c:	0785                	addi	a5,a5,1
                if (!q) break;
    6c3e:	08038763          	beqz	t2,6ccc <core_bench_list+0x48c>
                            q = q->next;
    6c42:	0003a383          	lw	t2,0(t2)
                psize++;
    6c46:	0785                	addi	a5,a5,1
                if (!q) break;
    6c48:	08038263          	beqz	t2,6ccc <core_bench_list+0x48c>
                            q = q->next;
    6c4c:	0003a383          	lw	t2,0(t2)
                psize++;
    6c50:	0785                	addi	a5,a5,1
                if (!q) break;
    6c52:	06038d63          	beqz	t2,6ccc <core_bench_list+0x48c>
                            q = q->next;
    6c56:	0003a383          	lw	t2,0(t2)
                psize++;
    6c5a:	0785                	addi	a5,a5,1
                if (!q) break;
    6c5c:	06038863          	beqz	t2,6ccc <core_bench_list+0x48c>
                            q = q->next;
    6c60:	0003a383          	lw	t2,0(t2)
                psize++;
    6c64:	0785                	addi	a5,a5,1
                if (!q) break;
    6c66:	06038363          	beqz	t2,6ccc <core_bench_list+0x48c>
            for (i = 0; i < insize; i++) {
    6c6a:	07978163          	beq	a5,s9,6ccc <core_bench_list+0x48c>
                            q = q->next;
    6c6e:	0003a383          	lw	t2,0(t2)
                psize++;
    6c72:	0785                	addi	a5,a5,1
    6c74:	893e                	mv	s2,a5
                if (!q) break;
    6c76:	04038b63          	beqz	t2,6ccc <core_bench_list+0x48c>
                            q = q->next;
    6c7a:	0003a383          	lw	t2,0(t2)
                psize++;
    6c7e:	0785                	addi	a5,a5,1
                if (!q) break;
    6c80:	04038663          	beqz	t2,6ccc <core_bench_list+0x48c>
                            q = q->next;
    6c84:	0003a383          	lw	t2,0(t2)
                psize++;
    6c88:	00290793          	addi	a5,s2,2
                if (!q) break;
    6c8c:	04038063          	beqz	t2,6ccc <core_bench_list+0x48c>
                            q = q->next;
    6c90:	0003a383          	lw	t2,0(t2)
                psize++;
    6c94:	00390793          	addi	a5,s2,3
                if (!q) break;
    6c98:	02038a63          	beqz	t2,6ccc <core_bench_list+0x48c>
                            q = q->next;
    6c9c:	0003a383          	lw	t2,0(t2)
                psize++;
    6ca0:	00490793          	addi	a5,s2,4
                if (!q) break;
    6ca4:	02038463          	beqz	t2,6ccc <core_bench_list+0x48c>
                            q = q->next;
    6ca8:	0003a383          	lw	t2,0(t2)
                psize++;
    6cac:	00590793          	addi	a5,s2,5
                if (!q) break;
    6cb0:	00038e63          	beqz	t2,6ccc <core_bench_list+0x48c>
                            q = q->next;
    6cb4:	0003a383          	lw	t2,0(t2)
                psize++;
    6cb8:	00690793          	addi	a5,s2,6
                if (!q) break;
    6cbc:	00038863          	beqz	t2,6ccc <core_bench_list+0x48c>
                            q = q->next;
    6cc0:	0003a383          	lw	t2,0(t2)
                psize++;
    6cc4:	00790793          	addi	a5,s2,7
                if (!q) break;
    6cc8:	fa0391e3          	bnez	t2,6c6a <core_bench_list+0x42a>
                                    list = e;
    6ccc:	85e6                	mv	a1,s9
            while (psize > 0 || (qsize > 0 && q)) {
    6cce:	06f05663          	blez	a5,6d3a <core_bench_list+0x4fa>
                                } else if (qsize == 0 || !q) {
    6cd2:	cde9                	beqz	a1,6dac <core_bench_list+0x56c>
    6cd4:	0c038c63          	beqz	t2,6dac <core_bench_list+0x56c>
                                } else if (cmp(p->info,q->info,res) <= 0) {
    6cd8:	00442083          	lw	ra,4(s0)
    6cdc:	0043ad03          	lw	s10,4(t2)
                a->data16 = (a->data16 & 0xff00) | (0x00ff & (a->data16>>8));
    6ce0:	00009703          	lh	a4,0(ra)
        return a->idx - b->idx;
    6ce4:	002d1b03          	lh	s6,2(s10)
    6ce8:	00209a83          	lh	s5,2(ra)
                a->data16 = (a->data16 & 0xff00) | (0x00ff & (a->data16>>8));
    6cec:	01071f93          	slli	t6,a4,0x10
    6cf0:	010fdf13          	srli	t5,t6,0x10
    6cf4:	f0077993          	andi	s3,a4,-256
    6cf8:	008f5913          	srli	s2,t5,0x8
    6cfc:	0129e333          	or	t1,s3,s2
    6d00:	00609023          	sh	t1,0(ra)
                b->data16 = (b->data16 & 0xff00) | (0x00ff & (b->data16>>8));
    6d04:	000d1883          	lh	a7,0(s10)
    6d08:	01089813          	slli	a6,a7,0x10
    6d0c:	01085513          	srli	a0,a6,0x10
    6d10:	f008f693          	andi	a3,a7,-256
    6d14:	00855e13          	srli	t3,a0,0x8
    6d18:	01c6edb3          	or	s11,a3,t3
    6d1c:	01bd1023          	sh	s11,0(s10)
                                } else if (cmp(p->info,q->info,res) <= 0) {
    6d20:	095b5663          	bge	s6,s5,6dac <core_bench_list+0x56c>
                                    e = q; q = q->next; qsize--;
    6d24:	8a1e                	mv	s4,t2
    6d26:	0003a383          	lw	t2,0(t2)
    6d2a:	15fd                	addi	a1,a1,-1
                                if (tail) {
    6d2c:	02028263          	beqz	t0,6d50 <core_bench_list+0x510>
                                    tail->next = e;
    6d30:	0142a023          	sw	s4,0(t0)
                                    list = e;
    6d34:	82d2                	mv	t0,s4
            while (psize > 0 || (qsize > 0 && q)) {
    6d36:	f8f04ee3          	bgtz	a5,6cd2 <core_bench_list+0x492>
    6d3a:	06b05d63          	blez	a1,6db4 <core_bench_list+0x574>
    6d3e:	06038f63          	beqz	t2,6dbc <core_bench_list+0x57c>
                                if (psize == 0) {
    6d42:	fbd9                	bnez	a5,6cd8 <core_bench_list+0x498>
                                    e = q; q = q->next; qsize--;
    6d44:	8a1e                	mv	s4,t2
    6d46:	15fd                	addi	a1,a1,-1
    6d48:	0003a383          	lw	t2,0(t2)
                                if (tail) {
    6d4c:	fe0292e3          	bnez	t0,6d30 <core_bench_list+0x4f0>
                                    list = e;
    6d50:	8ed2                	mv	t4,s4
    6d52:	82d2                	mv	t0,s4
    6d54:	b7cd                	j	6d36 <core_bench_list+0x4f6>
                        list=list->next;
    6d56:	000d2d03          	lw	s10,0(s10)
                while (list && ((list->info->data16 & 0xff) != info->data16))
    6d5a:	3c0d0663          	beqz	s10,7126 <core_bench_list+0x8e6>
    6d5e:	004d2a03          	lw	s4,4(s10)
    6d62:	000a4b83          	lbu	s7,0(s4)
    6d66:	ff7c98e3          	bne	s9,s7,6d56 <core_bench_list+0x516>
    6d6a:	b999                	j	69c0 <core_bench_list+0x180>
    6d6c:	3c040863          	beqz	s0,713c <core_bench_list+0x8fc>
    6d70:	87a2                	mv	a5,s0
    6d72:	a021                	j	6d7a <core_bench_list+0x53a>
                        list=list->next;
    6d74:	439c                	lw	a5,0(a5)
                while (list && ((list->info->data16 & 0xff) != info->data16))
    6d76:	b0078fe3          	beqz	a5,6894 <core_bench_list+0x54>
    6d7a:	43d8                	lw	a4,4(a5)
    6d7c:	00074083          	lbu	ra,0(a4)
    6d80:	fe1c9ae3          	bne	s9,ra,6d74 <core_bench_list+0x534>
    6d84:	be01                	j	6894 <core_bench_list+0x54>
                        retval+=(list->next->info->data16 >> 8) & 1;
    6d86:	4010                	lw	a2,0(s0)
                        missed++;
    6d88:	0e05                	addi	t3,t3,1
    6d8a:	010e1493          	slli	s1,t3,0x10
                        retval+=(list->next->info->data16 >> 8) & 1;
    6d8e:	00462903          	lw	s2,4(a2)
                        missed++;
    6d92:	0104de13          	srli	t3,s1,0x10
                        retval+=(list->next->info->data16 >> 8) & 1;
    6d96:	00190983          	lb	s3,1(s2)
    6d9a:	0019f513          	andi	a0,s3,1
    6d9e:	00ae8a33          	add	s4,t4,a0
    6da2:	010a1b13          	slli	s6,s4,0x10
    6da6:	010b5e93          	srli	t4,s6,0x10
    6daa:	be69                	j	6944 <core_bench_list+0x104>
                                    e = p; p = p->next; psize--;
    6dac:	8a22                	mv	s4,s0
    6dae:	17fd                	addi	a5,a5,-1
    6db0:	4000                	lw	s0,0(s0)
    6db2:	bfad                	j	6d2c <core_bench_list+0x4ec>
        while (p) {
    6db4:	00038463          	beqz	t2,6dbc <core_bench_list+0x57c>
        nmerges = 0;  /* count number of merges we do in this pass */
    6db8:	841e                	mv	s0,t2
    6dba:	bd2d                	j	6bf4 <core_bench_list+0x3b4>
            tail->next = NULL;
    6dbc:	0002a023          	sw	zero,0(t0)
        if (nmerges <= 1)   /* allow for nmerges==0, the empty list case */
    6dc0:	017c0e63          	beq	s8,s7,6ddc <core_bench_list+0x59c>
        insize *= 2;
    6dc4:	0c86                	slli	s9,s9,0x1
        while (p) {
    6dc6:	000e8863          	beqz	t4,6dd6 <core_bench_list+0x596>
    6dca:	83f6                	mv	t2,t4
        tail = NULL;
    6dcc:	4281                	li	t0,0
        list = NULL;
    6dce:	4e81                	li	t4,0
        nmerges = 0;  /* count number of merges we do in this pass */
    6dd0:	4c01                	li	s8,0
    6dd2:	841e                	mv	s0,t2
    6dd4:	b505                	j	6bf4 <core_bench_list+0x3b4>
            tail->next = NULL;
    6dd6:	00002023          	sw	zero,0(zero) # 0 <_start>
    6dda:	9002                	ebreak
        finder=list->next;
    6ddc:	000ea603          	lw	a2,0(t4)
        while (finder) {
    6de0:	20060963          	beqz	a2,6ff2 <core_bench_list+0x7b2>
                retval=crc16(list->info->data16,retval);
    6de4:	004ea403          	lw	s0,4(t4)
                   crc |= 0x8000;
    6de8:	72e9                	lui	t0,0xffffa
    6dea:	00128b93          	addi	s7,t0,1 # ffffa001 <tohost+0x2fa7a001>
                retval=crc16(list->info->data16,retval);
    6dee:	00041e83          	lh	t4,0(s0)
        crc=crcu8( (ee_u8) ((newval)>>8)        ,crc);
    6df2:	010e9e13          	slli	t3,t4,0x10
    6df6:	010e5d93          	srli	s11,t3,0x10
        crc=crcu8( (ee_u8) (newval)                             ,crc);
    6dfa:	0ffefc13          	zext.b	s8,t4
                data >>= 1;
    6dfe:	001c5093          	srli	ra,s8,0x1
    6e02:	002c5d13          	srli	s10,s8,0x2
    6e06:	003c5713          	srli	a4,s8,0x3
    6e0a:	004c5a93          	srli	s5,s8,0x4
    6e0e:	005c5b13          	srli	s6,s8,0x5
    6e12:	006c5f93          	srli	t6,s8,0x6
    6e16:	007c5f13          	srli	t5,s8,0x7
        crc=crcu8( (ee_u8) ((newval)>>8)        ,crc);
    6e1a:	008dd993          	srli	s3,s11,0x8
                data >>= 1;
    6e1e:	009dd913          	srli	s2,s11,0x9
    6e22:	00add313          	srli	t1,s11,0xa
    6e26:	00bdd893          	srli	a7,s11,0xb
    6e2a:	00cdd813          	srli	a6,s11,0xc
    6e2e:	00ddd513          	srli	a0,s11,0xd
    6e32:	00edd593          	srli	a1,s11,0xe
    6e36:	00fdd693          	srli	a3,s11,0xf
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6e3a:	009c4a33          	xor	s4,s8,s1
                if (x16 == 1)
    6e3e:	001a7393          	andi	t2,s4,1
    6e42:	0014dc93          	srli	s9,s1,0x1
    6e46:	00038863          	beqz	t2,6e56 <core_bench_list+0x616>
                   crc |= 0x8000;
    6e4a:	017cc4b3          	xor	s1,s9,s7
    6e4e:	01049793          	slli	a5,s1,0x10
    6e52:	0107dc93          	srli	s9,a5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6e56:	0190c433          	xor	s0,ra,s9
                if (x16 == 1)
    6e5a:	00147293          	andi	t0,s0,1
    6e5e:	001cdd93          	srli	s11,s9,0x1
    6e62:	00028863          	beqz	t0,6e72 <core_bench_list+0x632>
                   crc |= 0x8000;
    6e66:	017dceb3          	xor	t4,s11,s7
    6e6a:	010e9e13          	slli	t3,t4,0x10
    6e6e:	010e5d93          	srli	s11,t3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6e72:	01bd4a33          	xor	s4,s10,s11
                if (x16 == 1)
    6e76:	001a7393          	andi	t2,s4,1
    6e7a:	001ddc93          	srli	s9,s11,0x1
    6e7e:	00038863          	beqz	t2,6e8e <core_bench_list+0x64e>
                   crc |= 0x8000;
    6e82:	017cc4b3          	xor	s1,s9,s7
    6e86:	01049793          	slli	a5,s1,0x10
    6e8a:	0107dc93          	srli	s9,a5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6e8e:	01974433          	xor	s0,a4,s9
                if (x16 == 1)
    6e92:	00147293          	andi	t0,s0,1
    6e96:	001cdd93          	srli	s11,s9,0x1
    6e9a:	00028863          	beqz	t0,6eaa <core_bench_list+0x66a>
                   crc |= 0x8000;
    6e9e:	017dceb3          	xor	t4,s11,s7
    6ea2:	010e9e13          	slli	t3,t4,0x10
    6ea6:	010e5d93          	srli	s11,t3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6eaa:	01baca33          	xor	s4,s5,s11
                if (x16 == 1)
    6eae:	001a7393          	andi	t2,s4,1
    6eb2:	001ddc93          	srli	s9,s11,0x1
    6eb6:	00038863          	beqz	t2,6ec6 <core_bench_list+0x686>
                   crc |= 0x8000;
    6eba:	017cc4b3          	xor	s1,s9,s7
    6ebe:	01049793          	slli	a5,s1,0x10
    6ec2:	0107dc93          	srli	s9,a5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6ec6:	019b4433          	xor	s0,s6,s9
                if (x16 == 1)
    6eca:	00147293          	andi	t0,s0,1
    6ece:	001cdd93          	srli	s11,s9,0x1
    6ed2:	00028863          	beqz	t0,6ee2 <core_bench_list+0x6a2>
                   crc |= 0x8000;
    6ed6:	017dceb3          	xor	t4,s11,s7
    6eda:	010e9e13          	slli	t3,t4,0x10
    6ede:	010e5d93          	srli	s11,t3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6ee2:	01bfca33          	xor	s4,t6,s11
                if (x16 == 1)
    6ee6:	001a7393          	andi	t2,s4,1
    6eea:	001ddc93          	srli	s9,s11,0x1
    6eee:	00038863          	beqz	t2,6efe <core_bench_list+0x6be>
                   crc |= 0x8000;
    6ef2:	017cc4b3          	xor	s1,s9,s7
    6ef6:	01049793          	slli	a5,s1,0x10
    6efa:	0107dc93          	srli	s9,a5,0x10
                if (x16 == 1)
    6efe:	001cf413          	andi	s0,s9,1
    6f02:	001cde13          	srli	t3,s9,0x1
    6f06:	01e40863          	beq	s0,t5,6f16 <core_bench_list+0x6d6>
                   crc |= 0x8000;
    6f0a:	017e42b3          	xor	t0,t3,s7
    6f0e:	01029e93          	slli	t4,t0,0x10
    6f12:	010ede13          	srli	t3,t4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6f16:	01c9cdb3          	xor	s11,s3,t3
                if (x16 == 1)
    6f1a:	001dfa13          	andi	s4,s11,1
    6f1e:	001e5793          	srli	a5,t3,0x1
    6f22:	000a0863          	beqz	s4,6f32 <core_bench_list+0x6f2>
                   crc |= 0x8000;
    6f26:	0177c3b3          	xor	t2,a5,s7
    6f2a:	01039493          	slli	s1,t2,0x10
    6f2e:	0104d793          	srli	a5,s1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6f32:	00f94cb3          	xor	s9,s2,a5
                if (x16 == 1)
    6f36:	001cf413          	andi	s0,s9,1
    6f3a:	0017de13          	srli	t3,a5,0x1
    6f3e:	c419                	beqz	s0,6f4c <core_bench_list+0x70c>
                   crc |= 0x8000;
    6f40:	017e42b3          	xor	t0,t3,s7
    6f44:	01029e93          	slli	t4,t0,0x10
    6f48:	010ede13          	srli	t3,t4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6f4c:	01c34db3          	xor	s11,t1,t3
                if (x16 == 1)
    6f50:	001dfa13          	andi	s4,s11,1
    6f54:	001e5793          	srli	a5,t3,0x1
    6f58:	000a0863          	beqz	s4,6f68 <core_bench_list+0x728>
                   crc |= 0x8000;
    6f5c:	0177c3b3          	xor	t2,a5,s7
    6f60:	01039493          	slli	s1,t2,0x10
    6f64:	0104d793          	srli	a5,s1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6f68:	00f8ccb3          	xor	s9,a7,a5
                if (x16 == 1)
    6f6c:	001cf413          	andi	s0,s9,1
    6f70:	0017de13          	srli	t3,a5,0x1
    6f74:	c419                	beqz	s0,6f82 <core_bench_list+0x742>
                   crc |= 0x8000;
    6f76:	017e42b3          	xor	t0,t3,s7
    6f7a:	01029e93          	slli	t4,t0,0x10
    6f7e:	010ede13          	srli	t3,t4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6f82:	01c84db3          	xor	s11,a6,t3
                if (x16 == 1)
    6f86:	001dfa13          	andi	s4,s11,1
    6f8a:	001e5793          	srli	a5,t3,0x1
    6f8e:	000a0863          	beqz	s4,6f9e <core_bench_list+0x75e>
                   crc |= 0x8000;
    6f92:	0177c3b3          	xor	t2,a5,s7
    6f96:	01039493          	slli	s1,t2,0x10
    6f9a:	0104d793          	srli	a5,s1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6f9e:	00f54cb3          	xor	s9,a0,a5
                if (x16 == 1)
    6fa2:	001cf413          	andi	s0,s9,1
    6fa6:	0017de13          	srli	t3,a5,0x1
    6faa:	c419                	beqz	s0,6fb8 <core_bench_list+0x778>
                   crc |= 0x8000;
    6fac:	017e42b3          	xor	t0,t3,s7
    6fb0:	01029e93          	slli	t4,t0,0x10
    6fb4:	010ede13          	srli	t3,t4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6fb8:	01c5cdb3          	xor	s11,a1,t3
                if (x16 == 1)
    6fbc:	001dfa13          	andi	s4,s11,1
    6fc0:	001e5793          	srli	a5,t3,0x1
    6fc4:	000a0863          	beqz	s4,6fd4 <core_bench_list+0x794>
                   crc |= 0x8000;
    6fc8:	0177c3b3          	xor	t2,a5,s7
    6fcc:	01039493          	slli	s1,t2,0x10
    6fd0:	0104d793          	srli	a5,s1,0x10
                if (x16 == 1)
    6fd4:	0017fc93          	andi	s9,a5,1
                crc >>= 1;
    6fd8:	0017d493          	srli	s1,a5,0x1
                if (x16 == 1)
    6fdc:	00dc8863          	beq	s9,a3,6fec <core_bench_list+0x7ac>
                   crc |= 0x8000;
    6fe0:	0174c433          	xor	s0,s1,s7
    6fe4:	01041293          	slli	t0,s0,0x10
    6fe8:	0102d493          	srli	s1,t0,0x10
                finder=finder->next;
    6fec:	4210                	lw	a2,0(a2)
        while (finder) {
    6fee:	e40616e3          	bnez	a2,6e3a <core_bench_list+0x5fa>
}
    6ff2:	50f2                	lw	ra,60(sp)
    6ff4:	5462                	lw	s0,56(sp)
    6ff6:	5942                	lw	s2,48(sp)
    6ff8:	59b2                	lw	s3,44(sp)
    6ffa:	5a22                	lw	s4,40(sp)
    6ffc:	5a92                	lw	s5,36(sp)
    6ffe:	5b02                	lw	s6,32(sp)
    7000:	4bf2                	lw	s7,28(sp)
    7002:	4c62                	lw	s8,24(sp)
    7004:	4cd2                	lw	s9,20(sp)
    7006:	4d42                	lw	s10,16(sp)
    7008:	4db2                	lw	s11,12(sp)
    700a:	8526                	mv	a0,s1
    700c:	54d2                	lw	s1,52(sp)
    700e:	6121                	addi	sp,sp,64
    7010:	8082                	ret
    insize = 1;
    7012:	4b05                	li	s6,1
        while (p) {
    7014:	dc0401e3          	beqz	s0,6dd6 <core_bench_list+0x596>
        tail = NULL;
    7018:	4981                	li	s3,0
        list = NULL;
    701a:	4a01                	li	s4,0
        nmerges = 0;  /* count number of merges we do in this pass */
    701c:	4c01                	li	s8,0
            nmerges++;  /* there exists a merge to be done */
    701e:	007b7893          	andi	a7,s6,7
    7022:	0c05                	addi	s8,s8,1
    7024:	87a2                	mv	a5,s0
            psize = 0;
    7026:	4901                	li	s2,0
    7028:	04088b63          	beqz	a7,707e <core_bench_list+0x83e>
    702c:	4705                	li	a4,1
    702e:	04e88363          	beq	a7,a4,7074 <core_bench_list+0x834>
    7032:	4089                	li	ra,2
    7034:	02188d63          	beq	a7,ra,706e <core_bench_list+0x82e>
    7038:	4e8d                	li	t4,3
    703a:	03d88763          	beq	a7,t4,7068 <core_bench_list+0x828>
    703e:	4291                	li	t0,4
    7040:	02588163          	beq	a7,t0,7062 <core_bench_list+0x822>
    7044:	4395                	li	t2,5
    7046:	00788b63          	beq	a7,t2,705c <core_bench_list+0x81c>
    704a:	4699                	li	a3,6
    704c:	00d88563          	beq	a7,a3,7056 <core_bench_list+0x816>
                            q = q->next;
    7050:	401c                	lw	a5,0(s0)
                psize++;
    7052:	4905                	li	s2,1
                if (!q) break;
    7054:	c7a5                	beqz	a5,70bc <core_bench_list+0x87c>
                            q = q->next;
    7056:	439c                	lw	a5,0(a5)
                psize++;
    7058:	0905                	addi	s2,s2,1
                if (!q) break;
    705a:	c3ad                	beqz	a5,70bc <core_bench_list+0x87c>
                            q = q->next;
    705c:	439c                	lw	a5,0(a5)
                psize++;
    705e:	0905                	addi	s2,s2,1
                if (!q) break;
    7060:	cfb1                	beqz	a5,70bc <core_bench_list+0x87c>
                            q = q->next;
    7062:	439c                	lw	a5,0(a5)
                psize++;
    7064:	0905                	addi	s2,s2,1
                if (!q) break;
    7066:	cbb9                	beqz	a5,70bc <core_bench_list+0x87c>
                            q = q->next;
    7068:	439c                	lw	a5,0(a5)
                psize++;
    706a:	0905                	addi	s2,s2,1
                if (!q) break;
    706c:	cba1                	beqz	a5,70bc <core_bench_list+0x87c>
                            q = q->next;
    706e:	439c                	lw	a5,0(a5)
                psize++;
    7070:	0905                	addi	s2,s2,1
                if (!q) break;
    7072:	c7a9                	beqz	a5,70bc <core_bench_list+0x87c>
                            q = q->next;
    7074:	439c                	lw	a5,0(a5)
                psize++;
    7076:	0905                	addi	s2,s2,1
                if (!q) break;
    7078:	c3b1                	beqz	a5,70bc <core_bench_list+0x87c>
            for (i = 0; i < insize; i++) {
    707a:	05690163          	beq	s2,s6,70bc <core_bench_list+0x87c>
                            q = q->next;
    707e:	439c                	lw	a5,0(a5)
                psize++;
    7080:	0905                	addi	s2,s2,1
    7082:	884a                	mv	a6,s2
                if (!q) break;
    7084:	cf85                	beqz	a5,70bc <core_bench_list+0x87c>
                            q = q->next;
    7086:	439c                	lw	a5,0(a5)
                psize++;
    7088:	0905                	addi	s2,s2,1
                if (!q) break;
    708a:	cb8d                	beqz	a5,70bc <core_bench_list+0x87c>
                            q = q->next;
    708c:	439c                	lw	a5,0(a5)
                psize++;
    708e:	00280913          	addi	s2,a6,2
                if (!q) break;
    7092:	c78d                	beqz	a5,70bc <core_bench_list+0x87c>
                            q = q->next;
    7094:	439c                	lw	a5,0(a5)
                psize++;
    7096:	00380913          	addi	s2,a6,3
                if (!q) break;
    709a:	c38d                	beqz	a5,70bc <core_bench_list+0x87c>
                            q = q->next;
    709c:	439c                	lw	a5,0(a5)
                psize++;
    709e:	00480913          	addi	s2,a6,4
                if (!q) break;
    70a2:	cf89                	beqz	a5,70bc <core_bench_list+0x87c>
                            q = q->next;
    70a4:	439c                	lw	a5,0(a5)
                psize++;
    70a6:	00580913          	addi	s2,a6,5
                if (!q) break;
    70aa:	cb89                	beqz	a5,70bc <core_bench_list+0x87c>
                            q = q->next;
    70ac:	439c                	lw	a5,0(a5)
                psize++;
    70ae:	00680913          	addi	s2,a6,6
                if (!q) break;
    70b2:	c789                	beqz	a5,70bc <core_bench_list+0x87c>
                            q = q->next;
    70b4:	439c                	lw	a5,0(a5)
                psize++;
    70b6:	00780913          	addi	s2,a6,7
                if (!q) break;
    70ba:	f3e1                	bnez	a5,707a <core_bench_list+0x83a>
                                    list = e;
    70bc:	8da2                	mv	s11,s0
    70be:	8d5a                	mv	s10,s6
    70c0:	843e                	mv	s0,a5
            while (psize > 0 || (qsize > 0 && q)) {
    70c2:	01205f63          	blez	s2,70e0 <core_bench_list+0x8a0>
                                } else if (qsize == 0 || !q) {
    70c6:	020d1a63          	bnez	s10,70fa <core_bench_list+0x8ba>
                                    e = p; p = p->next; psize--;
    70ca:	83ee                	mv	t2,s11
    70cc:	000dad83          	lw	s11,0(s11)
    70d0:	197d                	addi	s2,s2,-1
                                if (tail) {
    70d2:	02098163          	beqz	s3,70f4 <core_bench_list+0x8b4>
                                    tail->next = e;
    70d6:	0079a023          	sw	t2,0(s3)
                                    list = e;
    70da:	899e                	mv	s3,t2
            while (psize > 0 || (qsize > 0 && q)) {
    70dc:	ff2045e3          	bgtz	s2,70c6 <core_bench_list+0x886>
    70e0:	03a05a63          	blez	s10,7114 <core_bench_list+0x8d4>
    70e4:	c80d                	beqz	s0,7116 <core_bench_list+0x8d6>
                                if (psize == 0) {
    70e6:	00091b63          	bnez	s2,70fc <core_bench_list+0x8bc>
                                    e = q; q = q->next; qsize--;
    70ea:	83a2                	mv	t2,s0
    70ec:	1d7d                	addi	s10,s10,-1
    70ee:	4000                	lw	s0,0(s0)
                                if (tail) {
    70f0:	fe0993e3          	bnez	s3,70d6 <core_bench_list+0x896>
                                    list = e;
    70f4:	8a1e                	mv	s4,t2
    70f6:	899e                	mv	s3,t2
    70f8:	b7d5                	j	70dc <core_bench_list+0x89c>
                                } else if (qsize == 0 || !q) {
    70fa:	d861                	beqz	s0,70ca <core_bench_list+0x88a>
                                } else if (cmp(p->info,q->info,res) <= 0) {
    70fc:	404c                	lw	a1,4(s0)
    70fe:	004da503          	lw	a0,4(s11)
    7102:	8656                	mv	a2,s5
    7104:	c4dfe0ef          	jal	ra,5d50 <cmp_complex>
    7108:	fca051e3          	blez	a0,70ca <core_bench_list+0x88a>
                                    e = q; q = q->next; qsize--;
    710c:	83a2                	mv	t2,s0
    710e:	1d7d                	addi	s10,s10,-1
    7110:	4000                	lw	s0,0(s0)
    7112:	b7c1                	j	70d2 <core_bench_list+0x892>
        while (p) {
    7114:	f409                	bnez	s0,701e <core_bench_list+0x7de>
            tail->next = NULL;
    7116:	0009a023          	sw	zero,0(s3)
        if (nmerges <= 1)   /* allow for nmerges==0, the empty list case */
    711a:	4405                	li	s0,1
    711c:	008c0a63          	beq	s8,s0,7130 <core_bench_list+0x8f0>
        insize *= 2;
    7120:	0b06                	slli	s6,s6,0x1
        p = list;
    7122:	8452                	mv	s0,s4
    7124:	bdc5                	j	7014 <core_bench_list+0x7d4>
                finder=list->next;
    7126:	400c                	lw	a1,0(s0)
    7128:	8d2e                	mv	s10,a1
        while (finder) {
    712a:	88059ce3          	bnez	a1,69c2 <core_bench_list+0x182>
    712e:	b46d                	j	6bd8 <core_bench_list+0x398>
    7130:	8452                	mv	s0,s4
    7132:	b099                	j	6978 <core_bench_list+0x138>
    7134:	4c81                	li	s9,0
        info.idx=finder_idx;
    7136:	8bae                	mv	s7,a1
        for (i=0; i<find_num; i++) {
    7138:	4481                	li	s1,0
    713a:	b82d                	j	6974 <core_bench_list+0x134>
                        retval+=(list->next->info->data16 >> 8) & 1;
    713c:	00002783          	lw	a5,0(zero) # 0 <_start>
    7140:	9002                	ebreak

00007142 <iterate>:
void *iterate(void *pres) {
    7142:	1101                	addi	sp,sp,-32
    7144:	ca26                	sw	s1,20(sp)
        ee_u32 iterations=res->iterations;
    7146:	4d44                	lw	s1,28(a0)
void *iterate(void *pres) {
    7148:	cc22                	sw	s0,24(sp)
    714a:	c84a                	sw	s2,16(sp)
    714c:	c64e                	sw	s3,12(sp)
    714e:	ce06                	sw	ra,28(sp)
                   crc |= 0x8000;
    7150:	7969                	lui	s2,0xffffa
        res->crc=0;
    7152:	02052c23          	sw	zero,56(a0)
    7156:	02052e23          	sw	zero,60(a0)
void *iterate(void *pres) {
    715a:	89aa                	mv	s3,a0
        for (i=0; i<iterations; i++) {
    715c:	4401                	li	s0,0
                   crc |= 0x8000;
    715e:	0905                	addi	s2,s2,1 # ffffa001 <tohost+0x2fa7a001>
        for (i=0; i<iterations; i++) {
    7160:	40048863          	beqz	s1,7570 <iterate+0x42e>
                crc=core_bench_list(res,1);
    7164:	4585                	li	a1,1
    7166:	854e                	mv	a0,s3
    7168:	ed8ff0ef          	jal	ra,6840 <core_bench_list>
                res->crc=crcu16(crc,res->crc);
    716c:	0389d783          	lhu	a5,56(s3)
        crc=crcu8( (ee_u8) (newval)                             ,crc);
    7170:	0ff57713          	zext.b	a4,a0
                data >>= 1;
    7174:	00175613          	srli	a2,a4,0x1
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7178:	00f746b3          	xor	a3,a4,a5
                if (x16 == 1)
    717c:	0016f293          	andi	t0,a3,1
                   crc |= 0x8000;
    7180:	0017d393          	srli	t2,a5,0x1
                if (x16 == 1)
    7184:	00028863          	beqz	t0,7194 <iterate+0x52>
                   crc |= 0x8000;
    7188:	0123c0b3          	xor	ra,t2,s2
    718c:	01009313          	slli	t1,ra,0x10
    7190:	01035393          	srli	t2,t1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7194:	007645b3          	xor	a1,a2,t2
                if (x16 == 1)
    7198:	0015f813          	andi	a6,a1,1
                data >>= 1;
    719c:	00275893          	srli	a7,a4,0x2
                if (x16 == 1)
    71a0:	0013df13          	srli	t5,t2,0x1
    71a4:	00080863          	beqz	a6,71b4 <iterate+0x72>
                   crc |= 0x8000;
    71a8:	012f4e33          	xor	t3,t5,s2
    71ac:	010e1e93          	slli	t4,t3,0x10
    71b0:	010edf13          	srli	t5,t4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    71b4:	01e8cfb3          	xor	t6,a7,t5
                if (x16 == 1)
    71b8:	001ff693          	andi	a3,t6,1
                data >>= 1;
    71bc:	00375293          	srli	t0,a4,0x3
                if (x16 == 1)
    71c0:	001f5093          	srli	ra,t5,0x1
    71c4:	c699                	beqz	a3,71d2 <iterate+0x90>
                   crc |= 0x8000;
    71c6:	0120c7b3          	xor	a5,ra,s2
    71ca:	01079613          	slli	a2,a5,0x10
    71ce:	01065093          	srli	ra,a2,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    71d2:	0012c333          	xor	t1,t0,ra
                if (x16 == 1)
    71d6:	00137393          	andi	t2,t1,1
                data >>= 1;
    71da:	00475593          	srli	a1,a4,0x4
                if (x16 == 1)
    71de:	0010de13          	srli	t3,ra,0x1
    71e2:	00038863          	beqz	t2,71f2 <iterate+0xb0>
                   crc |= 0x8000;
    71e6:	012e4833          	xor	a6,t3,s2
    71ea:	01081893          	slli	a7,a6,0x10
    71ee:	0108de13          	srli	t3,a7,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    71f2:	01c5ceb3          	xor	t4,a1,t3
                if (x16 == 1)
    71f6:	001eff13          	andi	t5,t4,1
                data >>= 1;
    71fa:	00575f93          	srli	t6,a4,0x5
                if (x16 == 1)
    71fe:	001e5793          	srli	a5,t3,0x1
    7202:	000f0863          	beqz	t5,7212 <iterate+0xd0>
                   crc |= 0x8000;
    7206:	0127c6b3          	xor	a3,a5,s2
    720a:	01069293          	slli	t0,a3,0x10
    720e:	0102d793          	srli	a5,t0,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7212:	00ffc633          	xor	a2,t6,a5
                if (x16 == 1)
    7216:	00167093          	andi	ra,a2,1
                data >>= 1;
    721a:	00675313          	srli	t1,a4,0x6
                if (x16 == 1)
    721e:	0017d813          	srli	a6,a5,0x1
    7222:	00008863          	beqz	ra,7232 <iterate+0xf0>
                   crc |= 0x8000;
    7226:	012843b3          	xor	t2,a6,s2
    722a:	01039593          	slli	a1,t2,0x10
    722e:	0105d813          	srli	a6,a1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7232:	010348b3          	xor	a7,t1,a6
                if (x16 == 1)
    7236:	0018fe13          	andi	t3,a7,1
                data >>= 1;
    723a:	831d                	srli	a4,a4,0x7
                if (x16 == 1)
    723c:	00185f93          	srli	t6,a6,0x1
    7240:	000e0863          	beqz	t3,7250 <iterate+0x10e>
                   crc |= 0x8000;
    7244:	012fceb3          	xor	t4,t6,s2
    7248:	010e9f13          	slli	t5,t4,0x10
    724c:	010f5f93          	srli	t6,t5,0x10
                if (x16 == 1)
    7250:	001ff693          	andi	a3,t6,1
    7254:	001fd613          	srli	a2,t6,0x1
    7258:	00e68863          	beq	a3,a4,7268 <iterate+0x126>
                   crc |= 0x8000;
    725c:	012642b3          	xor	t0,a2,s2
    7260:	01029793          	slli	a5,t0,0x10
    7264:	0107d613          	srli	a2,a5,0x10
        crc=crcu8( (ee_u8) ((newval)>>8)        ,crc);
    7268:	8121                	srli	a0,a0,0x8
    726a:	0ff57093          	zext.b	ra,a0
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    726e:	00c0c333          	xor	t1,ra,a2
                if (x16 == 1)
    7272:	00137393          	andi	t2,t1,1
                data >>= 1;
    7276:	0010d593          	srli	a1,ra,0x1
                if (x16 == 1)
    727a:	00165e13          	srli	t3,a2,0x1
    727e:	00038863          	beqz	t2,728e <iterate+0x14c>
                   crc |= 0x8000;
    7282:	012e4833          	xor	a6,t3,s2
    7286:	01081893          	slli	a7,a6,0x10
    728a:	0108de13          	srli	t3,a7,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    728e:	01c5c733          	xor	a4,a1,t3
                if (x16 == 1)
    7292:	00177e93          	andi	t4,a4,1
                data >>= 1;
    7296:	0020df13          	srli	t5,ra,0x2
                if (x16 == 1)
    729a:	001e5293          	srli	t0,t3,0x1
    729e:	000e8863          	beqz	t4,72ae <iterate+0x16c>
                   crc |= 0x8000;
    72a2:	0122cfb3          	xor	t6,t0,s2
    72a6:	010f9693          	slli	a3,t6,0x10
    72aa:	0106d293          	srli	t0,a3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    72ae:	005f47b3          	xor	a5,t5,t0
                if (x16 == 1)
    72b2:	0017f613          	andi	a2,a5,1
                data >>= 1;
    72b6:	0030d513          	srli	a0,ra,0x3
                if (x16 == 1)
    72ba:	0012d593          	srli	a1,t0,0x1
    72be:	c619                	beqz	a2,72cc <iterate+0x18a>
                   crc |= 0x8000;
    72c0:	0125c333          	xor	t1,a1,s2
    72c4:	01031393          	slli	t2,t1,0x10
    72c8:	0103d593          	srli	a1,t2,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    72cc:	00b54833          	xor	a6,a0,a1
                if (x16 == 1)
    72d0:	00187893          	andi	a7,a6,1
                data >>= 1;
    72d4:	0040de13          	srli	t3,ra,0x4
                if (x16 == 1)
    72d8:	0015df13          	srli	t5,a1,0x1
    72dc:	00088863          	beqz	a7,72ec <iterate+0x1aa>
                   crc |= 0x8000;
    72e0:	012f4733          	xor	a4,t5,s2
    72e4:	01071e93          	slli	t4,a4,0x10
    72e8:	010edf13          	srli	t5,t4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    72ec:	01ee4fb3          	xor	t6,t3,t5
                if (x16 == 1)
    72f0:	001ff293          	andi	t0,t6,1
                data >>= 1;
    72f4:	0050d693          	srli	a3,ra,0x5
                if (x16 == 1)
    72f8:	001f5513          	srli	a0,t5,0x1
    72fc:	00028863          	beqz	t0,730c <iterate+0x1ca>
                   crc |= 0x8000;
    7300:	012547b3          	xor	a5,a0,s2
    7304:	01079613          	slli	a2,a5,0x10
    7308:	01065513          	srli	a0,a2,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    730c:	00a6c333          	xor	t1,a3,a0
                if (x16 == 1)
    7310:	00137393          	andi	t2,t1,1
                data >>= 1;
    7314:	0060d593          	srli	a1,ra,0x6
                if (x16 == 1)
    7318:	00155e13          	srli	t3,a0,0x1
    731c:	00038863          	beqz	t2,732c <iterate+0x1ea>
                   crc |= 0x8000;
    7320:	012e4833          	xor	a6,t3,s2
    7324:	01081893          	slli	a7,a6,0x10
    7328:	0108de13          	srli	t3,a7,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    732c:	01c5c733          	xor	a4,a1,t3
                if (x16 == 1)
    7330:	00177e93          	andi	t4,a4,1
                data >>= 1;
    7334:	0070d093          	srli	ra,ra,0x7
                if (x16 == 1)
    7338:	001e5293          	srli	t0,t3,0x1
    733c:	000e8863          	beqz	t4,734c <iterate+0x20a>
                   crc |= 0x8000;
    7340:	0122cf33          	xor	t5,t0,s2
    7344:	010f1f93          	slli	t6,t5,0x10
    7348:	010fd293          	srli	t0,t6,0x10
                if (x16 == 1)
    734c:	0012f693          	andi	a3,t0,1
    7350:	0012d513          	srli	a0,t0,0x1
    7354:	00168863          	beq	a3,ra,7364 <iterate+0x222>
                   crc |= 0x8000;
    7358:	012547b3          	xor	a5,a0,s2
    735c:	01079613          	slli	a2,a5,0x10
    7360:	01065513          	srli	a0,a2,0x10
                res->crc=crcu16(crc,res->crc);
    7364:	02a99c23          	sh	a0,56(s3)
                crc=core_bench_list(res,-1);
    7368:	55fd                	li	a1,-1
    736a:	854e                	mv	a0,s3
    736c:	cd4ff0ef          	jal	ra,6840 <core_bench_list>
                res->crc=crcu16(crc,res->crc);
    7370:	0389d303          	lhu	t1,56(s3)
        crc=crcu8( (ee_u8) (newval)                             ,crc);
    7374:	0ff57393          	zext.b	t2,a0
                data >>= 1;
    7378:	0013d893          	srli	a7,t2,0x1
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    737c:	0063c5b3          	xor	a1,t2,t1
                if (x16 == 1)
    7380:	0015f813          	andi	a6,a1,1
                crc >>= 1;
    7384:	00135e93          	srli	t4,t1,0x1
                if (x16 == 1)
    7388:	00080863          	beqz	a6,7398 <iterate+0x256>
                   crc |= 0x8000;
    738c:	012ece33          	xor	t3,t4,s2
    7390:	010e1713          	slli	a4,t3,0x10
    7394:	01075e93          	srli	t4,a4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7398:	01d8c0b3          	xor	ra,a7,t4
                if (x16 == 1)
    739c:	0010ff13          	andi	t5,ra,1
                data >>= 1;
    73a0:	0023df93          	srli	t6,t2,0x2
                if (x16 == 1)
    73a4:	001ed313          	srli	t1,t4,0x1
    73a8:	000f0863          	beqz	t5,73b8 <iterate+0x276>
                   crc |= 0x8000;
    73ac:	012342b3          	xor	t0,t1,s2
    73b0:	01029693          	slli	a3,t0,0x10
    73b4:	0106d313          	srli	t1,a3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    73b8:	006fc633          	xor	a2,t6,t1
                if (x16 == 1)
    73bc:	00167593          	andi	a1,a2,1
                data >>= 1;
    73c0:	0033d813          	srli	a6,t2,0x3
                if (x16 == 1)
    73c4:	00135e13          	srli	t3,t1,0x1
    73c8:	c599                	beqz	a1,73d6 <iterate+0x294>
                   crc |= 0x8000;
    73ca:	012e48b3          	xor	a7,t3,s2
    73ce:	01089793          	slli	a5,a7,0x10
    73d2:	0107de13          	srli	t3,a5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    73d6:	01c84733          	xor	a4,a6,t3
                if (x16 == 1)
    73da:	00177e93          	andi	t4,a4,1
                data >>= 1;
    73de:	0043d093          	srli	ra,t2,0x4
                if (x16 == 1)
    73e2:	001e5293          	srli	t0,t3,0x1
    73e6:	000e8863          	beqz	t4,73f6 <iterate+0x2b4>
                   crc |= 0x8000;
    73ea:	0122cf33          	xor	t5,t0,s2
    73ee:	010f1f93          	slli	t6,t5,0x10
    73f2:	010fd293          	srli	t0,t6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    73f6:	0050c6b3          	xor	a3,ra,t0
                if (x16 == 1)
    73fa:	0016f313          	andi	t1,a3,1
                data >>= 1;
    73fe:	0053d613          	srli	a2,t2,0x5
                if (x16 == 1)
    7402:	0012d893          	srli	a7,t0,0x1
    7406:	00030863          	beqz	t1,7416 <iterate+0x2d4>
                   crc |= 0x8000;
    740a:	0128c5b3          	xor	a1,a7,s2
    740e:	01059813          	slli	a6,a1,0x10
    7412:	01085893          	srli	a7,a6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7416:	011647b3          	xor	a5,a2,a7
                if (x16 == 1)
    741a:	0017fe13          	andi	t3,a5,1
                data >>= 1;
    741e:	0063d713          	srli	a4,t2,0x6
                if (x16 == 1)
    7422:	0018df13          	srli	t5,a7,0x1
    7426:	000e0863          	beqz	t3,7436 <iterate+0x2f4>
                   crc |= 0x8000;
    742a:	012f4eb3          	xor	t4,t5,s2
    742e:	010e9093          	slli	ra,t4,0x10
    7432:	0100df13          	srli	t5,ra,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7436:	01e74fb3          	xor	t6,a4,t5
                if (x16 == 1)
    743a:	001ff293          	andi	t0,t6,1
                data >>= 1;
    743e:	0073d393          	srli	t2,t2,0x7
                if (x16 == 1)
    7442:	001f5613          	srli	a2,t5,0x1
    7446:	00028863          	beqz	t0,7456 <iterate+0x314>
                   crc |= 0x8000;
    744a:	012646b3          	xor	a3,a2,s2
    744e:	01069313          	slli	t1,a3,0x10
    7452:	01035613          	srli	a2,t1,0x10
                if (x16 == 1)
    7456:	00167593          	andi	a1,a2,1
    745a:	00165793          	srli	a5,a2,0x1
    745e:	00758863          	beq	a1,t2,746e <iterate+0x32c>
                   crc |= 0x8000;
    7462:	0127c833          	xor	a6,a5,s2
    7466:	01081893          	slli	a7,a6,0x10
    746a:	0108d793          	srli	a5,a7,0x10
        crc=crcu8( (ee_u8) ((newval)>>8)        ,crc);
    746e:	8121                	srli	a0,a0,0x8
    7470:	0ff57e13          	zext.b	t3,a0
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7474:	00fe4733          	xor	a4,t3,a5
                if (x16 == 1)
    7478:	00177e93          	andi	t4,a4,1
                data >>= 1;
    747c:	001e5093          	srli	ra,t3,0x1
                if (x16 == 1)
    7480:	0017d293          	srli	t0,a5,0x1
    7484:	000e8863          	beqz	t4,7494 <iterate+0x352>
                   crc |= 0x8000;
    7488:	0122cf33          	xor	t5,t0,s2
    748c:	010f1f93          	slli	t6,t5,0x10
    7490:	010fd293          	srli	t0,t6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7494:	0050c3b3          	xor	t2,ra,t0
                if (x16 == 1)
    7498:	0013f693          	andi	a3,t2,1
                data >>= 1;
    749c:	002e5313          	srli	t1,t3,0x2
                if (x16 == 1)
    74a0:	0012d813          	srli	a6,t0,0x1
    74a4:	c699                	beqz	a3,74b2 <iterate+0x370>
                   crc |= 0x8000;
    74a6:	01284633          	xor	a2,a6,s2
    74aa:	01061593          	slli	a1,a2,0x10
    74ae:	0105d813          	srli	a6,a1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    74b2:	010348b3          	xor	a7,t1,a6
                if (x16 == 1)
    74b6:	0018f513          	andi	a0,a7,1
                data >>= 1;
    74ba:	003e5713          	srli	a4,t3,0x3
                if (x16 == 1)
    74be:	00185093          	srli	ra,a6,0x1
    74c2:	c519                	beqz	a0,74d0 <iterate+0x38e>
                   crc |= 0x8000;
    74c4:	0120c7b3          	xor	a5,ra,s2
    74c8:	01079e93          	slli	t4,a5,0x10
    74cc:	010ed093          	srli	ra,t4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    74d0:	00174f33          	xor	t5,a4,ra
                if (x16 == 1)
    74d4:	001f7f93          	andi	t6,t5,1
                data >>= 1;
    74d8:	004e5293          	srli	t0,t3,0x4
                if (x16 == 1)
    74dc:	0010d313          	srli	t1,ra,0x1
    74e0:	000f8863          	beqz	t6,74f0 <iterate+0x3ae>
                   crc |= 0x8000;
    74e4:	012343b3          	xor	t2,t1,s2
    74e8:	01039693          	slli	a3,t2,0x10
    74ec:	0106d313          	srli	t1,a3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    74f0:	0062c633          	xor	a2,t0,t1
                if (x16 == 1)
    74f4:	00167593          	andi	a1,a2,1
                data >>= 1;
    74f8:	005e5813          	srli	a6,t3,0x5
                if (x16 == 1)
    74fc:	00135793          	srli	a5,t1,0x1
    7500:	c599                	beqz	a1,750e <iterate+0x3cc>
                   crc |= 0x8000;
    7502:	0127c8b3          	xor	a7,a5,s2
    7506:	01089513          	slli	a0,a7,0x10
    750a:	01055793          	srli	a5,a0,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    750e:	00f84733          	xor	a4,a6,a5
                if (x16 == 1)
    7512:	00177e93          	andi	t4,a4,1
                data >>= 1;
    7516:	006e5093          	srli	ra,t3,0x6
                if (x16 == 1)
    751a:	0017d293          	srli	t0,a5,0x1
    751e:	000e8863          	beqz	t4,752e <iterate+0x3ec>
                   crc |= 0x8000;
    7522:	0122cf33          	xor	t5,t0,s2
    7526:	010f1f93          	slli	t6,t5,0x10
    752a:	010fd293          	srli	t0,t6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    752e:	0050c3b3          	xor	t2,ra,t0
                if (x16 == 1)
    7532:	0013f693          	andi	a3,t2,1
                data >>= 1;
    7536:	007e5e13          	srli	t3,t3,0x7
                if (x16 == 1)
    753a:	0012d593          	srli	a1,t0,0x1
    753e:	c699                	beqz	a3,754c <iterate+0x40a>
                   crc |= 0x8000;
    7540:	0125c333          	xor	t1,a1,s2
    7544:	01031613          	slli	a2,t1,0x10
    7548:	01065593          	srli	a1,a2,0x10
                if (x16 == 1)
    754c:	0015f813          	andi	a6,a1,1
    7550:	0015d793          	srli	a5,a1,0x1
    7554:	01c80863          	beq	a6,t3,7564 <iterate+0x422>
                   crc |= 0x8000;
    7558:	0127c8b3          	xor	a7,a5,s2
    755c:	01089513          	slli	a0,a7,0x10
    7560:	01055793          	srli	a5,a0,0x10
                res->crc=crcu16(crc,res->crc);
    7564:	02f99c23          	sh	a5,56(s3)
                if (i==0) res->crclist=res->crc;
    7568:	cc01                	beqz	s0,7580 <iterate+0x43e>
        for (i=0; i<iterations; i++) {
    756a:	0405                	addi	s0,s0,1
    756c:	be849ce3          	bne	s1,s0,7164 <iterate+0x22>
}
    7570:	40f2                	lw	ra,28(sp)
    7572:	4462                	lw	s0,24(sp)
    7574:	44d2                	lw	s1,20(sp)
    7576:	4942                	lw	s2,16(sp)
    7578:	49b2                	lw	s3,12(sp)
    757a:	4501                	li	a0,0
    757c:	6105                	addi	sp,sp,32
    757e:	8082                	ret
                if (i==0) res->crclist=res->crc;
    7580:	02f99d23          	sh	a5,58(s3)
        for (i=0; i<iterations; i++) {
    7584:	4405                	li	s0,1
    7586:	fe8485e3          	beq	s1,s0,7570 <iterate+0x42e>
    758a:	4405                	li	s0,1
    758c:	bee1                	j	7164 <iterate+0x22>

0000758e <get_seed_32>:
                switch (i) {
    758e:	4795                	li	a5,5
    7590:	02a7ef63          	bltu	a5,a0,75ce <get_seed_32+0x40>
    7594:	62c1                	lui	t0,0x10
    7596:	050a                	slli	a0,a0,0x2
    7598:	09028313          	addi	t1,t0,144 # 10090 <mem_name+0xc>
    759c:	006503b3          	add	t2,a0,t1
    75a0:	0003a583          	lw	a1,0(t2)
    75a4:	8582                	jr	a1
                                retval=seed5_volatile;
    75a6:	6645                	lui	a2,0x11
    75a8:	d8062503          	lw	a0,-640(a2) # 10d80 <seed5_volatile>
                                break;
    75ac:	8082                	ret
                                retval=seed1_volatile;
    75ae:	68c5                	lui	a7,0x11
    75b0:	d888a503          	lw	a0,-632(a7) # 10d88 <seed1_volatile>
                                break;
    75b4:	8082                	ret
                                retval=seed2_volatile;
    75b6:	6845                	lui	a6,0x11
    75b8:	d8482503          	lw	a0,-636(a6) # 10d84 <seed2_volatile>
                                break;
    75bc:	8082                	ret
                                retval=seed3_volatile;
    75be:	6741                	lui	a4,0x10
    75c0:	0f072503          	lw	a0,240(a4) # 100f0 <seed3_volatile>
                                break;
    75c4:	8082                	ret
                                retval=seed4_volatile;
    75c6:	66c1                	lui	a3,0x10
    75c8:	0ec6a503          	lw	a0,236(a3) # 100ec <seed4_volatile>
                                break;
    75cc:	8082                	ret
                switch (i) {
    75ce:	4501                	li	a0,0
        }
    75d0:	8082                	ret

000075d2 <crcu8>:
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    75d2:	00b546b3          	xor	a3,a0,a1
                if (x16 == 1)
    75d6:	0016f293          	andi	t0,a3,1
                data >>= 1;
    75da:	00155713          	srli	a4,a0,0x1
                if (x16 == 1)
    75de:	0015d613          	srli	a2,a1,0x1
    75e2:	00028b63          	beqz	t0,75f8 <crcu8+0x26>
                   crc |= 0x8000;
    75e6:	7369                	lui	t1,0xffffa
    75e8:	00130393          	addi	t2,t1,1 # ffffa001 <tohost+0x2fa7a001>
    75ec:	007647b3          	xor	a5,a2,t2
    75f0:	01079593          	slli	a1,a5,0x10
    75f4:	0105d613          	srli	a2,a1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    75f8:	00c74833          	xor	a6,a4,a2
                if (x16 == 1)
    75fc:	00187893          	andi	a7,a6,1
                data >>= 1;
    7600:	00255e13          	srli	t3,a0,0x2
                if (x16 == 1)
    7604:	00165293          	srli	t0,a2,0x1
    7608:	00088b63          	beqz	a7,761e <crcu8+0x4c>
                   crc |= 0x8000;
    760c:	7ee9                	lui	t4,0xffffa
    760e:	001e8f13          	addi	t5,t4,1 # ffffa001 <tohost+0x2fa7a001>
    7612:	01e2cfb3          	xor	t6,t0,t5
    7616:	010f9693          	slli	a3,t6,0x10
    761a:	0106d293          	srli	t0,a3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    761e:	005e4733          	xor	a4,t3,t0
                if (x16 == 1)
    7622:	00177313          	andi	t1,a4,1
                data >>= 1;
    7626:	00355393          	srli	t2,a0,0x3
                if (x16 == 1)
    762a:	0012d893          	srli	a7,t0,0x1
    762e:	00030b63          	beqz	t1,7644 <crcu8+0x72>
                   crc |= 0x8000;
    7632:	75e9                	lui	a1,0xffffa
    7634:	00158613          	addi	a2,a1,1 # ffffa001 <tohost+0x2fa7a001>
    7638:	00c8c7b3          	xor	a5,a7,a2
    763c:	01079813          	slli	a6,a5,0x10
    7640:	01085893          	srli	a7,a6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7644:	0113ce33          	xor	t3,t2,a7
                if (x16 == 1)
    7648:	001e7e93          	andi	t4,t3,1
                data >>= 1;
    764c:	00455f13          	srli	t5,a0,0x4
                if (x16 == 1)
    7650:	0018d313          	srli	t1,a7,0x1
    7654:	000e8b63          	beqz	t4,766a <crcu8+0x98>
                   crc |= 0x8000;
    7658:	7fe9                	lui	t6,0xffffa
    765a:	001f8693          	addi	a3,t6,1 # ffffa001 <tohost+0x2fa7a001>
    765e:	00d342b3          	xor	t0,t1,a3
    7662:	01029713          	slli	a4,t0,0x10
    7666:	01075313          	srli	t1,a4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    766a:	006f43b3          	xor	t2,t5,t1
                if (x16 == 1)
    766e:	0013f593          	andi	a1,t2,1
                data >>= 1;
    7672:	00555613          	srli	a2,a0,0x5
                if (x16 == 1)
    7676:	00135e93          	srli	t4,t1,0x1
    767a:	c991                	beqz	a1,768e <crcu8+0xbc>
                   crc |= 0x8000;
    767c:	7869                	lui	a6,0xffffa
    767e:	00180893          	addi	a7,a6,1 # ffffa001 <tohost+0x2fa7a001>
    7682:	011ec7b3          	xor	a5,t4,a7
    7686:	01079e13          	slli	t3,a5,0x10
    768a:	010e5e93          	srli	t4,t3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    768e:	01d64f33          	xor	t5,a2,t4
                if (x16 == 1)
    7692:	001f7f93          	andi	t6,t5,1
                data >>= 1;
    7696:	00655693          	srli	a3,a0,0x6
                if (x16 == 1)
    769a:	001ed593          	srli	a1,t4,0x1
    769e:	000f8b63          	beqz	t6,76b4 <crcu8+0xe2>
                   crc |= 0x8000;
    76a2:	72e9                	lui	t0,0xffffa
    76a4:	00128713          	addi	a4,t0,1 # ffffa001 <tohost+0x2fa7a001>
    76a8:	00e5c333          	xor	t1,a1,a4
    76ac:	01031393          	slli	t2,t1,0x10
    76b0:	0103d593          	srli	a1,t2,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    76b4:	00b6c633          	xor	a2,a3,a1
                if (x16 == 1)
    76b8:	00167813          	andi	a6,a2,1
                data >>= 1;
    76bc:	00755893          	srli	a7,a0,0x7
                if (x16 == 1)
    76c0:	0015df13          	srli	t5,a1,0x1
    76c4:	00080b63          	beqz	a6,76da <crcu8+0x108>
                   crc |= 0x8000;
    76c8:	7569                	lui	a0,0xffffa
    76ca:	00150e13          	addi	t3,a0,1 # ffffa001 <tohost+0x2fa7a001>
    76ce:	01cf47b3          	xor	a5,t5,t3
    76d2:	01079e93          	slli	t4,a5,0x10
    76d6:	010edf13          	srli	t5,t4,0x10
                if (x16 == 1)
    76da:	001f7f93          	andi	t6,t5,1
    76de:	001f5513          	srli	a0,t5,0x1
    76e2:	011f8b63          	beq	t6,a7,76f8 <crcu8+0x126>
                   crc |= 0x8000;
    76e6:	76e9                	lui	a3,0xffffa
    76e8:	00168293          	addi	t0,a3,1 # ffffa001 <tohost+0x2fa7a001>
    76ec:	00554733          	xor	a4,a0,t0
    76f0:	01071313          	slli	t1,a4,0x10
    76f4:	01035513          	srli	a0,t1,0x10
}
    76f8:	8082                	ret

000076fa <crcu16>:
        crc=crcu8( (ee_u8) (newval)                             ,crc);
    76fa:	0ff57713          	zext.b	a4,a0
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    76fe:	00b746b3          	xor	a3,a4,a1
                if (x16 == 1)
    7702:	0016f293          	andi	t0,a3,1
ee_u16 crcu16(ee_u16 newval, ee_u16 crc) {
    7706:	87aa                	mv	a5,a0
                data >>= 1;
    7708:	00175613          	srli	a2,a4,0x1
                crc >>= 1;
    770c:	0015d813          	srli	a6,a1,0x1
                if (x16 == 1)
    7710:	00028b63          	beqz	t0,7726 <crcu16+0x2c>
                   crc |= 0x8000;
    7714:	7369                	lui	t1,0xffffa
    7716:	00130393          	addi	t2,t1,1 # ffffa001 <tohost+0x2fa7a001>
    771a:	00784533          	xor	a0,a6,t2
    771e:	01051593          	slli	a1,a0,0x10
    7722:	0105d813          	srli	a6,a1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7726:	010648b3          	xor	a7,a2,a6
                if (x16 == 1)
    772a:	0018fe13          	andi	t3,a7,1
                data >>= 1;
    772e:	00275e93          	srli	t4,a4,0x2
                crc >>= 1;
    7732:	00185313          	srli	t1,a6,0x1
                if (x16 == 1)
    7736:	000e0b63          	beqz	t3,774c <crcu16+0x52>
                   crc |= 0x8000;
    773a:	7f69                	lui	t5,0xffffa
    773c:	001f0f93          	addi	t6,t5,1 # ffffa001 <tohost+0x2fa7a001>
    7740:	01f346b3          	xor	a3,t1,t6
    7744:	01069293          	slli	t0,a3,0x10
    7748:	0102d313          	srli	t1,t0,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    774c:	006ec633          	xor	a2,t4,t1
                if (x16 == 1)
    7750:	00167393          	andi	t2,a2,1
                data >>= 1;
    7754:	00375593          	srli	a1,a4,0x3
                crc >>= 1;
    7758:	00135e93          	srli	t4,t1,0x1
                if (x16 == 1)
    775c:	00038b63          	beqz	t2,7772 <crcu16+0x78>
                   crc |= 0x8000;
    7760:	7869                	lui	a6,0xffffa
    7762:	00180893          	addi	a7,a6,1 # ffffa001 <tohost+0x2fa7a001>
    7766:	011ec533          	xor	a0,t4,a7
    776a:	01051e13          	slli	t3,a0,0x10
    776e:	010e5e93          	srli	t4,t3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7772:	01d5cf33          	xor	t5,a1,t4
                if (x16 == 1)
    7776:	001f7f93          	andi	t6,t5,1
                data >>= 1;
    777a:	00475693          	srli	a3,a4,0x4
                crc >>= 1;
    777e:	001ed593          	srli	a1,t4,0x1
                if (x16 == 1)
    7782:	000f8b63          	beqz	t6,7798 <crcu16+0x9e>
                   crc |= 0x8000;
    7786:	72e9                	lui	t0,0xffffa
    7788:	00128313          	addi	t1,t0,1 # ffffa001 <tohost+0x2fa7a001>
    778c:	0065c633          	xor	a2,a1,t1
    7790:	01061393          	slli	t2,a2,0x10
    7794:	0103d593          	srli	a1,t2,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7798:	00b6c833          	xor	a6,a3,a1
                if (x16 == 1)
    779c:	00187893          	andi	a7,a6,1
                data >>= 1;
    77a0:	00575e13          	srli	t3,a4,0x5
                crc >>= 1;
    77a4:	0015d293          	srli	t0,a1,0x1
                if (x16 == 1)
    77a8:	00088b63          	beqz	a7,77be <crcu16+0xc4>
                   crc |= 0x8000;
    77ac:	7ee9                	lui	t4,0xffffa
    77ae:	001e8f13          	addi	t5,t4,1 # ffffa001 <tohost+0x2fa7a001>
    77b2:	01e2c533          	xor	a0,t0,t5
    77b6:	01051f93          	slli	t6,a0,0x10
    77ba:	010fd293          	srli	t0,t6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    77be:	005e46b3          	xor	a3,t3,t0
                if (x16 == 1)
    77c2:	0016f313          	andi	t1,a3,1
                data >>= 1;
    77c6:	00675393          	srli	t2,a4,0x6
                crc >>= 1;
    77ca:	0012de13          	srli	t3,t0,0x1
                if (x16 == 1)
    77ce:	00030b63          	beqz	t1,77e4 <crcu16+0xea>
                   crc |= 0x8000;
    77d2:	7669                	lui	a2,0xffffa
    77d4:	00160593          	addi	a1,a2,1 # ffffa001 <tohost+0x2fa7a001>
    77d8:	00be4833          	xor	a6,t3,a1
    77dc:	01081893          	slli	a7,a6,0x10
    77e0:	0108de13          	srli	t3,a7,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    77e4:	01c3ceb3          	xor	t4,t2,t3
                if (x16 == 1)
    77e8:	001eff13          	andi	t5,t4,1
                data >>= 1;
    77ec:	831d                	srli	a4,a4,0x7
                crc >>= 1;
    77ee:	001e5313          	srli	t1,t3,0x1
                if (x16 == 1)
    77f2:	000f0b63          	beqz	t5,7808 <crcu16+0x10e>
                   crc |= 0x8000;
    77f6:	7fe9                	lui	t6,0xffffa
    77f8:	001f8293          	addi	t0,t6,1 # ffffa001 <tohost+0x2fa7a001>
    77fc:	00534533          	xor	a0,t1,t0
    7800:	01051693          	slli	a3,a0,0x10
    7804:	0106d313          	srli	t1,a3,0x10
                if (x16 == 1)
    7808:	00137393          	andi	t2,t1,1
                crc >>= 1;
    780c:	00135e13          	srli	t3,t1,0x1
                if (x16 == 1)
    7810:	00e38b63          	beq	t2,a4,7826 <crcu16+0x12c>
                   crc |= 0x8000;
    7814:	7669                	lui	a2,0xffffa
    7816:	00160593          	addi	a1,a2,1 # ffffa001 <tohost+0x2fa7a001>
    781a:	00be4833          	xor	a6,t3,a1
    781e:	01081893          	slli	a7,a6,0x10
    7822:	0108de13          	srli	t3,a7,0x10
        crc=crcu8( (ee_u8) ((newval)>>8)        ,crc);
    7826:	0087de93          	srli	t4,a5,0x8
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    782a:	01cecf33          	xor	t5,t4,t3
                if (x16 == 1)
    782e:	001f7f93          	andi	t6,t5,1
                data >>= 1;
    7832:	0097d713          	srli	a4,a5,0x9
                if (x16 == 1)
    7836:	001e5313          	srli	t1,t3,0x1
    783a:	000f8b63          	beqz	t6,7850 <crcu16+0x156>
                   crc |= 0x8000;
    783e:	77e9                	lui	a5,0xffffa
    7840:	00178293          	addi	t0,a5,1 # ffffa001 <tohost+0x2fa7a001>
    7844:	00534533          	xor	a0,t1,t0
    7848:	01051693          	slli	a3,a0,0x10
    784c:	0106d313          	srli	t1,a3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7850:	006743b3          	xor	t2,a4,t1
                if (x16 == 1)
    7854:	0013f613          	andi	a2,t2,1
                data >>= 1;
    7858:	002ed593          	srli	a1,t4,0x2
                if (x16 == 1)
    785c:	00135f93          	srli	t6,t1,0x1
    7860:	ca11                	beqz	a2,7874 <crcu16+0x17a>
                   crc |= 0x8000;
    7862:	7869                	lui	a6,0xffffa
    7864:	00180893          	addi	a7,a6,1 # ffffa001 <tohost+0x2fa7a001>
    7868:	011fce33          	xor	t3,t6,a7
    786c:	010e1f13          	slli	t5,t3,0x10
    7870:	010f5f93          	srli	t6,t5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7874:	01f5c733          	xor	a4,a1,t6
                if (x16 == 1)
    7878:	00177293          	andi	t0,a4,1
                data >>= 1;
    787c:	003ed793          	srli	a5,t4,0x3
                if (x16 == 1)
    7880:	001fd613          	srli	a2,t6,0x1
    7884:	00028b63          	beqz	t0,789a <crcu16+0x1a0>
                   crc |= 0x8000;
    7888:	76e9                	lui	a3,0xffffa
    788a:	00168313          	addi	t1,a3,1 # ffffa001 <tohost+0x2fa7a001>
    788e:	00664533          	xor	a0,a2,t1
    7892:	01051393          	slli	t2,a0,0x10
    7896:	0103d613          	srli	a2,t2,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    789a:	00c7c5b3          	xor	a1,a5,a2
                if (x16 == 1)
    789e:	0015f813          	andi	a6,a1,1
                data >>= 1;
    78a2:	004ed893          	srli	a7,t4,0x4
                if (x16 == 1)
    78a6:	00165293          	srli	t0,a2,0x1
    78aa:	00080b63          	beqz	a6,78c0 <crcu16+0x1c6>
                   crc |= 0x8000;
    78ae:	7e69                	lui	t3,0xffffa
    78b0:	001e0f13          	addi	t5,t3,1 # ffffa001 <tohost+0x2fa7a001>
    78b4:	01e2cfb3          	xor	t6,t0,t5
    78b8:	010f9713          	slli	a4,t6,0x10
    78bc:	01075293          	srli	t0,a4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    78c0:	0058c7b3          	xor	a5,a7,t0
                if (x16 == 1)
    78c4:	0017f693          	andi	a3,a5,1
                data >>= 1;
    78c8:	005ed313          	srli	t1,t4,0x5
                if (x16 == 1)
    78cc:	0012d813          	srli	a6,t0,0x1
    78d0:	ca91                	beqz	a3,78e4 <crcu16+0x1ea>
                   crc |= 0x8000;
    78d2:	73e9                	lui	t2,0xffffa
    78d4:	00138613          	addi	a2,t2,1 # ffffa001 <tohost+0x2fa7a001>
    78d8:	00c84533          	xor	a0,a6,a2
    78dc:	01051593          	slli	a1,a0,0x10
    78e0:	0105d813          	srli	a6,a1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    78e4:	010348b3          	xor	a7,t1,a6
                if (x16 == 1)
    78e8:	0018fe13          	andi	t3,a7,1
                data >>= 1;
    78ec:	006edf13          	srli	t5,t4,0x6
                if (x16 == 1)
    78f0:	00185693          	srli	a3,a6,0x1
    78f4:	000e0b63          	beqz	t3,790a <crcu16+0x210>
                   crc |= 0x8000;
    78f8:	7fe9                	lui	t6,0xffffa
    78fa:	001f8713          	addi	a4,t6,1 # ffffa001 <tohost+0x2fa7a001>
    78fe:	00e6c2b3          	xor	t0,a3,a4
    7902:	01029793          	slli	a5,t0,0x10
    7906:	0107d693          	srli	a3,a5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    790a:	00df4333          	xor	t1,t5,a3
                if (x16 == 1)
    790e:	00137393          	andi	t2,t1,1
                data >>= 1;
    7912:	007ede93          	srli	t4,t4,0x7
                if (x16 == 1)
    7916:	0016d893          	srli	a7,a3,0x1
    791a:	00038b63          	beqz	t2,7930 <crcu16+0x236>
                   crc |= 0x8000;
    791e:	7669                	lui	a2,0xffffa
    7920:	00160593          	addi	a1,a2,1 # ffffa001 <tohost+0x2fa7a001>
    7924:	00b8c533          	xor	a0,a7,a1
    7928:	01051813          	slli	a6,a0,0x10
    792c:	01085893          	srli	a7,a6,0x10
                if (x16 == 1)
    7930:	0018fe13          	andi	t3,a7,1
    7934:	0018d513          	srli	a0,a7,0x1
    7938:	01de0b63          	beq	t3,t4,794e <crcu16+0x254>
                   crc |= 0x8000;
    793c:	7f69                	lui	t5,0xffffa
    793e:	001f0f93          	addi	t6,t5,1 # ffffa001 <tohost+0x2fa7a001>
    7942:	01f54733          	xor	a4,a0,t6
    7946:	01071293          	slli	t0,a4,0x10
    794a:	0102d513          	srli	a0,t0,0x10
}
    794e:	8082                	ret

00007950 <crcu32>:
        crc=crcu8( (ee_u8) (newval)                             ,crc);
    7950:	0ff57713          	zext.b	a4,a0
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7954:	00b74833          	xor	a6,a4,a1
        return crcu16((ee_u16)newval, crc);
    7958:	01051693          	slli	a3,a0,0x10
                if (x16 == 1)
    795c:	00187293          	andi	t0,a6,1
ee_u16 crcu32(ee_u32 newval, ee_u16 crc) {
    7960:	87aa                	mv	a5,a0
        return crcu16((ee_u16)newval, crc);
    7962:	0106d313          	srli	t1,a3,0x10
                data >>= 1;
    7966:	00175613          	srli	a2,a4,0x1
                crc >>= 1;
    796a:	0015de13          	srli	t3,a1,0x1
                if (x16 == 1)
    796e:	00028b63          	beqz	t0,7984 <crcu32+0x34>
                   crc |= 0x8000;
    7972:	75e9                	lui	a1,0xffffa
    7974:	00158393          	addi	t2,a1,1 # ffffa001 <tohost+0x2fa7a001>
    7978:	007e4533          	xor	a0,t3,t2
    797c:	01051893          	slli	a7,a0,0x10
    7980:	0108de13          	srli	t3,a7,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7984:	01c64eb3          	xor	t4,a2,t3
                if (x16 == 1)
    7988:	001eff13          	andi	t5,t4,1
                data >>= 1;
    798c:	00275f93          	srli	t6,a4,0x2
                crc >>= 1;
    7990:	001e5393          	srli	t2,t3,0x1
                if (x16 == 1)
    7994:	000f0b63          	beqz	t5,79aa <crcu32+0x5a>
                   crc |= 0x8000;
    7998:	7869                	lui	a6,0xffffa
    799a:	00180293          	addi	t0,a6,1 # ffffa001 <tohost+0x2fa7a001>
    799e:	0053c6b3          	xor	a3,t2,t0
    79a2:	01069613          	slli	a2,a3,0x10
    79a6:	01065393          	srli	t2,a2,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    79aa:	007fc5b3          	xor	a1,t6,t2
                if (x16 == 1)
    79ae:	0015f893          	andi	a7,a1,1
                data >>= 1;
    79b2:	00375e13          	srli	t3,a4,0x3
                crc >>= 1;
    79b6:	0013d813          	srli	a6,t2,0x1
                if (x16 == 1)
    79ba:	00088b63          	beqz	a7,79d0 <crcu32+0x80>
                   crc |= 0x8000;
    79be:	7ee9                	lui	t4,0xffffa
    79c0:	001e8f13          	addi	t5,t4,1 # ffffa001 <tohost+0x2fa7a001>
    79c4:	01e84533          	xor	a0,a6,t5
    79c8:	01051f93          	slli	t6,a0,0x10
    79cc:	010fd813          	srli	a6,t6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    79d0:	010e42b3          	xor	t0,t3,a6
                if (x16 == 1)
    79d4:	0012f693          	andi	a3,t0,1
                data >>= 1;
    79d8:	00475613          	srli	a2,a4,0x4
                crc >>= 1;
    79dc:	00185e93          	srli	t4,a6,0x1
                if (x16 == 1)
    79e0:	ca91                	beqz	a3,79f4 <crcu32+0xa4>
                   crc |= 0x8000;
    79e2:	73e9                	lui	t2,0xffffa
    79e4:	00138593          	addi	a1,t2,1 # ffffa001 <tohost+0x2fa7a001>
    79e8:	00bec8b3          	xor	a7,t4,a1
    79ec:	01089e13          	slli	t3,a7,0x10
    79f0:	010e5e93          	srli	t4,t3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    79f4:	01d64f33          	xor	t5,a2,t4
                if (x16 == 1)
    79f8:	001f7f93          	andi	t6,t5,1
                data >>= 1;
    79fc:	00575813          	srli	a6,a4,0x5
                crc >>= 1;
    7a00:	001ed393          	srli	t2,t4,0x1
                if (x16 == 1)
    7a04:	000f8b63          	beqz	t6,7a1a <crcu32+0xca>
                   crc |= 0x8000;
    7a08:	72e9                	lui	t0,0xffffa
    7a0a:	00128693          	addi	a3,t0,1 # ffffa001 <tohost+0x2fa7a001>
    7a0e:	00d3c533          	xor	a0,t2,a3
    7a12:	01051613          	slli	a2,a0,0x10
    7a16:	01065393          	srli	t2,a2,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7a1a:	007845b3          	xor	a1,a6,t2
                if (x16 == 1)
    7a1e:	0015f893          	andi	a7,a1,1
                data >>= 1;
    7a22:	00675e13          	srli	t3,a4,0x6
                crc >>= 1;
    7a26:	0013d293          	srli	t0,t2,0x1
                if (x16 == 1)
    7a2a:	00088b63          	beqz	a7,7a40 <crcu32+0xf0>
                   crc |= 0x8000;
    7a2e:	7ee9                	lui	t4,0xffffa
    7a30:	001e8f13          	addi	t5,t4,1 # ffffa001 <tohost+0x2fa7a001>
    7a34:	01e2cfb3          	xor	t6,t0,t5
    7a38:	010f9813          	slli	a6,t6,0x10
    7a3c:	01085293          	srli	t0,a6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7a40:	005e46b3          	xor	a3,t3,t0
                if (x16 == 1)
    7a44:	0016f613          	andi	a2,a3,1
                data >>= 1;
    7a48:	831d                	srli	a4,a4,0x7
                crc >>= 1;
    7a4a:	0012de13          	srli	t3,t0,0x1
                if (x16 == 1)
    7a4e:	ca11                	beqz	a2,7a62 <crcu32+0x112>
                   crc |= 0x8000;
    7a50:	73e9                	lui	t2,0xffffa
    7a52:	00138593          	addi	a1,t2,1 # ffffa001 <tohost+0x2fa7a001>
    7a56:	00be4533          	xor	a0,t3,a1
    7a5a:	01051893          	slli	a7,a0,0x10
    7a5e:	0108de13          	srli	t3,a7,0x10
                if (x16 == 1)
    7a62:	001e7e93          	andi	t4,t3,1
                crc >>= 1;
    7a66:	001e5393          	srli	t2,t3,0x1
                if (x16 == 1)
    7a6a:	38ee9263          	bne	t4,a4,7dee <crcu32+0x49e>
        crc=crcu8( (ee_u8) ((newval)>>8)        ,crc);
    7a6e:	00835713          	srli	a4,t1,0x8
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7a72:	007746b3          	xor	a3,a4,t2
                if (x16 == 1)
    7a76:	0016f613          	andi	a2,a3,1
                data >>= 1;
    7a7a:	00935313          	srli	t1,t1,0x9
                if (x16 == 1)
    7a7e:	0013de93          	srli	t4,t2,0x1
    7a82:	ca11                	beqz	a2,7a96 <crcu32+0x146>
                   crc |= 0x8000;
    7a84:	75e9                	lui	a1,0xffffa
    7a86:	00158893          	addi	a7,a1,1 # ffffa001 <tohost+0x2fa7a001>
    7a8a:	011ec533          	xor	a0,t4,a7
    7a8e:	01051e13          	slli	t3,a0,0x10
    7a92:	010e5e93          	srli	t4,t3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7a96:	01d34f33          	xor	t5,t1,t4
                if (x16 == 1)
    7a9a:	001f7f93          	andi	t6,t5,1
                data >>= 1;
    7a9e:	00275813          	srli	a6,a4,0x2
                if (x16 == 1)
    7aa2:	001ed313          	srli	t1,t4,0x1
    7aa6:	000f8b63          	beqz	t6,7abc <crcu32+0x16c>
                   crc |= 0x8000;
    7aaa:	72e9                	lui	t0,0xffffa
    7aac:	00128393          	addi	t2,t0,1 # ffffa001 <tohost+0x2fa7a001>
    7ab0:	007346b3          	xor	a3,t1,t2
    7ab4:	01069613          	slli	a2,a3,0x10
    7ab8:	01065313          	srli	t1,a2,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7abc:	006845b3          	xor	a1,a6,t1
                if (x16 == 1)
    7ac0:	0015f893          	andi	a7,a1,1
                data >>= 1;
    7ac4:	00375e13          	srli	t3,a4,0x3
                if (x16 == 1)
    7ac8:	00135813          	srli	a6,t1,0x1
    7acc:	00088b63          	beqz	a7,7ae2 <crcu32+0x192>
                   crc |= 0x8000;
    7ad0:	7ee9                	lui	t4,0xffffa
    7ad2:	001e8f13          	addi	t5,t4,1 # ffffa001 <tohost+0x2fa7a001>
    7ad6:	01e84533          	xor	a0,a6,t5
    7ada:	01051f93          	slli	t6,a0,0x10
    7ade:	010fd813          	srli	a6,t6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7ae2:	010e42b3          	xor	t0,t3,a6
                if (x16 == 1)
    7ae6:	0012f393          	andi	t2,t0,1
                data >>= 1;
    7aea:	00475693          	srli	a3,a4,0x4
                if (x16 == 1)
    7aee:	00185e13          	srli	t3,a6,0x1
    7af2:	00038b63          	beqz	t2,7b08 <crcu32+0x1b8>
                   crc |= 0x8000;
    7af6:	7669                	lui	a2,0xffffa
    7af8:	00160313          	addi	t1,a2,1 # ffffa001 <tohost+0x2fa7a001>
    7afc:	006e45b3          	xor	a1,t3,t1
    7b00:	01059893          	slli	a7,a1,0x10
    7b04:	0108de13          	srli	t3,a7,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7b08:	01c6ceb3          	xor	t4,a3,t3
                if (x16 == 1)
    7b0c:	001eff13          	andi	t5,t4,1
                data >>= 1;
    7b10:	00575f93          	srli	t6,a4,0x5
                if (x16 == 1)
    7b14:	001e5313          	srli	t1,t3,0x1
    7b18:	000f0b63          	beqz	t5,7b2e <crcu32+0x1de>
                   crc |= 0x8000;
    7b1c:	7869                	lui	a6,0xffffa
    7b1e:	00180293          	addi	t0,a6,1 # ffffa001 <tohost+0x2fa7a001>
    7b22:	00534533          	xor	a0,t1,t0
    7b26:	01051393          	slli	t2,a0,0x10
    7b2a:	0103d313          	srli	t1,t2,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7b2e:	006fc6b3          	xor	a3,t6,t1
                if (x16 == 1)
    7b32:	0016f613          	andi	a2,a3,1
                data >>= 1;
    7b36:	00675593          	srli	a1,a4,0x6
                if (x16 == 1)
    7b3a:	00135f93          	srli	t6,t1,0x1
    7b3e:	ca11                	beqz	a2,7b52 <crcu32+0x202>
                   crc |= 0x8000;
    7b40:	78e9                	lui	a7,0xffffa
    7b42:	00188e13          	addi	t3,a7,1 # ffffa001 <tohost+0x2fa7a001>
    7b46:	01cfceb3          	xor	t4,t6,t3
    7b4a:	010e9f13          	slli	t5,t4,0x10
    7b4e:	010f5f93          	srli	t6,t5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7b52:	01f5c833          	xor	a6,a1,t6
                if (x16 == 1)
    7b56:	00187293          	andi	t0,a6,1
                data >>= 1;
    7b5a:	831d                	srli	a4,a4,0x7
                if (x16 == 1)
    7b5c:	001fd613          	srli	a2,t6,0x1
    7b60:	00028b63          	beqz	t0,7b76 <crcu32+0x226>
                   crc |= 0x8000;
    7b64:	73e9                	lui	t2,0xffffa
    7b66:	00138313          	addi	t1,t2,1 # ffffa001 <tohost+0x2fa7a001>
    7b6a:	00664533          	xor	a0,a2,t1
    7b6e:	01051693          	slli	a3,a0,0x10
    7b72:	0106d613          	srli	a2,a3,0x10
                if (x16 == 1)
    7b76:	00167593          	andi	a1,a2,1
    7b7a:	00165f93          	srli	t6,a2,0x1
    7b7e:	24e59e63          	bne	a1,a4,7dda <crcu32+0x48a>
        crc=crc16((ee_s16) (newval>>16) ,crc);
    7b82:	0107d813          	srli	a6,a5,0x10
        crc=crcu8( (ee_u8) (newval)                             ,crc);
    7b86:	0ff87293          	zext.b	t0,a6
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7b8a:	01f2c733          	xor	a4,t0,t6
                if (x16 == 1)
    7b8e:	00177393          	andi	t2,a4,1
        return crcu16((ee_u16)newval, crc);
    7b92:	83c1                	srli	a5,a5,0x10
                data >>= 1;
    7b94:	0012d313          	srli	t1,t0,0x1
                if (x16 == 1)
    7b98:	001fd893          	srli	a7,t6,0x1
    7b9c:	00038b63          	beqz	t2,7bb2 <crcu32+0x262>
                   crc |= 0x8000;
    7ba0:	76e9                	lui	a3,0xffffa
    7ba2:	00168613          	addi	a2,a3,1 # ffffa001 <tohost+0x2fa7a001>
    7ba6:	00c8c533          	xor	a0,a7,a2
    7baa:	01051593          	slli	a1,a0,0x10
    7bae:	0105d893          	srli	a7,a1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7bb2:	01134e33          	xor	t3,t1,a7
                if (x16 == 1)
    7bb6:	001e7e93          	andi	t4,t3,1
                data >>= 1;
    7bba:	0022df13          	srli	t5,t0,0x2
                if (x16 == 1)
    7bbe:	0018d313          	srli	t1,a7,0x1
    7bc2:	000e8b63          	beqz	t4,7bd8 <crcu32+0x288>
                   crc |= 0x8000;
    7bc6:	7fe9                	lui	t6,0xffffa
    7bc8:	001f8813          	addi	a6,t6,1 # ffffa001 <tohost+0x2fa7a001>
    7bcc:	01034733          	xor	a4,t1,a6
    7bd0:	01071393          	slli	t2,a4,0x10
    7bd4:	0103d313          	srli	t1,t2,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7bd8:	006f46b3          	xor	a3,t5,t1
                if (x16 == 1)
    7bdc:	0016f593          	andi	a1,a3,1
                data >>= 1;
    7be0:	0032d613          	srli	a2,t0,0x3
                if (x16 == 1)
    7be4:	00135f13          	srli	t5,t1,0x1
    7be8:	c991                	beqz	a1,7bfc <crcu32+0x2ac>
                   crc |= 0x8000;
    7bea:	78e9                	lui	a7,0xffffa
    7bec:	00188e13          	addi	t3,a7,1 # ffffa001 <tohost+0x2fa7a001>
    7bf0:	01cf4533          	xor	a0,t5,t3
    7bf4:	01051e93          	slli	t4,a0,0x10
    7bf8:	010edf13          	srli	t5,t4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7bfc:	01e64fb3          	xor	t6,a2,t5
                if (x16 == 1)
    7c00:	001ff813          	andi	a6,t6,1
                data >>= 1;
    7c04:	0042d713          	srli	a4,t0,0x4
                if (x16 == 1)
    7c08:	001f5893          	srli	a7,t5,0x1
    7c0c:	00080b63          	beqz	a6,7c22 <crcu32+0x2d2>
                   crc |= 0x8000;
    7c10:	73e9                	lui	t2,0xffffa
    7c12:	00138313          	addi	t1,t2,1 # ffffa001 <tohost+0x2fa7a001>
    7c16:	0068c6b3          	xor	a3,a7,t1
    7c1a:	01069593          	slli	a1,a3,0x10
    7c1e:	0105d893          	srli	a7,a1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7c22:	01174633          	xor	a2,a4,a7
                if (x16 == 1)
    7c26:	00167e13          	andi	t3,a2,1
                data >>= 1;
    7c2a:	0052de93          	srli	t4,t0,0x5
                if (x16 == 1)
    7c2e:	0018d713          	srli	a4,a7,0x1
    7c32:	000e0b63          	beqz	t3,7c48 <crcu32+0x2f8>
                   crc |= 0x8000;
    7c36:	7f69                	lui	t5,0xffffa
    7c38:	001f0f93          	addi	t6,t5,1 # ffffa001 <tohost+0x2fa7a001>
    7c3c:	01f74533          	xor	a0,a4,t6
    7c40:	01051813          	slli	a6,a0,0x10
    7c44:	01085713          	srli	a4,a6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7c48:	00eec3b3          	xor	t2,t4,a4
                if (x16 == 1)
    7c4c:	0013f313          	andi	t1,t2,1
                data >>= 1;
    7c50:	0062d693          	srli	a3,t0,0x6
                if (x16 == 1)
    7c54:	00175e93          	srli	t4,a4,0x1
    7c58:	00030b63          	beqz	t1,7c6e <crcu32+0x31e>
                   crc |= 0x8000;
    7c5c:	75e9                	lui	a1,0xffffa
    7c5e:	00158893          	addi	a7,a1,1 # ffffa001 <tohost+0x2fa7a001>
    7c62:	011ec633          	xor	a2,t4,a7
    7c66:	01061e13          	slli	t3,a2,0x10
    7c6a:	010e5e93          	srli	t4,t3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7c6e:	01d6cf33          	xor	t5,a3,t4
                if (x16 == 1)
    7c72:	001f7f93          	andi	t6,t5,1
                data >>= 1;
    7c76:	0072d293          	srli	t0,t0,0x7
                if (x16 == 1)
    7c7a:	001ed313          	srli	t1,t4,0x1
    7c7e:	000f8b63          	beqz	t6,7c94 <crcu32+0x344>
                   crc |= 0x8000;
    7c82:	7869                	lui	a6,0xffffa
    7c84:	00180713          	addi	a4,a6,1 # ffffa001 <tohost+0x2fa7a001>
    7c88:	00e34533          	xor	a0,t1,a4
    7c8c:	01051393          	slli	t2,a0,0x10
    7c90:	0103d313          	srli	t1,t2,0x10
                if (x16 == 1)
    7c94:	00137693          	andi	a3,t1,1
    7c98:	00135e93          	srli	t4,t1,0x1
    7c9c:	12569563          	bne	a3,t0,7dc6 <crcu32+0x476>
        crc=crcu8( (ee_u8) ((newval)>>8)        ,crc);
    7ca0:	0087df13          	srli	t5,a5,0x8
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7ca4:	01df4fb3          	xor	t6,t5,t4
                if (x16 == 1)
    7ca8:	001ff293          	andi	t0,t6,1
                data >>= 1;
    7cac:	83a5                	srli	a5,a5,0x9
                if (x16 == 1)
    7cae:	001ed313          	srli	t1,t4,0x1
    7cb2:	00028b63          	beqz	t0,7cc8 <crcu32+0x378>
                   crc |= 0x8000;
    7cb6:	7869                	lui	a6,0xffffa
    7cb8:	00180713          	addi	a4,a6,1 # ffffa001 <tohost+0x2fa7a001>
    7cbc:	00e34533          	xor	a0,t1,a4
    7cc0:	01051393          	slli	t2,a0,0x10
    7cc4:	0103d313          	srli	t1,t2,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7cc8:	0067c6b3          	xor	a3,a5,t1
                if (x16 == 1)
    7ccc:	0016f593          	andi	a1,a3,1
                data >>= 1;
    7cd0:	002f5893          	srli	a7,t5,0x2
                if (x16 == 1)
    7cd4:	00135293          	srli	t0,t1,0x1
    7cd8:	c991                	beqz	a1,7cec <crcu32+0x39c>
                   crc |= 0x8000;
    7cda:	7669                	lui	a2,0xffffa
    7cdc:	00160e13          	addi	t3,a2,1 # ffffa001 <tohost+0x2fa7a001>
    7ce0:	01c2ceb3          	xor	t4,t0,t3
    7ce4:	010e9f93          	slli	t6,t4,0x10
    7ce8:	010fd293          	srli	t0,t6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7cec:	0058c7b3          	xor	a5,a7,t0
                if (x16 == 1)
    7cf0:	0017f813          	andi	a6,a5,1
                data >>= 1;
    7cf4:	003f5713          	srli	a4,t5,0x3
                if (x16 == 1)
    7cf8:	0012d593          	srli	a1,t0,0x1
    7cfc:	00080b63          	beqz	a6,7d12 <crcu32+0x3c2>
                   crc |= 0x8000;
    7d00:	73e9                	lui	t2,0xffffa
    7d02:	00138313          	addi	t1,t2,1 # ffffa001 <tohost+0x2fa7a001>
    7d06:	0065c533          	xor	a0,a1,t1
    7d0a:	01051693          	slli	a3,a0,0x10
    7d0e:	0106d593          	srli	a1,a3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7d12:	00b748b3          	xor	a7,a4,a1
                if (x16 == 1)
    7d16:	0018f613          	andi	a2,a7,1
                data >>= 1;
    7d1a:	004f5e13          	srli	t3,t5,0x4
                if (x16 == 1)
    7d1e:	0015d813          	srli	a6,a1,0x1
    7d22:	ca11                	beqz	a2,7d36 <crcu32+0x3e6>
                   crc |= 0x8000;
    7d24:	7ee9                	lui	t4,0xffffa
    7d26:	001e8f93          	addi	t6,t4,1 # ffffa001 <tohost+0x2fa7a001>
    7d2a:	01f842b3          	xor	t0,a6,t6
    7d2e:	01029793          	slli	a5,t0,0x10
    7d32:	0107d813          	srli	a6,a5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7d36:	010e4733          	xor	a4,t3,a6
                if (x16 == 1)
    7d3a:	00177393          	andi	t2,a4,1
                data >>= 1;
    7d3e:	005f5313          	srli	t1,t5,0x5
                if (x16 == 1)
    7d42:	00185613          	srli	a2,a6,0x1
    7d46:	00038b63          	beqz	t2,7d5c <crcu32+0x40c>
                   crc |= 0x8000;
    7d4a:	76e9                	lui	a3,0xffffa
    7d4c:	00168593          	addi	a1,a3,1 # ffffa001 <tohost+0x2fa7a001>
    7d50:	00b64533          	xor	a0,a2,a1
    7d54:	01051893          	slli	a7,a0,0x10
    7d58:	0108d613          	srli	a2,a7,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7d5c:	00c34e33          	xor	t3,t1,a2
                if (x16 == 1)
    7d60:	001e7e93          	andi	t4,t3,1
                data >>= 1;
    7d64:	006f5f93          	srli	t6,t5,0x6
                if (x16 == 1)
    7d68:	00165393          	srli	t2,a2,0x1
    7d6c:	000e8b63          	beqz	t4,7d82 <crcu32+0x432>
                   crc |= 0x8000;
    7d70:	72e9                	lui	t0,0xffffa
    7d72:	00128793          	addi	a5,t0,1 # ffffa001 <tohost+0x2fa7a001>
    7d76:	00f3c833          	xor	a6,t2,a5
    7d7a:	01081713          	slli	a4,a6,0x10
    7d7e:	01075393          	srli	t2,a4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7d82:	007fc333          	xor	t1,t6,t2
                if (x16 == 1)
    7d86:	00137693          	andi	a3,t1,1
                data >>= 1;
    7d8a:	007f5f13          	srli	t5,t5,0x7
                if (x16 == 1)
    7d8e:	0013de13          	srli	t3,t2,0x1
    7d92:	ca91                	beqz	a3,7da6 <crcu32+0x456>
                   crc |= 0x8000;
    7d94:	75e9                	lui	a1,0xffffa
    7d96:	00158893          	addi	a7,a1,1 # ffffa001 <tohost+0x2fa7a001>
    7d9a:	011e4533          	xor	a0,t3,a7
    7d9e:	01051613          	slli	a2,a0,0x10
    7da2:	01065e13          	srli	t3,a2,0x10
                if (x16 == 1)
    7da6:	001e7e93          	andi	t4,t3,1
    7daa:	001e5513          	srli	a0,t3,0x1
    7dae:	01ee8b63          	beq	t4,t5,7dc4 <crcu32+0x474>
                   crc |= 0x8000;
    7db2:	7fe9                	lui	t6,0xffffa
    7db4:	001f8293          	addi	t0,t6,1 # ffffa001 <tohost+0x2fa7a001>
    7db8:	005547b3          	xor	a5,a0,t0
    7dbc:	01079813          	slli	a6,a5,0x10
    7dc0:	01085513          	srli	a0,a6,0x10
}
    7dc4:	8082                	ret
                   crc |= 0x8000;
    7dc6:	75e9                	lui	a1,0xffffa
    7dc8:	00158893          	addi	a7,a1,1 # ffffa001 <tohost+0x2fa7a001>
    7dcc:	011ec633          	xor	a2,t4,a7
    7dd0:	01061e13          	slli	t3,a2,0x10
    7dd4:	010e5e93          	srli	t4,t3,0x10
    7dd8:	b5e1                	j	7ca0 <crcu32+0x350>
    7dda:	78e9                	lui	a7,0xffffa
    7ddc:	00188e13          	addi	t3,a7,1 # ffffa001 <tohost+0x2fa7a001>
    7de0:	01cfceb3          	xor	t4,t6,t3
    7de4:	010e9f13          	slli	t5,t4,0x10
    7de8:	010f5f93          	srli	t6,t5,0x10
    7dec:	bb59                	j	7b82 <crcu32+0x232>
    7dee:	7f69                	lui	t5,0xffffa
    7df0:	001f0f93          	addi	t6,t5,1 # ffffa001 <tohost+0x2fa7a001>
    7df4:	01f3c833          	xor	a6,t2,t6
    7df8:	01081293          	slli	t0,a6,0x10
    7dfc:	0102d393          	srli	t2,t0,0x10
    7e00:	b1bd                	j	7a6e <crcu32+0x11e>

00007e02 <crc16>:
        crc=crcu8( (ee_u8) (newval)                             ,crc);
    7e02:	0ff57713          	zext.b	a4,a0
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7e06:	00b746b3          	xor	a3,a4,a1
        return crcu16((ee_u16)newval, crc);
    7e0a:	01051793          	slli	a5,a0,0x10
                if (x16 == 1)
    7e0e:	0016f293          	andi	t0,a3,1
        return crcu16((ee_u16)newval, crc);
    7e12:	0107d313          	srli	t1,a5,0x10
                data >>= 1;
    7e16:	00175613          	srli	a2,a4,0x1
                crc >>= 1;
    7e1a:	0015d893          	srli	a7,a1,0x1
                if (x16 == 1)
    7e1e:	00028b63          	beqz	t0,7e34 <crc16+0x32>
                   crc |= 0x8000;
    7e22:	73e9                	lui	t2,0xffffa
    7e24:	00138593          	addi	a1,t2,1 # ffffa001 <tohost+0x2fa7a001>
    7e28:	00b8c533          	xor	a0,a7,a1
    7e2c:	01051813          	slli	a6,a0,0x10
    7e30:	01085893          	srli	a7,a6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7e34:	01164e33          	xor	t3,a2,a7
                if (x16 == 1)
    7e38:	001e7e93          	andi	t4,t3,1
                data >>= 1;
    7e3c:	00275f13          	srli	t5,a4,0x2
                crc >>= 1;
    7e40:	0018d393          	srli	t2,a7,0x1
                if (x16 == 1)
    7e44:	000e8b63          	beqz	t4,7e5a <crc16+0x58>
                   crc |= 0x8000;
    7e48:	7fe9                	lui	t6,0xffffa
    7e4a:	001f8693          	addi	a3,t6,1 # ffffa001 <tohost+0x2fa7a001>
    7e4e:	00d3c2b3          	xor	t0,t2,a3
    7e52:	01029793          	slli	a5,t0,0x10
    7e56:	0107d393          	srli	t2,a5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7e5a:	007f4633          	xor	a2,t5,t2
                if (x16 == 1)
    7e5e:	00167593          	andi	a1,a2,1
                data >>= 1;
    7e62:	00375813          	srli	a6,a4,0x3
                crc >>= 1;
    7e66:	0013df13          	srli	t5,t2,0x1
                if (x16 == 1)
    7e6a:	c991                	beqz	a1,7e7e <crc16+0x7c>
                   crc |= 0x8000;
    7e6c:	78e9                	lui	a7,0xffffa
    7e6e:	00188e13          	addi	t3,a7,1 # ffffa001 <tohost+0x2fa7a001>
    7e72:	01cf4533          	xor	a0,t5,t3
    7e76:	01051e93          	slli	t4,a0,0x10
    7e7a:	010edf13          	srli	t5,t4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7e7e:	01e84fb3          	xor	t6,a6,t5
                if (x16 == 1)
    7e82:	001ff293          	andi	t0,t6,1
                data >>= 1;
    7e86:	00475693          	srli	a3,a4,0x4
                crc >>= 1;
    7e8a:	001f5813          	srli	a6,t5,0x1
                if (x16 == 1)
    7e8e:	00028b63          	beqz	t0,7ea4 <crc16+0xa2>
                   crc |= 0x8000;
    7e92:	77e9                	lui	a5,0xffffa
    7e94:	00178393          	addi	t2,a5,1 # ffffa001 <tohost+0x2fa7a001>
    7e98:	00784633          	xor	a2,a6,t2
    7e9c:	01061593          	slli	a1,a2,0x10
    7ea0:	0105d813          	srli	a6,a1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7ea4:	0106c8b3          	xor	a7,a3,a6
                if (x16 == 1)
    7ea8:	0018fe13          	andi	t3,a7,1
                data >>= 1;
    7eac:	00575e93          	srli	t4,a4,0x5
                crc >>= 1;
    7eb0:	00185793          	srli	a5,a6,0x1
                if (x16 == 1)
    7eb4:	000e0b63          	beqz	t3,7eca <crc16+0xc8>
                   crc |= 0x8000;
    7eb8:	7f69                	lui	t5,0xffffa
    7eba:	001f0f93          	addi	t6,t5,1 # ffffa001 <tohost+0x2fa7a001>
    7ebe:	01f7c533          	xor	a0,a5,t6
    7ec2:	01051293          	slli	t0,a0,0x10
    7ec6:	0102d793          	srli	a5,t0,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7eca:	00fec6b3          	xor	a3,t4,a5
                if (x16 == 1)
    7ece:	0016f393          	andi	t2,a3,1
                data >>= 1;
    7ed2:	00675593          	srli	a1,a4,0x6
                crc >>= 1;
    7ed6:	0017de93          	srli	t4,a5,0x1
                if (x16 == 1)
    7eda:	00038b63          	beqz	t2,7ef0 <crc16+0xee>
                   crc |= 0x8000;
    7ede:	7669                	lui	a2,0xffffa
    7ee0:	00160813          	addi	a6,a2,1 # ffffa001 <tohost+0x2fa7a001>
    7ee4:	010ec8b3          	xor	a7,t4,a6
    7ee8:	01089e13          	slli	t3,a7,0x10
    7eec:	010e5e93          	srli	t4,t3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7ef0:	01d5cf33          	xor	t5,a1,t4
                if (x16 == 1)
    7ef4:	001f7f93          	andi	t6,t5,1
                data >>= 1;
    7ef8:	831d                	srli	a4,a4,0x7
                crc >>= 1;
    7efa:	001ed393          	srli	t2,t4,0x1
                if (x16 == 1)
    7efe:	000f8b63          	beqz	t6,7f14 <crc16+0x112>
                   crc |= 0x8000;
    7f02:	72e9                	lui	t0,0xffffa
    7f04:	00128793          	addi	a5,t0,1 # ffffa001 <tohost+0x2fa7a001>
    7f08:	00f3c533          	xor	a0,t2,a5
    7f0c:	01051693          	slli	a3,a0,0x10
    7f10:	0106d393          	srli	t2,a3,0x10
                if (x16 == 1)
    7f14:	0013f593          	andi	a1,t2,1
                crc >>= 1;
    7f18:	0013de93          	srli	t4,t2,0x1
                if (x16 == 1)
    7f1c:	12e59663          	bne	a1,a4,8048 <crc16+0x246>
        crc=crcu8( (ee_u8) ((newval)>>8)        ,crc);
    7f20:	00835f13          	srli	t5,t1,0x8
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7f24:	01df4fb3          	xor	t6,t5,t4
                if (x16 == 1)
    7f28:	001ff293          	andi	t0,t6,1
                data >>= 1;
    7f2c:	00935313          	srli	t1,t1,0x9
                if (x16 == 1)
    7f30:	001ed393          	srli	t2,t4,0x1
    7f34:	00028b63          	beqz	t0,7f4a <crc16+0x148>
                   crc |= 0x8000;
    7f38:	7769                	lui	a4,0xffffa
    7f3a:	00170793          	addi	a5,a4,1 # ffffa001 <tohost+0x2fa7a001>
    7f3e:	00f3c533          	xor	a0,t2,a5
    7f42:	01051693          	slli	a3,a0,0x10
    7f46:	0106d393          	srli	t2,a3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7f4a:	007345b3          	xor	a1,t1,t2
                if (x16 == 1)
    7f4e:	0015f613          	andi	a2,a1,1
                data >>= 1;
    7f52:	002f5813          	srli	a6,t5,0x2
                if (x16 == 1)
    7f56:	0013d293          	srli	t0,t2,0x1
    7f5a:	ca11                	beqz	a2,7f6e <crc16+0x16c>
                   crc |= 0x8000;
    7f5c:	78e9                	lui	a7,0xffffa
    7f5e:	00188e13          	addi	t3,a7,1 # ffffa001 <tohost+0x2fa7a001>
    7f62:	01c2ceb3          	xor	t4,t0,t3
    7f66:	010e9f93          	slli	t6,t4,0x10
    7f6a:	010fd293          	srli	t0,t6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7f6e:	00584333          	xor	t1,a6,t0
                if (x16 == 1)
    7f72:	00137713          	andi	a4,t1,1
                data >>= 1;
    7f76:	003f5793          	srli	a5,t5,0x3
                if (x16 == 1)
    7f7a:	0012d613          	srli	a2,t0,0x1
    7f7e:	cb11                	beqz	a4,7f92 <crc16+0x190>
                   crc |= 0x8000;
    7f80:	76e9                	lui	a3,0xffffa
    7f82:	00168393          	addi	t2,a3,1 # ffffa001 <tohost+0x2fa7a001>
    7f86:	00764533          	xor	a0,a2,t2
    7f8a:	01051593          	slli	a1,a0,0x10
    7f8e:	0105d613          	srli	a2,a1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7f92:	00c7c833          	xor	a6,a5,a2
                if (x16 == 1)
    7f96:	00187893          	andi	a7,a6,1
                data >>= 1;
    7f9a:	004f5e13          	srli	t3,t5,0x4
                if (x16 == 1)
    7f9e:	00165693          	srli	a3,a2,0x1
    7fa2:	00088b63          	beqz	a7,7fb8 <crc16+0x1b6>
                   crc |= 0x8000;
    7fa6:	7ee9                	lui	t4,0xffffa
    7fa8:	001e8f93          	addi	t6,t4,1 # ffffa001 <tohost+0x2fa7a001>
    7fac:	01f6c2b3          	xor	t0,a3,t6
    7fb0:	01029313          	slli	t1,t0,0x10
    7fb4:	01035693          	srli	a3,t1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7fb8:	00de4733          	xor	a4,t3,a3
                if (x16 == 1)
    7fbc:	00177393          	andi	t2,a4,1
                data >>= 1;
    7fc0:	005f5793          	srli	a5,t5,0x5
                if (x16 == 1)
    7fc4:	0016d893          	srli	a7,a3,0x1
    7fc8:	00038b63          	beqz	t2,7fde <crc16+0x1dc>
                   crc |= 0x8000;
    7fcc:	75e9                	lui	a1,0xffffa
    7fce:	00158613          	addi	a2,a1,1 # ffffa001 <tohost+0x2fa7a001>
    7fd2:	00c8c533          	xor	a0,a7,a2
    7fd6:	01051813          	slli	a6,a0,0x10
    7fda:	01085893          	srli	a7,a6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7fde:	0117ce33          	xor	t3,a5,a7
                if (x16 == 1)
    7fe2:	001e7e93          	andi	t4,t3,1
                data >>= 1;
    7fe6:	006f5f93          	srli	t6,t5,0x6
                if (x16 == 1)
    7fea:	0018d393          	srli	t2,a7,0x1
    7fee:	000e8b63          	beqz	t4,8004 <crc16+0x202>
                   crc |= 0x8000;
    7ff2:	72e9                	lui	t0,0xffffa
    7ff4:	00128313          	addi	t1,t0,1 # ffffa001 <tohost+0x2fa7a001>
    7ff8:	0063c6b3          	xor	a3,t2,t1
    7ffc:	01069713          	slli	a4,a3,0x10
    8000:	01075393          	srli	t2,a4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    8004:	007fc7b3          	xor	a5,t6,t2
                if (x16 == 1)
    8008:	0017f593          	andi	a1,a5,1
                data >>= 1;
    800c:	007f5f13          	srli	t5,t5,0x7
                if (x16 == 1)
    8010:	0013de13          	srli	t3,t2,0x1
    8014:	c991                	beqz	a1,8028 <crc16+0x226>
                   crc |= 0x8000;
    8016:	7669                	lui	a2,0xffffa
    8018:	00160813          	addi	a6,a2,1 # ffffa001 <tohost+0x2fa7a001>
    801c:	010e4533          	xor	a0,t3,a6
    8020:	01051893          	slli	a7,a0,0x10
    8024:	0108de13          	srli	t3,a7,0x10
                if (x16 == 1)
    8028:	001e7e93          	andi	t4,t3,1
    802c:	001e5513          	srli	a0,t3,0x1
    8030:	01ee8b63          	beq	t4,t5,8046 <crc16+0x244>
                   crc |= 0x8000;
    8034:	7fe9                	lui	t6,0xffffa
    8036:	001f8293          	addi	t0,t6,1 # ffffa001 <tohost+0x2fa7a001>
    803a:	00554333          	xor	t1,a0,t0
    803e:	01031693          	slli	a3,t1,0x10
    8042:	0106d513          	srli	a0,a3,0x10
}
    8046:	8082                	ret
                   crc |= 0x8000;
    8048:	7669                	lui	a2,0xffffa
    804a:	00160813          	addi	a6,a2,1 # ffffa001 <tohost+0x2fa7a001>
    804e:	010ec8b3          	xor	a7,t4,a6
    8052:	01089e13          	slli	t3,a7,0x10
    8056:	010e5e93          	srli	t4,t3,0x10
    805a:	b5d9                	j	7f20 <crc16+0x11e>

0000805c <check_data_types>:
        }
        if (retval>0) {
                ee_printf("ERROR: Please modify the datatypes in core_portme.h!\n");
        }
        return retval;
}
    805c:	4501                	li	a0,0
    805e:	8082                	ret

00008060 <start_time>:
        Implementation may be capturing a system timer (as implemented in the example code)
        or zeroing some system parameters - e.g. setting the cpu clocks cycles to 0.
*/
void start_time(void) {
uint32_t mcyclel;
        asm volatile ("csrr %0,mcycle"  : "=r" (mcyclel) );
    8060:	b0002773          	csrr	a4,mcycle
        start_time_val = mcyclel;
    8064:	67c5                	lui	a5,0x11
    8066:	d6e7ae23          	sw	a4,-644(a5) # 10d7c <start_time_val>
}
    806a:	8082                	ret

0000806c <stop_time>:
        Implementation may be capturing a system timer (as implemented in the example code)
        or other system parameters - e.g. reading the current value of cpu cycles counter.
*/
void stop_time(void) {
uint32_t mcyclel;
        asm volatile ("csrr %0,mcycle"  : "=r" (mcyclel) );
    806c:	b0002773          	csrr	a4,mcycle
        stop_time_val = mcyclel;
    8070:	67c5                	lui	a5,0x11
    8072:	d6e7ac23          	sw	a4,-648(a5) # 10d78 <stop_time_val>
}
    8076:	8082                	ret

00008078 <get_time>:
        This methodology is taken to accomodate any hardware or simulated platform.
        The sample implementation returns millisecs by default,
        and the resolution is controlled by <TIMER_RES_DIVIDER>
*/
CORE_TICKS get_time(void) {
        CORE_TICKS elapsed=(CORE_TICKS)(MYTIMEDIFF(stop_time_val, start_time_val));
    8078:	67c5                	lui	a5,0x11
    807a:	62c5                	lui	t0,0x11
    807c:	d787a503          	lw	a0,-648(a5) # 10d78 <stop_time_val>
    8080:	d7c2a303          	lw	t1,-644(t0) # 10d7c <start_time_val>
        return elapsed;
}
    8084:	40650533          	sub	a0,a0,t1
    8088:	8082                	ret

0000808a <time_in_secs>:

        The <secs_ret> type is used to accomodate systems with no support for floating point.
        Default implementation implemented by the EE_TICKS_PER_SEC macro above.
*/
secs_ret time_in_secs(CORE_TICKS ticks) {
        secs_ret retval=((secs_ret)ticks) / (secs_ret)EE_TICKS_PER_SEC;
    808a:	3e800793          	li	a5,1000
        return retval;
}
    808e:	02f55533          	divu	a0,a0,a5
    8092:	8082                	ret

00008094 <portable_init>:
                ee_printf("ERROR! Please define ee_ptr_int to a type that holds a pointer!\n");
        }
        if (sizeof(ee_u32) != 4) {
                ee_printf("ERROR! Please define ee_u32 to a 32b unsigned type!\n");
        }
        p->portable_id=1;
    8094:	4785                	li	a5,1
    8096:	00f50023          	sb	a5,0(a0)
}
    809a:	8082                	ret

0000809c <portable_fini>:
/* Function : portable_fini
        Target specific final code
*/
void portable_fini(core_portable *p)
{
        p->portable_id=0;
    809c:	00050023          	sb	zero,0(a0)
}
    80a0:	8082                	ret

000080a2 <memset>:


void* memset(void* s, int c, size_t n)
{
  asm("mv t0, a0");
    80a2:	82aa                	mv	t0,a0
  asm("add a2, a2, a0");  // end = s + n
    80a4:	962a                	add	a2,a2,a0

000080a6 <.memset_loop>:
  asm(".memset_loop: bge a0, a2, .memset_end");
    80a6:	00c55663          	bge	a0,a2,80b2 <.memset_end>
  asm("sb a1, 0(a0)");
    80aa:	00b50023          	sb	a1,0(a0)
  asm("addi a0, a0, 1");
    80ae:	0505                	addi	a0,a0,1
  asm("j .memset_loop");
    80b0:	bfdd                	j	80a6 <.memset_loop>

000080b2 <.memset_end>:
  asm(".memset_end:");
  asm("mv a0, t0");
    80b2:	8516                	mv	a0,t0
  asm("jr ra");
    80b4:	8082                	ret
}
    80b6:	8082                	ret

000080b8 <main>:
MAIN_RETURN_TYPE main(void) {
    80b8:	7135                	addi	sp,sp,-160
    80ba:	cf06                	sw	ra,156(sp)
                                retval=seed1_volatile;
    80bc:	67c5                	lui	a5,0x11
                                retval=seed2_volatile;
    80be:	60c5                	lui	ra,0x11
                                retval=seed3_volatile;
    80c0:	62c1                	lui	t0,0x10
                                retval=seed1_volatile;
    80c2:	d887a603          	lw	a2,-632(a5) # 10d88 <seed1_volatile>
                                retval=seed2_volatile;
    80c6:	d840a683          	lw	a3,-636(ra) # 10d84 <seed2_volatile>
                                retval=seed3_volatile;
    80ca:	0f02a703          	lw	a4,240(t0) # 100f0 <seed3_volatile>
                                retval=seed4_volatile;
    80ce:	6341                	lui	t1,0x10
MAIN_RETURN_TYPE main(void) {
    80d0:	cb26                	sw	s1,148(sp)
                                retval=seed5_volatile;
    80d2:	63c5                	lui	t2,0x11
                                retval=seed4_volatile;
    80d4:	0ec32483          	lw	s1,236(t1) # 100ec <seed4_volatile>
MAIN_RETURN_TYPE main(void) {
    80d8:	cd22                	sw	s0,152(sp)
                                retval=seed5_volatile;
    80da:	d803a803          	lw	a6,-640(t2) # 10d80 <seed5_volatile>
        results[0].seed3=get_seed(3);
    80de:	01071413          	slli	s0,a4,0x10
    80e2:	41045513          	srai	a0,s0,0x10
        p->portable_id=1;
    80e6:	4585                	li	a1,1
MAIN_RETURN_TYPE main(void) {
    80e8:	c94a                	sw	s2,144(sp)
    80ea:	c74e                	sw	s3,140(sp)
    80ec:	c552                	sw	s4,136(sp)
    80ee:	c356                	sw	s5,132(sp)
    80f0:	c15a                	sw	s6,128(sp)
    80f2:	dede                	sw	s7,124(sp)
    80f4:	dce2                	sw	s8,120(sp)
    80f6:	dae6                	sw	s9,116(sp)
    80f8:	d8ea                	sw	s10,112(sp)
    80fa:	d6ee                	sw	s11,108(sp)
        p->portable_id=1;
    80fc:	04b10f23          	sb	a1,94(sp)
        results[0].seed1=get_seed(1);
    8100:	00c11e23          	sh	a2,28(sp)
        results[0].seed2=get_seed(2);
    8104:	00d11f23          	sh	a3,30(sp)
        results[0].seed3=get_seed(3);
    8108:	02a11023          	sh	a0,32(sp)
        results[0].iterations=get_seed_32(4);
    810c:	dc26                	sw	s1,56(sp)
        if (results[0].execs==0) { /* if not supplied, execute all algorithms */
    810e:	00081363          	bnez	a6,8114 <main+0x5c>
                results[0].execs=ALL_ALGORITHMS_MASK;
    8112:	481d                	li	a6,7
        if ((results[0].seed1==0) && (results[0].seed2==0) && (results[0].seed3==0)) { /* validation run */
    8114:	48f2                	lw	a7,28(sp)
    8116:	de42                	sw	a6,60(sp)
    8118:	66089663          	bnez	a7,8784 <__perf_end+0x614>
    811c:	66050e63          	beqz	a0,8798 <__perf_end+0x628>
        results[0].memblock[0]=(void *)static_memblk;
    8120:	6b41                	lui	s6,0x10
    8122:	5a8b0593          	addi	a1,s6,1448 # 105a8 <static_memblk>
                if ((1<<(ee_u32)i) & results[0].execs)
    8126:	00287b93          	andi	s7,a6,2
    812a:	00187c13          	andi	s8,a6,1
                        num_algorithms++;
    812e:	01703cb3          	snez	s9,s7
        results[0].memblock[0]=(void *)static_memblk;
    8132:	d22e                	sw	a1,36(sp)
        results[0].err=0;
    8134:	04011e23          	sh	zero,92(sp)
                if ((1<<(ee_u32)i) & results[0].execs)
    8138:	00487d13          	andi	s10,a6,4
    813c:	8de2                	mv	s11,s8
                        num_algorithms++;
    813e:	019c0e33          	add	t3,s8,s9
                if ((1<<(ee_u32)i) & results[0].execs)
    8142:	180d1763          	bnez	s10,82d0 <__perf_end+0x160>
                results[i].size=results[i].size/num_algorithms;
    8146:	7d000e93          	li	t4,2000
    814a:	03ced433          	divu	s0,t4,t3
    814e:	da22                	sw	s0,52(sp)
                if ((1<<(ee_u32)i) & results[0].execs) {
    8150:	660c1963          	bnez	s8,87c2 <__perf_end+0x652>
    8154:	400b93e3          	bnez	s7,8d5a <__perf_end+0xbea>
        if (results[0].iterations==0) {
    8158:	1a048e63          	beqz	s1,8314 <__perf_end+0x1a4>
    815c:	6a45                	lui	s4,0x11
    815e:	6ac5                	lui	s5,0x11
    8160:	0864                	addi	s1,sp,28
        asm volatile ("csrr %0,mcycle"  : "=r" (mcyclel) );
    8162:	b0002873          	csrr	a6,mcycle
        start_time_val = mcyclel;
    8166:	d70a2e23          	sw	a6,-644(s4) # 10d7c <start_time_val>

0000816a <__perf_start>:
        iterate(&results[0]);
    816a:	8526                	mv	a0,s1
    816c:	fd7fe0ef          	jal	ra,7142 <iterate>

00008170 <__perf_end>:
        asm volatile ("csrr %0,mcycle"  : "=r" (mcyclel) );
    8170:	b00024f3          	csrr	s1,mcycle
        return crcu16((ee_u16)newval, crc);
    8174:	01c15503          	lhu	a0,28(sp)
    8178:	4581                	li	a1,0
        stop_time_val = mcyclel;
    817a:	d69aac23          	sw	s1,-648(s5) # 10d78 <stop_time_val>
        return crcu16((ee_u16)newval, crc);
    817e:	d7cff0ef          	jal	ra,76fa <crcu16>
    8182:	85aa                	mv	a1,a0
    8184:	01e15503          	lhu	a0,30(sp)
        CORE_TICKS elapsed=(CORE_TICKS)(MYTIMEDIFF(stop_time_val, start_time_val));
    8188:	d7ca2a03          	lw	s4,-644(s4)
        return crcu16((ee_u16)newval, crc);
    818c:	d6eff0ef          	jal	ra,76fa <crcu16>
    8190:	85aa                	mv	a1,a0
    8192:	02015503          	lhu	a0,32(sp)
        CORE_TICKS elapsed=(CORE_TICKS)(MYTIMEDIFF(stop_time_val, start_time_val));
    8196:	41448ab3          	sub	s5,s1,s4
        return crcu16((ee_u16)newval, crc);
    819a:	d60ff0ef          	jal	ra,76fa <crcu16>
        seedcrc=crc16(results[0].size,seedcrc);
    819e:	58d2                	lw	a7,52(sp)
        return crcu16((ee_u16)newval, crc);
    81a0:	85aa                	mv	a1,a0
    81a2:	01089793          	slli	a5,a7,0x10
    81a6:	0107d513          	srli	a0,a5,0x10
        seedcrc=crc16(results[0].size,seedcrc);
    81aa:	c646                	sw	a7,12(sp)
        return crcu16((ee_u16)newval, crc);
    81ac:	d4eff0ef          	jal	ra,76fa <crcu16>
        switch (seedcrc) { /* test known output for common seeds */
    81b0:	65a1                	lui	a1,0x8
    81b2:	b0558c13          	addi	s8,a1,-1275 # 7b05 <crcu32+0x1b5>
        return crcu16((ee_u16)newval, crc);
    81b6:	89aa                	mv	s3,a0
        switch (seedcrc) { /* test known output for common seeds */
    81b8:	418503e3          	beq	a0,s8,8dbe <__perf_end+0xc4e>
    81bc:	34ac68e3          	bltu	s8,a0,8d0c <__perf_end+0xb9c>
    81c0:	6b09                	lui	s6,0x2
    81c2:	8f2b0393          	addi	t2,s6,-1806 # 18f2 <matrix_test+0x67c>
    81c6:	42750ee3          	beq	a0,t2,8e02 <__perf_end+0xc92>
    81ca:	6c15                	lui	s8,0x5
    81cc:	eafc0893          	addi	a7,s8,-337 # 4eaf <core_bench_state+0x3e5>
    81d0:	471518e3          	bne	a0,a7,8e40 <__perf_end+0xcd0>
                        ee_printf("Profile generation run parameters for coremark.\n");
    81d4:	67c1                	lui	a5,0x10
    81d6:	15078513          	addi	a0,a5,336 # 10150 <seed3_volatile+0x60>
    81da:	94bf80ef          	jal	ra,b24 <whisperPrintf>
                        break;
    81de:	608c0a13          	addi	s4,s8,1544
    81e2:	65b9                	lui	a1,0xe
    81e4:	6d1d                	lui	s10,0x7
    81e6:	5a458493          	addi	s1,a1,1444 # e5a4 <_end+0x5758>
    81ea:	8b52                	mv	s6,s4
    81ec:	a79d0913          	addi	s2,s10,-1415 # 6a79 <core_bench_list+0x239>
                for (i=0 ; i<default_num_contexts; i++) {
    81f0:	6c41                	lui	s8,0x10
    81f2:	0e8c2d83          	lw	s11,232(s8) # 100e8 <default_num_contexts>
    81f6:	620d8b63          	beqz	s11,882c <__perf_end+0x6bc>
    81fa:	4401                	li	s0,0
    81fc:	4d01                	li	s10,0
    81fe:	a03d                	j	822c <__perf_end+0xbc>
                        total_errors+=results[i].err;
    8200:	01de0f33          	add	t5,t3,t4
    8204:	ffcf5283          	lhu	t0,-4(t5)
                for (i=0 ; i<default_num_contexts; i++) {
    8208:	0d05                	addi	s10,s10,1
    820a:	0e8c2383          	lw	t2,232(s8)
                        total_errors+=results[i].err;
    820e:	9416                	add	s0,s0,t0
                for (i=0 ; i<default_num_contexts; i++) {
    8210:	010d1093          	slli	ra,s10,0x10
                        total_errors+=results[i].err;
    8214:	01041713          	slli	a4,s0,0x10
    8218:	01041b93          	slli	s7,s0,0x10
                for (i=0 ; i<default_num_contexts; i++) {
    821c:	0100dd13          	srli	s10,ra,0x10
                        total_errors+=results[i].err;
    8220:	01075c93          	srli	s9,a4,0x10
    8224:	410bd413          	srai	s0,s7,0x10
                for (i=0 ; i<default_num_contexts; i++) {
    8228:	607d7463          	bgeu	s10,t2,8830 <__perf_end+0x6c0>
                        results[i].err=0;
    822c:	004d1c93          	slli	s9,s10,0x4
    8230:	01ac8533          	add	a0,s9,s10
    8234:	00251e13          	slli	t3,a0,0x2
    8238:	050e0e93          	addi	t4,t3,80
    823c:	01010f13          	addi	t5,sp,16
    8240:	01ee8bb3          	add	s7,t4,t5
                        if ((results[i].execs & ID_LIST) &&
    8244:	fdcbad83          	lw	s11,-36(s7)
                        results[i].err=0;
    8248:	fe0b9e23          	sh	zero,-4(s7)
                        if ((results[i].execs & ID_LIST) &&
    824c:	001dff93          	andi	t6,s11,1
    8250:	020f8063          	beqz	t6,8270 <__perf_end+0x100>
                                (results[i].crclist!=list_known_crc[known_id])) {
    8254:	ff6bd603          	lhu	a2,-10(s7)
                        if ((results[i].execs & ID_LIST) &&
    8258:	01260c63          	beq	a2,s2,8270 <__perf_end+0x100>
                                ee_printf("[%u]ERROR! list crc 0x%04x - should be 0x%04x\n",i,results[i].crclist,list_known_crc[known_id]);
    825c:	6341                	lui	t1,0x10
    825e:	86ca                	mv	a3,s2
    8260:	85ea                	mv	a1,s10
    8262:	1e030513          	addi	a0,t1,480 # 101e0 <seed3_volatile+0xf0>
    8266:	8bff80ef          	jal	ra,b24 <whisperPrintf>
                                results[i].err++;
    826a:	4605                	li	a2,1
    826c:	fecb9e23          	sh	a2,-4(s7)
                        if ((results[i].execs & ID_MATRIX) &&
    8270:	002df693          	andi	a3,s11,2
    8274:	ca9d                	beqz	a3,82aa <__perf_end+0x13a>
                                (results[i].crcmatrix!=matrix_known_crc[known_id])) {
    8276:	01ac82b3          	add	t0,s9,s10
    827a:	00229393          	slli	t2,t0,0x2
    827e:	05038093          	addi	ra,t2,80
    8282:	0818                	addi	a4,sp,16
    8284:	00e08bb3          	add	s7,ra,a4
    8288:	ff8bd603          	lhu	a2,-8(s7)
                        if ((results[i].execs & ID_MATRIX) &&
    828c:	01660f63          	beq	a2,s6,82aa <__perf_end+0x13a>
                                ee_printf("[%u]ERROR! matrix crc 0x%04x - should be 0x%04x\n",i,results[i].crcmatrix,matrix_known_crc[known_id]);
    8290:	6841                	lui	a6,0x10
    8292:	86d2                	mv	a3,s4
    8294:	85ea                	mv	a1,s10
    8296:	21080513          	addi	a0,a6,528 # 10210 <seed3_volatile+0x120>
    829a:	88bf80ef          	jal	ra,b24 <whisperPrintf>
                                results[i].err++;
    829e:	ffcbd883          	lhu	a7,-4(s7)
    82a2:	00188793          	addi	a5,a7,1
    82a6:	fefb9e23          	sh	a5,-4(s7)
                                (results[i].crcstate!=state_known_crc[known_id])) {
    82aa:	9cea                	add	s9,s9,s10
    82ac:	002c9513          	slli	a0,s9,0x2
                        if ((results[i].execs & ID_STATE) &&
    82b0:	004df593          	andi	a1,s11,4
                                (results[i].crcstate!=state_known_crc[known_id])) {
    82b4:	05050e13          	addi	t3,a0,80
    82b8:	01010e93          	addi	t4,sp,16
                        if ((results[i].execs & ID_STATE) &&
    82bc:	d1b1                	beqz	a1,8200 <__perf_end+0x90>
                                (results[i].crcstate!=state_known_crc[known_id])) {
    82be:	01de0db3          	add	s11,t3,t4
    82c2:	ffadd603          	lhu	a2,-6(s11)
                        if ((results[i].execs & ID_STATE) &&
    82c6:	54961163          	bne	a2,s1,8808 <__perf_end+0x698>
                        total_errors+=results[i].err;
    82ca:	ffcdd283          	lhu	t0,-4(s11)
    82ce:	bf2d                	j	8208 <__perf_end+0x98>
                results[i].size=results[i].size/num_algorithms;
    82d0:	001e0793          	addi	a5,t3,1
    82d4:	7d000613          	li	a2,2000
    82d8:	02f65433          	divu	s0,a2,a5
    82dc:	da22                	sw	s0,52(sp)
                if ((1<<(ee_u32)i) & results[0].execs) {
    82de:	4e0c1263          	bnez	s8,87c2 <__perf_end+0x652>
    82e2:	340b91e3          	bnez	s7,8e24 <__perf_end+0xcb4>
                                results[ctx].memblock[i+1]=(char *)(results[ctx].memblock[0])+results[0].size*j;
    82e6:	028e0b33          	mul	s6,t3,s0
    82ea:	95da                	add	a1,a1,s6
    82ec:	d82e                	sw	a1,48(sp)
        for (i=0; i<NUM_ALGORITHMS; i++) {
    82ee:	4a0b9a63          	bnez	s7,87a2 <__perf_end+0x632>
    82f2:	000d8963          	beqz	s11,8304 <__perf_end+0x194>
                        results[i].list=core_list_init(results[0].size,results[i].memblock[1],results[i].seed1);
    82f6:	01c11603          	lh	a2,28(sp)
    82fa:	55a2                	lw	a1,40(sp)
    82fc:	8522                	mv	a0,s0
    82fe:	9e3f80ef          	jal	ra,ce0 <core_list_init>
    8302:	c0aa                	sw	a0,64(sp)
                        core_init_state(results[0].size,results[i].seed1,results[i].memblock[3]);
    8304:	5642                	lw	a2,48(sp)
    8306:	01c11583          	lh	a1,28(sp)
    830a:	8522                	mv	a0,s0
    830c:	becfc0ef          	jal	ra,46f8 <core_init_state>
        if (results[0].iterations==0) {
    8310:	e40496e3          	bnez	s1,815c <main+0xa4>
                   crc |= 0x8000;
    8314:	7f69                	lui	t5,0xffffa
    8316:	4905                	li	s2,1
    8318:	6a45                	lui	s4,0x11
    831a:	6ac5                	lui	s5,0x11
    831c:	0864                	addi	s1,sp,28
    831e:	001f0b93          	addi	s7,t5,1 # ffffa001 <tohost+0x2fa7a001>
                while (secs_passed < (secs_ret)1) {
    8322:	3e700b13          	li	s6,999
                        results[0].iterations*=10;
    8326:	00291f93          	slli	t6,s2,0x2
    832a:	012f87b3          	add	a5,t6,s2
    832e:	00179913          	slli	s2,a5,0x1
    8332:	dc4a                	sw	s2,56(sp)
        asm volatile ("csrr %0,mcycle"  : "=r" (mcyclel) );
    8334:	b00029f3          	csrr	s3,mcycle
        start_time_val = mcyclel;
    8338:	d73a2e23          	sw	s3,-644(s4) # 10d7c <start_time_val>
        res->crc=0;
    833c:	ca82                	sw	zero,84(sp)
    833e:	cc82                	sw	zero,88(sp)
        for (i=0; i<iterations; i++) {
    8340:	4401                	li	s0,0
    8342:	40090c63          	beqz	s2,875a <__perf_end+0x5ea>
                crc=core_bench_list(res,1);
    8346:	4585                	li	a1,1
    8348:	8526                	mv	a0,s1
    834a:	cf6fe0ef          	jal	ra,6840 <core_bench_list>
                res->crc=crcu16(crc,res->crc);
    834e:	05415683          	lhu	a3,84(sp)
        crc=crcu8( (ee_u8) (newval)                             ,crc);
    8352:	0ff57293          	zext.b	t0,a0
                data >>= 1;
    8356:	0012d313          	srli	t1,t0,0x1
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    835a:	00d2c633          	xor	a2,t0,a3
                if (x16 == 1)
    835e:	00167713          	andi	a4,a2,1
                crc >>= 1;
    8362:	0016d813          	srli	a6,a3,0x1
                if (x16 == 1)
    8366:	c719                	beqz	a4,8374 <__perf_end+0x204>
                   crc |= 0x8000;
    8368:	017840b3          	xor	ra,a6,s7
    836c:	01009393          	slli	t2,ra,0x10
    8370:	0103d813          	srli	a6,t2,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    8374:	010348b3          	xor	a7,t1,a6
                if (x16 == 1)
    8378:	0018f593          	andi	a1,a7,1
                data >>= 1;
    837c:	0022dc13          	srli	s8,t0,0x2
                if (x16 == 1)
    8380:	00185d93          	srli	s11,a6,0x1
    8384:	c599                	beqz	a1,8392 <__perf_end+0x222>
                   crc |= 0x8000;
    8386:	017dccb3          	xor	s9,s11,s7
    838a:	010c9d13          	slli	s10,s9,0x10
    838e:	010d5d93          	srli	s11,s10,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    8392:	01bc4e33          	xor	t3,s8,s11
                if (x16 == 1)
    8396:	001e7e93          	andi	t4,t3,1
                data >>= 1;
    839a:	0032df13          	srli	t5,t0,0x3
                if (x16 == 1)
    839e:	001dd713          	srli	a4,s11,0x1
    83a2:	000e8863          	beqz	t4,83b2 <__perf_end+0x242>
                   crc |= 0x8000;
    83a6:	01774fb3          	xor	t6,a4,s7
    83aa:	010f9693          	slli	a3,t6,0x10
    83ae:	0106d713          	srli	a4,a3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    83b2:	00ef4633          	xor	a2,t5,a4
                if (x16 == 1)
    83b6:	00167313          	andi	t1,a2,1
                data >>= 1;
    83ba:	0042d093          	srli	ra,t0,0x4
                if (x16 == 1)
    83be:	00175813          	srli	a6,a4,0x1
    83c2:	00030863          	beqz	t1,83d2 <__perf_end+0x262>
                   crc |= 0x8000;
    83c6:	017847b3          	xor	a5,a6,s7
    83ca:	01079393          	slli	t2,a5,0x10
    83ce:	0103d813          	srli	a6,t2,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    83d2:	0100c8b3          	xor	a7,ra,a6
                if (x16 == 1)
    83d6:	0018f593          	andi	a1,a7,1
                data >>= 1;
    83da:	0052dc13          	srli	s8,t0,0x5
                if (x16 == 1)
    83de:	00185d93          	srli	s11,a6,0x1
    83e2:	c599                	beqz	a1,83f0 <__perf_end+0x280>
                   crc |= 0x8000;
    83e4:	017dccb3          	xor	s9,s11,s7
    83e8:	010c9d13          	slli	s10,s9,0x10
    83ec:	010d5d93          	srli	s11,s10,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    83f0:	01bc4e33          	xor	t3,s8,s11
                if (x16 == 1)
    83f4:	001e7e93          	andi	t4,t3,1
                data >>= 1;
    83f8:	0062df13          	srli	t5,t0,0x6
                if (x16 == 1)
    83fc:	001dd613          	srli	a2,s11,0x1
    8400:	000e8863          	beqz	t4,8410 <__perf_end+0x2a0>
                   crc |= 0x8000;
    8404:	01764fb3          	xor	t6,a2,s7
    8408:	010f9693          	slli	a3,t6,0x10
    840c:	0106d613          	srli	a2,a3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    8410:	00cf4733          	xor	a4,t5,a2
                if (x16 == 1)
    8414:	00177313          	andi	t1,a4,1
                data >>= 1;
    8418:	0072d293          	srli	t0,t0,0x7
                if (x16 == 1)
    841c:	00165393          	srli	t2,a2,0x1
    8420:	00030863          	beqz	t1,8430 <__perf_end+0x2c0>
                   crc |= 0x8000;
    8424:	0173c0b3          	xor	ra,t2,s7
    8428:	01009793          	slli	a5,ra,0x10
    842c:	0107d393          	srli	t2,a5,0x10
                if (x16 == 1)
    8430:	0013f813          	andi	a6,t2,1
    8434:	0013dc13          	srli	s8,t2,0x1
    8438:	00580863          	beq	a6,t0,8448 <__perf_end+0x2d8>
                   crc |= 0x8000;
    843c:	017c48b3          	xor	a7,s8,s7
    8440:	01089593          	slli	a1,a7,0x10
    8444:	0105dc13          	srli	s8,a1,0x10
        crc=crcu8( (ee_u8) ((newval)>>8)        ,crc);
    8448:	8121                	srli	a0,a0,0x8
    844a:	0ff57c93          	zext.b	s9,a0
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    844e:	018ccd33          	xor	s10,s9,s8
                if (x16 == 1)
    8452:	001d7d93          	andi	s11,s10,1
                data >>= 1;
    8456:	001cde13          	srli	t3,s9,0x1
                if (x16 == 1)
    845a:	001c5f93          	srli	t6,s8,0x1
    845e:	000d8863          	beqz	s11,846e <__perf_end+0x2fe>
                   crc |= 0x8000;
    8462:	017fceb3          	xor	t4,t6,s7
    8466:	010e9f13          	slli	t5,t4,0x10
    846a:	010f5f93          	srli	t6,t5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    846e:	01fe46b3          	xor	a3,t3,t6
                if (x16 == 1)
    8472:	0016f613          	andi	a2,a3,1
                data >>= 1;
    8476:	002cd713          	srli	a4,s9,0x2
                if (x16 == 1)
    847a:	001fd093          	srli	ra,t6,0x1
    847e:	c619                	beqz	a2,848c <__perf_end+0x31c>
                   crc |= 0x8000;
    8480:	0170c333          	xor	t1,ra,s7
    8484:	01031293          	slli	t0,t1,0x10
    8488:	0102d093          	srli	ra,t0,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    848c:	001747b3          	xor	a5,a4,ra
                if (x16 == 1)
    8490:	0017f393          	andi	t2,a5,1
                data >>= 1;
    8494:	003cd813          	srli	a6,s9,0x3
                if (x16 == 1)
    8498:	0010dc13          	srli	s8,ra,0x1
    849c:	00038863          	beqz	t2,84ac <__perf_end+0x33c>
                   crc |= 0x8000;
    84a0:	017c48b3          	xor	a7,s8,s7
    84a4:	01089593          	slli	a1,a7,0x10
    84a8:	0105dc13          	srli	s8,a1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    84ac:	01884533          	xor	a0,a6,s8
                if (x16 == 1)
    84b0:	00157d13          	andi	s10,a0,1
                data >>= 1;
    84b4:	004cdd93          	srli	s11,s9,0x4
                if (x16 == 1)
    84b8:	001c5f13          	srli	t5,s8,0x1
    84bc:	000d0863          	beqz	s10,84cc <__perf_end+0x35c>
                   crc |= 0x8000;
    84c0:	017f4e33          	xor	t3,t5,s7
    84c4:	010e1e93          	slli	t4,t3,0x10
    84c8:	010edf13          	srli	t5,t4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    84cc:	01edcfb3          	xor	t6,s11,t5
                if (x16 == 1)
    84d0:	001ff613          	andi	a2,t6,1
                data >>= 1;
    84d4:	005cd693          	srli	a3,s9,0x5
                if (x16 == 1)
    84d8:	001f5293          	srli	t0,t5,0x1
    84dc:	c619                	beqz	a2,84ea <__perf_end+0x37a>
                   crc |= 0x8000;
    84de:	0172c733          	xor	a4,t0,s7
    84e2:	01071313          	slli	t1,a4,0x10
    84e6:	01035293          	srli	t0,t1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    84ea:	0056c0b3          	xor	ra,a3,t0
                if (x16 == 1)
    84ee:	0010f393          	andi	t2,ra,1
                data >>= 1;
    84f2:	006cd813          	srli	a6,s9,0x6
                if (x16 == 1)
    84f6:	0012d593          	srli	a1,t0,0x1
    84fa:	00038863          	beqz	t2,850a <__perf_end+0x39a>
                   crc |= 0x8000;
    84fe:	0175c7b3          	xor	a5,a1,s7
    8502:	01079893          	slli	a7,a5,0x10
    8506:	0108d593          	srli	a1,a7,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    850a:	00b84c33          	xor	s8,a6,a1
                if (x16 == 1)
    850e:	001c7d13          	andi	s10,s8,1
                data >>= 1;
    8512:	007cdc93          	srli	s9,s9,0x7
                if (x16 == 1)
    8516:	0015de13          	srli	t3,a1,0x1
    851a:	000d0863          	beqz	s10,852a <__perf_end+0x3ba>
                   crc |= 0x8000;
    851e:	017e4533          	xor	a0,t3,s7
    8522:	01051d93          	slli	s11,a0,0x10
    8526:	010dde13          	srli	t3,s11,0x10
                if (x16 == 1)
    852a:	001e7e93          	andi	t4,t3,1
    852e:	001e5613          	srli	a2,t3,0x1
    8532:	019e8863          	beq	t4,s9,8542 <__perf_end+0x3d2>
                   crc |= 0x8000;
    8536:	01764f33          	xor	t5,a2,s7
    853a:	010f1f93          	slli	t6,t5,0x10
    853e:	010fd613          	srli	a2,t6,0x10
                crc=core_bench_list(res,-1);
    8542:	55fd                	li	a1,-1
    8544:	8526                	mv	a0,s1
                res->crc=crcu16(crc,res->crc);
    8546:	04c11a23          	sh	a2,84(sp)
                crc=core_bench_list(res,-1);
    854a:	af6fe0ef          	jal	ra,6840 <core_bench_list>
                res->crc=crcu16(crc,res->crc);
    854e:	05415683          	lhu	a3,84(sp)
        crc=crcu8( (ee_u8) (newval)                             ,crc);
    8552:	0ff57713          	zext.b	a4,a0
                data >>= 1;
    8556:	00175393          	srli	t2,a4,0x1
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    855a:	00d74333          	xor	t1,a4,a3
                if (x16 == 1)
    855e:	00137293          	andi	t0,t1,1
                crc >>= 1;
    8562:	0016d893          	srli	a7,a3,0x1
                if (x16 == 1)
    8566:	00028863          	beqz	t0,8576 <__perf_end+0x406>
                   crc |= 0x8000;
    856a:	0178c0b3          	xor	ra,a7,s7
    856e:	01009813          	slli	a6,ra,0x10
    8572:	01085893          	srli	a7,a6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    8576:	0113c5b3          	xor	a1,t2,a7
                if (x16 == 1)
    857a:	0015fc13          	andi	s8,a1,1
                data >>= 1;
    857e:	00275d13          	srli	s10,a4,0x2
                if (x16 == 1)
    8582:	0018de13          	srli	t3,a7,0x1
    8586:	000c0863          	beqz	s8,8596 <__perf_end+0x426>
                   crc |= 0x8000;
    858a:	017e4cb3          	xor	s9,t3,s7
    858e:	010c9d93          	slli	s11,s9,0x10
    8592:	010dde13          	srli	t3,s11,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    8596:	01cd4eb3          	xor	t4,s10,t3
                if (x16 == 1)
    859a:	001eff13          	andi	t5,t4,1
                data >>= 1;
    859e:	00375f93          	srli	t6,a4,0x3
                if (x16 == 1)
    85a2:	001e5313          	srli	t1,t3,0x1
    85a6:	000f0863          	beqz	t5,85b6 <__perf_end+0x446>
                   crc |= 0x8000;
    85aa:	01734633          	xor	a2,t1,s7
    85ae:	01061693          	slli	a3,a2,0x10
    85b2:	0106d313          	srli	t1,a3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    85b6:	006fc2b3          	xor	t0,t6,t1
                if (x16 == 1)
    85ba:	0012f393          	andi	t2,t0,1
                data >>= 1;
    85be:	00475093          	srli	ra,a4,0x4
                if (x16 == 1)
    85c2:	00135893          	srli	a7,t1,0x1
    85c6:	00038863          	beqz	t2,85d6 <__perf_end+0x466>
                   crc |= 0x8000;
    85ca:	0178c7b3          	xor	a5,a7,s7
    85ce:	01079813          	slli	a6,a5,0x10
    85d2:	01085893          	srli	a7,a6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    85d6:	0110c5b3          	xor	a1,ra,a7
                if (x16 == 1)
    85da:	0015fc13          	andi	s8,a1,1
                data >>= 1;
    85de:	00575d13          	srli	s10,a4,0x5
                if (x16 == 1)
    85e2:	0018de13          	srli	t3,a7,0x1
    85e6:	000c0863          	beqz	s8,85f6 <__perf_end+0x486>
                   crc |= 0x8000;
    85ea:	017e4cb3          	xor	s9,t3,s7
    85ee:	010c9d93          	slli	s11,s9,0x10
    85f2:	010dde13          	srli	t3,s11,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    85f6:	01cd4eb3          	xor	t4,s10,t3
                if (x16 == 1)
    85fa:	001eff13          	andi	t5,t4,1
                data >>= 1;
    85fe:	00675f93          	srli	t6,a4,0x6
                if (x16 == 1)
    8602:	001e5313          	srli	t1,t3,0x1
    8606:	000f0863          	beqz	t5,8616 <__perf_end+0x4a6>
                   crc |= 0x8000;
    860a:	01734633          	xor	a2,t1,s7
    860e:	01061693          	slli	a3,a2,0x10
    8612:	0106d313          	srli	t1,a3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    8616:	006fc2b3          	xor	t0,t6,t1
                if (x16 == 1)
    861a:	0012f393          	andi	t2,t0,1
                data >>= 1;
    861e:	831d                	srli	a4,a4,0x7
                if (x16 == 1)
    8620:	00135813          	srli	a6,t1,0x1
    8624:	00038863          	beqz	t2,8634 <__perf_end+0x4c4>
                   crc |= 0x8000;
    8628:	017840b3          	xor	ra,a6,s7
    862c:	01009793          	slli	a5,ra,0x10
    8630:	0107d813          	srli	a6,a5,0x10
                if (x16 == 1)
    8634:	00187893          	andi	a7,a6,1
    8638:	00185d13          	srli	s10,a6,0x1
    863c:	00e88863          	beq	a7,a4,864c <__perf_end+0x4dc>
                   crc |= 0x8000;
    8640:	017d45b3          	xor	a1,s10,s7
    8644:	01059c13          	slli	s8,a1,0x10
    8648:	010c5d13          	srli	s10,s8,0x10
        crc=crcu8( (ee_u8) ((newval)>>8)        ,crc);
    864c:	8121                	srli	a0,a0,0x8
    864e:	0ff57c93          	zext.b	s9,a0
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    8652:	01accdb3          	xor	s11,s9,s10
                if (x16 == 1)
    8656:	001dfe13          	andi	t3,s11,1
                data >>= 1;
    865a:	001cde93          	srli	t4,s9,0x1
                if (x16 == 1)
    865e:	001d5613          	srli	a2,s10,0x1
    8662:	000e0863          	beqz	t3,8672 <__perf_end+0x502>
                   crc |= 0x8000;
    8666:	01764f33          	xor	t5,a2,s7
    866a:	010f1f93          	slli	t6,t5,0x10
    866e:	010fd613          	srli	a2,t6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    8672:	00cec6b3          	xor	a3,t4,a2
                if (x16 == 1)
    8676:	0016f313          	andi	t1,a3,1
                data >>= 1;
    867a:	002cd293          	srli	t0,s9,0x2
                if (x16 == 1)
    867e:	00165093          	srli	ra,a2,0x1
    8682:	00030863          	beqz	t1,8692 <__perf_end+0x522>
                   crc |= 0x8000;
    8686:	0170c3b3          	xor	t2,ra,s7
    868a:	01039713          	slli	a4,t2,0x10
    868e:	01075093          	srli	ra,a4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    8692:	0012c7b3          	xor	a5,t0,ra
                if (x16 == 1)
    8696:	0017f813          	andi	a6,a5,1
                data >>= 1;
    869a:	003cd893          	srli	a7,s9,0x3
                if (x16 == 1)
    869e:	0010dd13          	srli	s10,ra,0x1
    86a2:	00080863          	beqz	a6,86b2 <__perf_end+0x542>
                   crc |= 0x8000;
    86a6:	017d45b3          	xor	a1,s10,s7
    86aa:	01059c13          	slli	s8,a1,0x10
    86ae:	010c5d13          	srli	s10,s8,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    86b2:	01a8c533          	xor	a0,a7,s10
                if (x16 == 1)
    86b6:	00157d93          	andi	s11,a0,1
                data >>= 1;
    86ba:	004cde13          	srli	t3,s9,0x4
                if (x16 == 1)
    86be:	001d5f93          	srli	t6,s10,0x1
    86c2:	000d8863          	beqz	s11,86d2 <__perf_end+0x562>
                   crc |= 0x8000;
    86c6:	017fceb3          	xor	t4,t6,s7
    86ca:	010e9f13          	slli	t5,t4,0x10
    86ce:	010f5f93          	srli	t6,t5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    86d2:	01fe4633          	xor	a2,t3,t6
                if (x16 == 1)
    86d6:	00167313          	andi	t1,a2,1
                data >>= 1;
    86da:	005cd693          	srli	a3,s9,0x5
                if (x16 == 1)
    86de:	001fd093          	srli	ra,t6,0x1
    86e2:	00030863          	beqz	t1,86f2 <__perf_end+0x582>
                   crc |= 0x8000;
    86e6:	0170c2b3          	xor	t0,ra,s7
    86ea:	01029393          	slli	t2,t0,0x10
    86ee:	0103d093          	srli	ra,t2,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    86f2:	0016c733          	xor	a4,a3,ra
                if (x16 == 1)
    86f6:	00177813          	andi	a6,a4,1
                data >>= 1;
    86fa:	006cd893          	srli	a7,s9,0x6
                if (x16 == 1)
    86fe:	0010dc13          	srli	s8,ra,0x1
    8702:	00080863          	beqz	a6,8712 <__perf_end+0x5a2>
                   crc |= 0x8000;
    8706:	017c47b3          	xor	a5,s8,s7
    870a:	01079593          	slli	a1,a5,0x10
    870e:	0105dc13          	srli	s8,a1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    8712:	0188cd33          	xor	s10,a7,s8
                if (x16 == 1)
    8716:	001d7d93          	andi	s11,s10,1
                data >>= 1;
    871a:	007cdc93          	srli	s9,s9,0x7
                if (x16 == 1)
    871e:	001c5e93          	srli	t4,s8,0x1
    8722:	000d8863          	beqz	s11,8732 <__perf_end+0x5c2>
                   crc |= 0x8000;
    8726:	017ec533          	xor	a0,t4,s7
    872a:	01051e13          	slli	t3,a0,0x10
    872e:	010e5e93          	srli	t4,t3,0x10
                if (x16 == 1)
    8732:	001eff13          	andi	t5,t4,1
    8736:	001ed313          	srli	t1,t4,0x1
    873a:	019f0863          	beq	t5,s9,874a <__perf_end+0x5da>
                   crc |= 0x8000;
    873e:	01734fb3          	xor	t6,t1,s7
    8742:	010f9613          	slli	a2,t6,0x10
    8746:	01065313          	srli	t1,a2,0x10
                res->crc=crcu16(crc,res->crc);
    874a:	04611a23          	sh	t1,84(sp)
                if (i==0) res->crclist=res->crc;
    874e:	5e040963          	beqz	s0,8d40 <__perf_end+0xbd0>
        for (i=0; i<iterations; i++) {
    8752:	0405                	addi	s0,s0,1
    8754:	be8919e3          	bne	s2,s0,8346 <__perf_end+0x1d6>
    8758:	5962                	lw	s2,56(sp)
        asm volatile ("csrr %0,mcycle"  : "=r" (mcyclel) );
    875a:	b00026f3          	csrr	a3,mcycle
        stop_time_val = mcyclel;
    875e:	d6daac23          	sw	a3,-648(s5) # 10d78 <stop_time_val>
        CORE_TICKS elapsed=(CORE_TICKS)(MYTIMEDIFF(stop_time_val, start_time_val));
    8762:	413689b3          	sub	s3,a3,s3
                while (secs_passed < (secs_ret)1) {
    8766:	bd3b70e3          	bgeu	s6,s3,8326 <__perf_end+0x1b6>
        secs_ret retval=((secs_ret)ticks) / (secs_ret)EE_TICKS_PER_SEC;
    876a:	3e800b93          	li	s7,1000
    876e:	0379db33          	divu	s6,s3,s7
                results[0].iterations*=1+10/divisor;
    8772:	42a9                	li	t0,10
    8774:	0362d3b3          	divu	t2,t0,s6
    8778:	00138093          	addi	ra,t2,1
    877c:	02190733          	mul	a4,s2,ra
    8780:	dc3a                	sw	a4,56(sp)
    8782:	b2c5                	j	8162 <main+0xaa>
        if ((results[0].seed1==1) && (results[0].seed2==0) && (results[0].seed3==0)) { /* perfromance run */
    8784:	4905                	li	s2,1
    8786:	99289de3          	bne	a7,s2,8120 <main+0x68>
    878a:	98051be3          	bnez	a0,8120 <main+0x68>
                results[0].seed1=0x3415;
    878e:	341539b7          	lui	s3,0x34153
    8792:	41598a13          	addi	s4,s3,1045 # 34153415 <STACK+0x3413ae65>
    8796:	ce52                	sw	s4,28(sp)
                results[0].seed3=0x66;
    8798:	06600a93          	li	s5,102
    879c:	03511023          	sh	s5,32(sp)
    87a0:	b241                	j	8120 <main+0x68>
    87a2:	020d9e63          	bnez	s11,87de <__perf_end+0x66e>
                        core_init_matrix(results[0].size, results[i].memblock[2], (ee_s32)results[i].seed1 | (((ee_s32)results[i].seed2) << 16), &(results[i].mat) );
    87a6:	01e11d83          	lh	s11,30(sp)
    87aa:	01c11e03          	lh	t3,28(sp)
    87ae:	55b2                	lw	a1,44(sp)
    87b0:	010d9e93          	slli	t4,s11,0x10
    87b4:	00d4                	addi	a3,sp,68
    87b6:	01cee633          	or	a2,t4,t3
    87ba:	8522                	mv	a0,s0
    87bc:	f91fa0ef          	jal	ra,374c <core_init_matrix>
                if (results[i].execs & ID_STATE) {
    87c0:	b691                	j	8304 <__perf_end+0x194>
                                results[ctx].memblock[i+1]=(char *)(results[ctx].memblock[0])+results[0].size*j;
    87c2:	d42e                	sw	a1,40(sp)
                if ((1<<(ee_u32)i) & results[0].execs) {
    87c4:	5a0b9f63          	bnez	s7,8d82 <__perf_end+0xc12>
    87c8:	660d1563          	bnez	s10,8e32 <__perf_end+0xcc2>
    87cc:	980d86e3          	beqz	s11,8158 <main+0xa0>
                        results[i].list=core_list_init(results[0].size,results[i].memblock[1],results[i].seed1);
    87d0:	01c11603          	lh	a2,28(sp)
    87d4:	8522                	mv	a0,s0
    87d6:	d0af80ef          	jal	ra,ce0 <core_list_init>
    87da:	c0aa                	sw	a0,64(sp)
        for (i=0 ; i<MULTITHREAD; i++) {
    87dc:	bab5                	j	8158 <main+0xa0>
                        results[i].list=core_list_init(results[0].size,results[i].memblock[1],results[i].seed1);
    87de:	01c11b83          	lh	s7,28(sp)
    87e2:	55a2                	lw	a1,40(sp)
    87e4:	8522                	mv	a0,s0
    87e6:	865e                	mv	a2,s7
    87e8:	cf8f80ef          	jal	ra,ce0 <core_list_init>
                        core_init_matrix(results[0].size, results[i].memblock[2], (ee_s32)results[i].seed1 | (((ee_s32)results[i].seed2) << 16), &(results[i].mat) );
    87ec:	01e11c83          	lh	s9,30(sp)
    87f0:	55b2                	lw	a1,44(sp)
                        results[i].list=core_list_init(results[0].size,results[i].memblock[1],results[i].seed1);
    87f2:	8c2a                	mv	s8,a0
                        core_init_matrix(results[0].size, results[i].memblock[2], (ee_s32)results[i].seed1 | (((ee_s32)results[i].seed2) << 16), &(results[i].mat) );
    87f4:	010c9d13          	slli	s10,s9,0x10
    87f8:	00d4                	addi	a3,sp,68
    87fa:	017d6633          	or	a2,s10,s7
    87fe:	8522                	mv	a0,s0
                        results[i].list=core_list_init(results[0].size,results[i].memblock[1],results[i].seed1);
    8800:	c0e2                	sw	s8,64(sp)
                        core_init_matrix(results[0].size, results[i].memblock[2], (ee_s32)results[i].seed1 | (((ee_s32)results[i].seed2) << 16), &(results[i].mat) );
    8802:	f4bfa0ef          	jal	ra,374c <core_init_matrix>
                if (results[i].execs & ID_STATE) {
    8806:	bcfd                	j	8304 <__perf_end+0x194>
                                ee_printf("[%u]ERROR! state crc 0x%04x - should be 0x%04x\n",i,results[i].crcstate,state_known_crc[known_id]);
    8808:	6fc1                	lui	t6,0x10
    880a:	86a6                	mv	a3,s1
    880c:	85ea                	mv	a1,s10
    880e:	244f8513          	addi	a0,t6,580 # 10244 <seed3_volatile+0x154>
    8812:	b12f80ef          	jal	ra,b24 <whisperPrintf>
                                results[i].err++;
    8816:	ffcdd303          	lhu	t1,-4(s11)
    881a:	00130613          	addi	a2,t1,1
    881e:	01061693          	slli	a3,a2,0x10
    8822:	0106d293          	srli	t0,a3,0x10
    8826:	fe5d9e23          	sh	t0,-4(s11)
    882a:	baf9                	j	8208 <__perf_end+0x98>
                for (i=0 ; i<default_num_contexts; i++) {
    882c:	4c81                	li	s9,0
    882e:	4401                	li	s0,0
        ee_printf("CoreMark Size    : %u\n",(ee_u32)results[0].size);
    8830:	45b2                	lw	a1,12(sp)
    8832:	6a41                	lui	s4,0x10
    8834:	274a0513          	addi	a0,s4,628 # 10274 <seed3_volatile+0x184>
    8838:	aecf80ef          	jal	ra,b24 <whisperPrintf>
        ee_printf("Total ticks      : %u\n",(ee_u32)total_time);
    883c:	6b41                	lui	s6,0x10
    883e:	85d6                	mv	a1,s5
    8840:	28cb0513          	addi	a0,s6,652 # 1028c <seed3_volatile+0x19c>
        secs_ret retval=((secs_ret)ticks) / (secs_ret)EE_TICKS_PER_SEC;
    8844:	3e800d93          	li	s11,1000
        ee_printf("Total ticks      : %u\n",(ee_u32)total_time);
    8848:	adcf80ef          	jal	ra,b24 <whisperPrintf>
        secs_ret retval=((secs_ret)ticks) / (secs_ret)EE_TICKS_PER_SEC;
    884c:	03badd33          	divu	s10,s5,s11
        ee_printf("Total time (secs): %d\n",time_in_secs(total_time));
    8850:	6941                	lui	s2,0x10
    8852:	2a490513          	addi	a0,s2,676 # 102a4 <seed3_volatile+0x1b4>
    8856:	85ea                	mv	a1,s10
    8858:	accf80ef          	jal	ra,b24 <whisperPrintf>
        if (time_in_secs(total_time) > 0)
    885c:	3e700813          	li	a6,999
                ee_printf("Iterat/Sec/MHz   : %d.%02d\n",1000*default_num_contexts*results[0].iterations/time_in_secs(total_time),
    8860:	5be2                	lw	s7,56(sp)
        if (time_in_secs(total_time) > 0)
    8862:	03587f63          	bgeu	a6,s5,88a0 <__perf_end+0x730>
                ee_printf("Iterat/Sec/MHz   : %d.%02d\n",1000*default_num_contexts*results[0].iterations/time_in_secs(total_time),
    8866:	0e8c2883          	lw	a7,232(s8)
                             100000*default_num_contexts*results[0].iterations/time_in_secs(total_time) % 100);
    886a:	6e61                	lui	t3,0x18
    886c:	6a0e0e93          	addi	t4,t3,1696 # 186a0 <STACK+0xf0>
                ee_printf("Iterat/Sec/MHz   : %d.%02d\n",1000*default_num_contexts*results[0].iterations/time_in_secs(total_time),
    8870:	031b85b3          	mul	a1,s7,a7
    8874:	06400613          	li	a2,100
    8878:	67c1                	lui	a5,0x10
    887a:	2fc78513          	addi	a0,a5,764 # 102fc <seed3_volatile+0x20c>
                             100000*default_num_contexts*results[0].iterations/time_in_secs(total_time) % 100);
    887e:	03d58f33          	mul	t5,a1,t4
    8882:	03af5fb3          	divu	t6,t5,s10
                ee_printf("Iterat/Sec/MHz   : %d.%02d\n",1000*default_num_contexts*results[0].iterations/time_in_secs(total_time),
    8886:	03b58333          	mul	t1,a1,s11
    888a:	02cff633          	remu	a2,t6,a2
    888e:	03a355b3          	divu	a1,t1,s10
    8892:	a92f80ef          	jal	ra,b24 <whisperPrintf>
        if (time_in_secs(total_time) < 10) {
    8896:	6509                	lui	a0,0x2
    8898:	70f50693          	addi	a3,a0,1807 # 270f <matrix_test+0x1499>
    889c:	0156ec63          	bltu	a3,s5,88b4 <__perf_end+0x744>
                ee_printf("ERROR! Must execute for at least 10 secs for a valid result!\n");
    88a0:	6ac1                	lui	s5,0x10
    88a2:	2bca8513          	addi	a0,s5,700 # 102bc <seed3_volatile+0x1cc>
    88a6:	a7ef80ef          	jal	ra,b24 <whisperPrintf>
                total_errors++;
    88aa:	0c85                	addi	s9,s9,1
    88ac:	010c9293          	slli	t0,s9,0x10
    88b0:	4102d413          	srai	s0,t0,0x10
        ee_printf("Iterations       : %u\n",(ee_u32)default_num_contexts*results[0].iterations);
    88b4:	0e8c2383          	lw	t2,232(s8)
    88b8:	60c1                	lui	ra,0x10
    88ba:	31808513          	addi	a0,ra,792 # 10318 <seed3_volatile+0x228>
    88be:	027b85b3          	mul	a1,s7,t2
        ee_printf("Compiler version : %s\n",COMPILER_VERSION);
    88c2:	64c1                	lui	s1,0x10
        ee_printf("Compiler flags   : %s\n",COMPILER_FLAGS);
    88c4:	6a41                	lui	s4,0x10
    88c6:	6b41                	lui	s6,0x10
        ee_printf("Memory location  : %s\n",MEM_LOCATION);
    88c8:	6dc1                	lui	s11,0x10
    88ca:	6d41                	lui	s10,0x10
        ee_printf("Iterations       : %u\n",(ee_u32)default_num_contexts*results[0].iterations);
    88cc:	a58f80ef          	jal	ra,b24 <whisperPrintf>
        ee_printf("Compiler version : %s\n",COMPILER_VERSION);
    88d0:	6741                	lui	a4,0x10
    88d2:	33070593          	addi	a1,a4,816 # 10330 <seed3_volatile+0x240>
    88d6:	33c48513          	addi	a0,s1,828 # 1033c <seed3_volatile+0x24c>
    88da:	a4af80ef          	jal	ra,b24 <whisperPrintf>
        ee_printf("Compiler flags   : %s\n",COMPILER_FLAGS);
    88de:	354a0593          	addi	a1,s4,852 # 10354 <seed3_volatile+0x264>
    88e2:	358b0513          	addi	a0,s6,856 # 10358 <seed3_volatile+0x268>
    88e6:	a3ef80ef          	jal	ra,b24 <whisperPrintf>
        ee_printf("Memory location  : %s\n",MEM_LOCATION);
    88ea:	370d8593          	addi	a1,s11,880 # 10370 <seed3_volatile+0x280>
    88ee:	378d0513          	addi	a0,s10,888 # 10378 <seed3_volatile+0x288>
    88f2:	a32f80ef          	jal	ra,b24 <whisperPrintf>
        ee_printf("seedcrc          : 0x%04x\n",seedcrc);
    88f6:	85ce                	mv	a1,s3
    88f8:	69c1                	lui	s3,0x10
    88fa:	39098513          	addi	a0,s3,912 # 10390 <seed3_volatile+0x2a0>
    88fe:	a26f80ef          	jal	ra,b24 <whisperPrintf>
        if (results[0].execs & ID_LIST)
    8902:	5972                	lw	s2,60(sp)
    8904:	00197813          	andi	a6,s2,1
    8908:	0e080a63          	beqz	a6,89fc <__perf_end+0x88c>
                for (i=0 ; i<default_num_contexts; i++)
    890c:	0e8c2b83          	lw	s7,232(s8)
    8910:	0e0b8663          	beqz	s7,89fc <__perf_end+0x88c>
    8914:	4b01                	li	s6,0
    8916:	6ac1                	lui	s5,0x10
                        ee_printf("[%d]crclist       : 0x%04x\n",i,results[i].crclist);
    8918:	004b1893          	slli	a7,s6,0x4
    891c:	016885b3          	add	a1,a7,s6
    8920:	00259793          	slli	a5,a1,0x2
    8924:	05078e13          	addi	t3,a5,80
    8928:	01010e93          	addi	t4,sp,16
    892c:	01de0f33          	add	t5,t3,t4
    8930:	ff6f5603          	lhu	a2,-10(t5)
    8934:	85da                	mv	a1,s6
    8936:	3aca8513          	addi	a0,s5,940 # 103ac <seed3_volatile+0x2bc>
    893a:	9eaf80ef          	jal	ra,b24 <whisperPrintf>
                for (i=0 ; i<default_num_contexts; i++)
    893e:	001b0313          	addi	t1,s6,1
    8942:	01031613          	slli	a2,t1,0x10
    8946:	01065c93          	srli	s9,a2,0x10
                        ee_printf("[%d]crclist       : 0x%04x\n",i,results[i].crclist);
    894a:	004c9693          	slli	a3,s9,0x4
    894e:	019682b3          	add	t0,a3,s9
                for (i=0 ; i<default_num_contexts; i++)
    8952:	0e8c2f83          	lw	t6,232(s8)
                        ee_printf("[%d]crclist       : 0x%04x\n",i,results[i].crclist);
    8956:	00229393          	slli	t2,t0,0x2
    895a:	05038713          	addi	a4,t2,80
    895e:	0804                	addi	s1,sp,16
    8960:	3aca8513          	addi	a0,s5,940
    8964:	00970a33          	add	s4,a4,s1
    8968:	85e6                	mv	a1,s9
                for (i=0 ; i<default_num_contexts; i++)
    896a:	09fcf963          	bgeu	s9,t6,89fc <__perf_end+0x88c>
                        ee_printf("[%d]crclist       : 0x%04x\n",i,results[i].crclist);
    896e:	ff6a5603          	lhu	a2,-10(s4)
                for (i=0 ; i<default_num_contexts; i++)
    8972:	001c8d93          	addi	s11,s9,1
    8976:	010d9d13          	slli	s10,s11,0x10
                        ee_printf("[%d]crclist       : 0x%04x\n",i,results[i].crclist);
    897a:	9aaf80ef          	jal	ra,b24 <whisperPrintf>
                for (i=0 ; i<default_num_contexts; i++)
    897e:	010d5993          	srli	s3,s10,0x10
                        ee_printf("[%d]crclist       : 0x%04x\n",i,results[i].crclist);
    8982:	00499813          	slli	a6,s3,0x4
    8986:	01380bb3          	add	s7,a6,s3
                for (i=0 ; i<default_num_contexts; i++)
    898a:	0e8c2b03          	lw	s6,232(s8)
                        ee_printf("[%d]crclist       : 0x%04x\n",i,results[i].crclist);
    898e:	002b9893          	slli	a7,s7,0x2
    8992:	05088593          	addi	a1,a7,80
    8996:	081c                	addi	a5,sp,16
    8998:	00f58e33          	add	t3,a1,a5
    899c:	3aca8513          	addi	a0,s5,940
    89a0:	85ce                	mv	a1,s3
                for (i=0 ; i<default_num_contexts; i++)
    89a2:	0569fd63          	bgeu	s3,s6,89fc <__perf_end+0x88c>
                        ee_printf("[%d]crclist       : 0x%04x\n",i,results[i].crclist);
    89a6:	ff6e5603          	lhu	a2,-10(t3)
    89aa:	97af80ef          	jal	ra,b24 <whisperPrintf>
                for (i=0 ; i<default_num_contexts; i++)
    89ae:	00198f13          	addi	t5,s3,1
    89b2:	010f1f93          	slli	t6,t5,0x10
    89b6:	010fdc93          	srli	s9,t6,0x10
                        ee_printf("[%d]crclist       : 0x%04x\n",i,results[i].crclist);
    89ba:	004c9313          	slli	t1,s9,0x4
    89be:	01930633          	add	a2,t1,s9
                for (i=0 ; i<default_num_contexts; i++)
    89c2:	0e8c2e83          	lw	t4,232(s8)
                        ee_printf("[%d]crclist       : 0x%04x\n",i,results[i].crclist);
    89c6:	00261693          	slli	a3,a2,0x2
    89ca:	05068293          	addi	t0,a3,80
    89ce:	01010393          	addi	t2,sp,16
    89d2:	3aca8513          	addi	a0,s5,940
    89d6:	00728733          	add	a4,t0,t2
    89da:	85e6                	mv	a1,s9
                for (i=0 ; i<default_num_contexts; i++)
    89dc:	03dcf063          	bgeu	s9,t4,89fc <__perf_end+0x88c>
                        ee_printf("[%d]crclist       : 0x%04x\n",i,results[i].crclist);
    89e0:	ff675603          	lhu	a2,-10(a4)
                for (i=0 ; i<default_num_contexts; i++)
    89e4:	001c8493          	addi	s1,s9,1
    89e8:	01049a13          	slli	s4,s1,0x10
                        ee_printf("[%d]crclist       : 0x%04x\n",i,results[i].crclist);
    89ec:	938f80ef          	jal	ra,b24 <whisperPrintf>
                for (i=0 ; i<default_num_contexts; i++)
    89f0:	0e8c2503          	lw	a0,232(s8)
    89f4:	010a5b13          	srli	s6,s4,0x10
    89f8:	f2ab60e3          	bltu	s6,a0,8918 <__perf_end+0x7a8>
        if (results[0].execs & ID_MATRIX)
    89fc:	00297093          	andi	ra,s2,2
    8a00:	0e008b63          	beqz	ra,8af6 <__perf_end+0x986>
                for (i=0 ; i<default_num_contexts; i++)
    8a04:	0e8c2a83          	lw	s5,232(s8)
    8a08:	2c0a8c63          	beqz	s5,8ce0 <__perf_end+0xb70>
    8a0c:	4481                	li	s1,0
    8a0e:	6dc1                	lui	s11,0x10
                        ee_printf("[%d]crcmatrix     : 0x%04x\n",i,results[i].crcmatrix);
    8a10:	00449d13          	slli	s10,s1,0x4
    8a14:	009d09b3          	add	s3,s10,s1
    8a18:	00299813          	slli	a6,s3,0x2
    8a1c:	05080b93          	addi	s7,a6,80
    8a20:	01010893          	addi	a7,sp,16
    8a24:	011b85b3          	add	a1,s7,a7
    8a28:	ff85d603          	lhu	a2,-8(a1)
    8a2c:	3c8d8513          	addi	a0,s11,968 # 103c8 <seed3_volatile+0x2d8>
    8a30:	85a6                	mv	a1,s1
    8a32:	8f2f80ef          	jal	ra,b24 <whisperPrintf>
                for (i=0 ; i<default_num_contexts; i++)
    8a36:	00148793          	addi	a5,s1,1
    8a3a:	01079e93          	slli	t4,a5,0x10
    8a3e:	010edc93          	srli	s9,t4,0x10
                        ee_printf("[%d]crcmatrix     : 0x%04x\n",i,results[i].crcmatrix);
    8a42:	004c9f13          	slli	t5,s9,0x4
    8a46:	019f0fb3          	add	t6,t5,s9
                for (i=0 ; i<default_num_contexts; i++)
    8a4a:	0e8c2e03          	lw	t3,232(s8)
                        ee_printf("[%d]crcmatrix     : 0x%04x\n",i,results[i].crcmatrix);
    8a4e:	002f9313          	slli	t1,t6,0x2
    8a52:	05030613          	addi	a2,t1,80
    8a56:	0814                	addi	a3,sp,16
    8a58:	3c8d8513          	addi	a0,s11,968
    8a5c:	00d602b3          	add	t0,a2,a3
    8a60:	85e6                	mv	a1,s9
                for (i=0 ; i<default_num_contexts; i++)
    8a62:	09ccfa63          	bgeu	s9,t3,8af6 <__perf_end+0x986>
                        ee_printf("[%d]crcmatrix     : 0x%04x\n",i,results[i].crcmatrix);
    8a66:	ff82d603          	lhu	a2,-8(t0)
    8a6a:	8baf80ef          	jal	ra,b24 <whisperPrintf>
                for (i=0 ; i<default_num_contexts; i++)
    8a6e:	001c8713          	addi	a4,s9,1
    8a72:	01071493          	slli	s1,a4,0x10
    8a76:	0104da13          	srli	s4,s1,0x10
                        ee_printf("[%d]crcmatrix     : 0x%04x\n",i,results[i].crcmatrix);
    8a7a:	004a1b13          	slli	s6,s4,0x4
    8a7e:	014b0ab3          	add	s5,s6,s4
                for (i=0 ; i<default_num_contexts; i++)
    8a82:	0e8c2383          	lw	t2,232(s8)
                        ee_printf("[%d]crcmatrix     : 0x%04x\n",i,results[i].crcmatrix);
    8a86:	002a9d13          	slli	s10,s5,0x2
    8a8a:	050d0993          	addi	s3,s10,80
    8a8e:	01010813          	addi	a6,sp,16
    8a92:	3c8d8513          	addi	a0,s11,968
    8a96:	01098bb3          	add	s7,s3,a6
    8a9a:	85d2                	mv	a1,s4
                for (i=0 ; i<default_num_contexts; i++)
    8a9c:	047a7d63          	bgeu	s4,t2,8af6 <__perf_end+0x986>
                        ee_printf("[%d]crcmatrix     : 0x%04x\n",i,results[i].crcmatrix);
    8aa0:	ff8bd603          	lhu	a2,-8(s7)
    8aa4:	880f80ef          	jal	ra,b24 <whisperPrintf>
                for (i=0 ; i<default_num_contexts; i++)
    8aa8:	001a0593          	addi	a1,s4,1
    8aac:	01059e13          	slli	t3,a1,0x10
    8ab0:	010e5c93          	srli	s9,t3,0x10
                        ee_printf("[%d]crcmatrix     : 0x%04x\n",i,results[i].crcmatrix);
    8ab4:	004c9793          	slli	a5,s9,0x4
    8ab8:	01978eb3          	add	t4,a5,s9
                for (i=0 ; i<default_num_contexts; i++)
    8abc:	0e8c2883          	lw	a7,232(s8)
                        ee_printf("[%d]crcmatrix     : 0x%04x\n",i,results[i].crcmatrix);
    8ac0:	002e9f13          	slli	t5,t4,0x2
    8ac4:	050f0f93          	addi	t6,t5,80
    8ac8:	01010313          	addi	t1,sp,16
    8acc:	3c8d8513          	addi	a0,s11,968
    8ad0:	006f8633          	add	a2,t6,t1
    8ad4:	85e6                	mv	a1,s9
                for (i=0 ; i<default_num_contexts; i++)
    8ad6:	031cf063          	bgeu	s9,a7,8af6 <__perf_end+0x986>
                        ee_printf("[%d]crcmatrix     : 0x%04x\n",i,results[i].crcmatrix);
    8ada:	ff865603          	lhu	a2,-8(a2)
    8ade:	846f80ef          	jal	ra,b24 <whisperPrintf>
                for (i=0 ; i<default_num_contexts; i++)
    8ae2:	001c8693          	addi	a3,s9,1
    8ae6:	0e8c2503          	lw	a0,232(s8)
    8aea:	01069293          	slli	t0,a3,0x10
    8aee:	0102d493          	srli	s1,t0,0x10
    8af2:	f0a4efe3          	bltu	s1,a0,8a10 <__perf_end+0x8a0>
        if (results[0].execs & ID_STATE)
    8af6:	00497913          	andi	s2,s2,4
                for (i=0 ; i<default_num_contexts; i++)
    8afa:	0e8c2083          	lw	ra,232(s8)
        if (results[0].execs & ID_STATE)
    8afe:	0e090863          	beqz	s2,8bee <__perf_end+0xa7e>
                for (i=0 ; i<default_num_contexts; i++)
    8b02:	1c008f63          	beqz	ra,8ce0 <__perf_end+0xb70>
    8b06:	4481                	li	s1,0
    8b08:	6dc1                	lui	s11,0x10
                        ee_printf("[%d]crcstate      : 0x%04x\n",i,results[i].crcstate);
    8b0a:	00449393          	slli	t2,s1,0x4
    8b0e:	00938733          	add	a4,t2,s1
    8b12:	00271a13          	slli	s4,a4,0x2
    8b16:	050a0b13          	addi	s6,s4,80
    8b1a:	01010a93          	addi	s5,sp,16
    8b1e:	015b0d33          	add	s10,s6,s5
    8b22:	ffad5603          	lhu	a2,-6(s10)
    8b26:	85a6                	mv	a1,s1
    8b28:	3e4d8513          	addi	a0,s11,996 # 103e4 <seed3_volatile+0x2f4>
    8b2c:	ff9f70ef          	jal	ra,b24 <whisperPrintf>
                for (i=0 ; i<default_num_contexts; i++)
    8b30:	00148813          	addi	a6,s1,1
    8b34:	01081b93          	slli	s7,a6,0x10
    8b38:	010bdc93          	srli	s9,s7,0x10
                        ee_printf("[%d]crcstate      : 0x%04x\n",i,results[i].crcstate);
    8b3c:	004c9893          	slli	a7,s9,0x4
    8b40:	019885b3          	add	a1,a7,s9
                for (i=0 ; i<default_num_contexts; i++)
    8b44:	0e8c2983          	lw	s3,232(s8)
                        ee_printf("[%d]crcstate      : 0x%04x\n",i,results[i].crcstate);
    8b48:	00259e13          	slli	t3,a1,0x2
    8b4c:	050e0793          	addi	a5,t3,80
    8b50:	01010e93          	addi	t4,sp,16
    8b54:	3e4d8513          	addi	a0,s11,996
    8b58:	01d78f33          	add	t5,a5,t4
    8b5c:	85e6                	mv	a1,s9
                for (i=0 ; i<default_num_contexts; i++)
    8b5e:	093cf863          	bgeu	s9,s3,8bee <__perf_end+0xa7e>
                        ee_printf("[%d]crcstate      : 0x%04x\n",i,results[i].crcstate);
    8b62:	ffaf5603          	lhu	a2,-6(t5)
    8b66:	fbff70ef          	jal	ra,b24 <whisperPrintf>
                for (i=0 ; i<default_num_contexts; i++)
    8b6a:	001c8313          	addi	t1,s9,1
    8b6e:	01031613          	slli	a2,t1,0x10
    8b72:	01065493          	srli	s1,a2,0x10
                        ee_printf("[%d]crcstate      : 0x%04x\n",i,results[i].crcstate);
    8b76:	00449693          	slli	a3,s1,0x4
    8b7a:	009682b3          	add	t0,a3,s1
                for (i=0 ; i<default_num_contexts; i++)
    8b7e:	0e8c2f83          	lw	t6,232(s8)
                        ee_printf("[%d]crcstate      : 0x%04x\n",i,results[i].crcstate);
    8b82:	00229913          	slli	s2,t0,0x2
    8b86:	05090393          	addi	t2,s2,80
    8b8a:	0818                	addi	a4,sp,16
    8b8c:	3e4d8513          	addi	a0,s11,996
    8b90:	00e38a33          	add	s4,t2,a4
    8b94:	85a6                	mv	a1,s1
                for (i=0 ; i<default_num_contexts; i++)
    8b96:	05f4fc63          	bgeu	s1,t6,8bee <__perf_end+0xa7e>
                        ee_printf("[%d]crcstate      : 0x%04x\n",i,results[i].crcstate);
    8b9a:	ffaa5603          	lhu	a2,-6(s4)
                for (i=0 ; i<default_num_contexts; i++)
    8b9e:	00148a93          	addi	s5,s1,1
    8ba2:	010a9d13          	slli	s10,s5,0x10
                        ee_printf("[%d]crcstate      : 0x%04x\n",i,results[i].crcstate);
    8ba6:	f7ff70ef          	jal	ra,b24 <whisperPrintf>
                for (i=0 ; i<default_num_contexts; i++)
    8baa:	010d5993          	srli	s3,s10,0x10
                        ee_printf("[%d]crcstate      : 0x%04x\n",i,results[i].crcstate);
    8bae:	00499813          	slli	a6,s3,0x4
    8bb2:	01380bb3          	add	s7,a6,s3
                for (i=0 ; i<default_num_contexts; i++)
    8bb6:	0e8c2b03          	lw	s6,232(s8)
                        ee_printf("[%d]crcstate      : 0x%04x\n",i,results[i].crcstate);
    8bba:	002b9c93          	slli	s9,s7,0x2
    8bbe:	080c                	addi	a1,sp,16
    8bc0:	050c8893          	addi	a7,s9,80
    8bc4:	00b88e33          	add	t3,a7,a1
    8bc8:	3e4d8513          	addi	a0,s11,996
    8bcc:	85ce                	mv	a1,s3
                for (i=0 ; i<default_num_contexts; i++)
    8bce:	0369f063          	bgeu	s3,s6,8bee <__perf_end+0xa7e>
                        ee_printf("[%d]crcstate      : 0x%04x\n",i,results[i].crcstate);
    8bd2:	ffae5603          	lhu	a2,-6(t3)
    8bd6:	f4ff70ef          	jal	ra,b24 <whisperPrintf>
                for (i=0 ; i<default_num_contexts; i++)
    8bda:	00198793          	addi	a5,s3,1
    8bde:	0e8c2503          	lw	a0,232(s8)
    8be2:	01079e93          	slli	t4,a5,0x10
    8be6:	010ed493          	srli	s1,t4,0x10
    8bea:	f2a4e0e3          	bltu	s1,a0,8b0a <__perf_end+0x99a>
        for (i=0 ; i<default_num_contexts; i++)
    8bee:	0e8c2083          	lw	ra,232(s8)
    8bf2:	4b81                	li	s7,0
    8bf4:	6dc1                	lui	s11,0x10
    8bf6:	0e008563          	beqz	ra,8ce0 <__perf_end+0xb70>
                ee_printf("[%d]crcfinal      : 0x%04x\n",i,results[i].crc);
    8bfa:	004b9f13          	slli	t5,s7,0x4
    8bfe:	017f0fb3          	add	t6,t5,s7
    8c02:	002f9313          	slli	t1,t6,0x2
    8c06:	05030613          	addi	a2,t1,80
    8c0a:	0814                	addi	a3,sp,16
    8c0c:	00d602b3          	add	t0,a2,a3
    8c10:	ff42d603          	lhu	a2,-12(t0)
    8c14:	85de                	mv	a1,s7
    8c16:	400d8513          	addi	a0,s11,1024 # 10400 <seed3_volatile+0x310>
    8c1a:	f0bf70ef          	jal	ra,b24 <whisperPrintf>
        for (i=0 ; i<default_num_contexts; i++)
    8c1e:	001b8393          	addi	t2,s7,1
    8c22:	01039713          	slli	a4,t2,0x10
    8c26:	01075a13          	srli	s4,a4,0x10
                ee_printf("[%d]crcfinal      : 0x%04x\n",i,results[i].crc);
    8c2a:	004a1b13          	slli	s6,s4,0x4
    8c2e:	014b0ab3          	add	s5,s6,s4
        for (i=0 ; i<default_num_contexts; i++)
    8c32:	0e8c2903          	lw	s2,232(s8)
                ee_printf("[%d]crcfinal      : 0x%04x\n",i,results[i].crc);
    8c36:	002a9d13          	slli	s10,s5,0x2
    8c3a:	050d0993          	addi	s3,s10,80
    8c3e:	01010813          	addi	a6,sp,16
    8c42:	400d8513          	addi	a0,s11,1024
    8c46:	01098bb3          	add	s7,s3,a6
    8c4a:	85d2                	mv	a1,s4
        for (i=0 ; i<default_num_contexts; i++)
    8c4c:	092a7a63          	bgeu	s4,s2,8ce0 <__perf_end+0xb70>
                ee_printf("[%d]crcfinal      : 0x%04x\n",i,results[i].crc);
    8c50:	ff4bd603          	lhu	a2,-12(s7)
    8c54:	ed1f70ef          	jal	ra,b24 <whisperPrintf>
        for (i=0 ; i<default_num_contexts; i++)
    8c58:	001a0893          	addi	a7,s4,1
    8c5c:	01089593          	slli	a1,a7,0x10
    8c60:	0105d493          	srli	s1,a1,0x10
                ee_printf("[%d]crcfinal      : 0x%04x\n",i,results[i].crc);
    8c64:	00449e13          	slli	t3,s1,0x4
    8c68:	009e07b3          	add	a5,t3,s1
        for (i=0 ; i<default_num_contexts; i++)
    8c6c:	0e8c2c83          	lw	s9,232(s8)
                ee_printf("[%d]crcfinal      : 0x%04x\n",i,results[i].crc);
    8c70:	00279e93          	slli	t4,a5,0x2
    8c74:	050e8f13          	addi	t5,t4,80
    8c78:	01010f93          	addi	t6,sp,16
    8c7c:	400d8513          	addi	a0,s11,1024
    8c80:	01ff0333          	add	t1,t5,t6
    8c84:	85a6                	mv	a1,s1
        for (i=0 ; i<default_num_contexts; i++)
    8c86:	0594fd63          	bgeu	s1,s9,8ce0 <__perf_end+0xb70>
                ee_printf("[%d]crcfinal      : 0x%04x\n",i,results[i].crc);
    8c8a:	ff435603          	lhu	a2,-12(t1)
    8c8e:	01010a93          	addi	s5,sp,16
    8c92:	e93f70ef          	jal	ra,b24 <whisperPrintf>
        for (i=0 ; i<default_num_contexts; i++)
    8c96:	00148693          	addi	a3,s1,1
    8c9a:	01069293          	slli	t0,a3,0x10
    8c9e:	0102d913          	srli	s2,t0,0x10
                ee_printf("[%d]crcfinal      : 0x%04x\n",i,results[i].crc);
    8ca2:	00491393          	slli	t2,s2,0x4
    8ca6:	01238733          	add	a4,t2,s2
        for (i=0 ; i<default_num_contexts; i++)
    8caa:	0e8c2603          	lw	a2,232(s8)
                ee_printf("[%d]crcfinal      : 0x%04x\n",i,results[i].crc);
    8cae:	00271a13          	slli	s4,a4,0x2
    8cb2:	050a0b13          	addi	s6,s4,80
    8cb6:	400d8513          	addi	a0,s11,1024
    8cba:	015b0d33          	add	s10,s6,s5
    8cbe:	85ca                	mv	a1,s2
        for (i=0 ; i<default_num_contexts; i++)
    8cc0:	02c97063          	bgeu	s2,a2,8ce0 <__perf_end+0xb70>
                ee_printf("[%d]crcfinal      : 0x%04x\n",i,results[i].crc);
    8cc4:	ff4d5603          	lhu	a2,-12(s10)
        for (i=0 ; i<default_num_contexts; i++)
    8cc8:	00190993          	addi	s3,s2,1
                ee_printf("[%d]crcfinal      : 0x%04x\n",i,results[i].crc);
    8ccc:	e59f70ef          	jal	ra,b24 <whisperPrintf>
        for (i=0 ; i<default_num_contexts; i++)
    8cd0:	0e8c2503          	lw	a0,232(s8)
    8cd4:	01099813          	slli	a6,s3,0x10
    8cd8:	01085b93          	srli	s7,a6,0x10
    8cdc:	f0abefe3          	bltu	s7,a0,8bfa <__perf_end+0xa8a>
        if (total_errors==0) {
    8ce0:	c82d                	beqz	s0,8d52 <__perf_end+0xbe2>
        if (total_errors>0)
    8ce2:	06804463          	bgtz	s0,8d4a <__perf_end+0xbda>
                ee_printf("Cannot validate operation for these seed values, please compare with results on a known platform.\n");
    8ce6:	6c41                	lui	s8,0x10
    8ce8:	468c0513          	addi	a0,s8,1128 # 10468 <seed3_volatile+0x378>
}
    8cec:	446a                	lw	s0,152(sp)
    8cee:	40fa                	lw	ra,156(sp)
    8cf0:	44da                	lw	s1,148(sp)
    8cf2:	494a                	lw	s2,144(sp)
    8cf4:	49ba                	lw	s3,140(sp)
    8cf6:	4a2a                	lw	s4,136(sp)
    8cf8:	4a9a                	lw	s5,132(sp)
    8cfa:	4b0a                	lw	s6,128(sp)
    8cfc:	5bf6                	lw	s7,124(sp)
    8cfe:	5c66                	lw	s8,120(sp)
    8d00:	5cd6                	lw	s9,116(sp)
    8d02:	5d46                	lw	s10,112(sp)
    8d04:	5db6                	lw	s11,108(sp)
    8d06:	610d                	addi	sp,sp,160
                ee_printf("Errors detected\n");
    8d08:	e1df706f          	j	b24 <whisperPrintf>
        switch (seedcrc) { /* test known output for common seeds */
    8d0c:	6425                	lui	s0,0x9
    8d0e:	a0240e13          	addi	t3,s0,-1534 # 8a02 <__perf_end+0x892>
    8d12:	0dc50763          	beq	a0,t3,8de0 <__perf_end+0xc70>
    8d16:	633d                	lui	t1,0xf
    8d18:	9f530913          	addi	s2,t1,-1547 # e9f5 <_end+0x5ba9>
    8d1c:	13251263          	bne	a0,s2,8e40 <__perf_end+0xcd0>
                        ee_printf("2K performance run parameters for coremark.\n");
    8d20:	66c1                	lui	a3,0x10
    8d22:	18468513          	addi	a0,a3,388 # 10184 <seed3_volatile+0x94>
    8d26:	dfff70ef          	jal	ra,b24 <whisperPrintf>
                        break;
    8d2a:	6b89                	lui	s7,0x2
    8d2c:	fd7b8a13          	addi	s4,s7,-41 # 1fd7 <matrix_test+0xd61>
    8d30:	62b9                	lui	t0,0xe
    8d32:	e3a40493          	addi	s1,s0,-454
    8d36:	8b52                	mv	s6,s4
    8d38:	71428913          	addi	s2,t0,1812 # e714 <_end+0x58c8>
    8d3c:	cb4ff06f          	j	81f0 <__perf_end+0x80>
                if (i==0) res->crclist=res->crc;
    8d40:	04611b23          	sh	t1,86(sp)
        for (i=0; i<iterations; i++) {
    8d44:	4405                	li	s0,1
    8d46:	e00ff06f          	j	8346 <__perf_end+0x1d6>
                ee_printf("Errors detected\n");
    8d4a:	6441                	lui	s0,0x10
    8d4c:	4cc40513          	addi	a0,s0,1228 # 104cc <seed3_volatile+0x3dc>
    8d50:	bf71                	j	8cec <__perf_end+0xb7c>
                ee_printf("Correct operation validated. See readme.txt for run and reporting rules.\n");
    8d52:	60c1                	lui	ra,0x10
    8d54:	41c08513          	addi	a0,ra,1052 # 1041c <seed3_volatile+0x32c>
    8d58:	bf51                	j	8cec <__perf_end+0xb7c>
                                results[ctx].memblock[i+1]=(char *)(results[ctx].memblock[0])+results[0].size*j;
    8d5a:	028c0f33          	mul	t5,s8,s0
    8d5e:	01e58fb3          	add	t6,a1,t5
    8d62:	d67e                	sw	t6,44(sp)
                        core_init_matrix(results[0].size, results[i].memblock[2], (ee_s32)results[i].seed1 | (((ee_s32)results[i].seed2) << 16), &(results[i].mat) );
    8d64:	01e11983          	lh	s3,30(sp)
    8d68:	01c11a03          	lh	s4,28(sp)
    8d6c:	55b2                	lw	a1,44(sp)
    8d6e:	01099a93          	slli	s5,s3,0x10
    8d72:	00d4                	addi	a3,sp,68
    8d74:	014ae633          	or	a2,s5,s4
    8d78:	8522                	mv	a0,s0
    8d7a:	9d3fa0ef          	jal	ra,374c <core_init_matrix>
        for (i=0 ; i<MULTITHREAD; i++) {
    8d7e:	bdaff06f          	j	8158 <main+0xa0>
                                results[ctx].memblock[i+1]=(char *)(results[ctx].memblock[0])+results[0].size*j;
    8d82:	028c0333          	mul	t1,s8,s0
    8d86:	006583b3          	add	t2,a1,t1
    8d8a:	d61e                	sw	t2,44(sp)
                if ((1<<(ee_u32)i) & results[0].execs) {
    8d8c:	d40d1d63          	bnez	s10,82e6 <__perf_end+0x176>
    8d90:	fc0d8ae3          	beqz	s11,8d64 <__perf_end+0xbf4>
                        results[i].list=core_list_init(results[0].size,results[i].memblock[1],results[i].seed1);
    8d94:	01c11903          	lh	s2,28(sp)
    8d98:	8522                	mv	a0,s0
    8d9a:	864a                	mv	a2,s2
    8d9c:	f45f70ef          	jal	ra,ce0 <core_list_init>
    8da0:	882a                	mv	a6,a0
                        core_init_matrix(results[0].size, results[i].memblock[2], (ee_s32)results[i].seed1 | (((ee_s32)results[i].seed2) << 16), &(results[i].mat) );
    8da2:	01e11503          	lh	a0,30(sp)
    8da6:	55b2                	lw	a1,44(sp)
    8da8:	00d4                	addi	a3,sp,68
    8daa:	01051893          	slli	a7,a0,0x10
    8dae:	0128e633          	or	a2,a7,s2
    8db2:	8522                	mv	a0,s0
                        results[i].list=core_list_init(results[0].size,results[i].memblock[1],results[i].seed1);
    8db4:	c0c2                	sw	a6,64(sp)
                        core_init_matrix(results[0].size, results[i].memblock[2], (ee_s32)results[i].seed1 | (((ee_s32)results[i].seed2) << 16), &(results[i].mat) );
    8db6:	997fa0ef          	jal	ra,374c <core_init_matrix>
        for (i=0 ; i<MULTITHREAD; i++) {
    8dba:	b9eff06f          	j	8158 <main+0xa0>
                        ee_printf("6k validation run parameters for coremark.\n");
    8dbe:	6d41                	lui	s10,0x10
    8dc0:	124d0513          	addi	a0,s10,292 # 10124 <seed3_volatile+0x34>
    8dc4:	d61f70ef          	jal	ra,b24 <whisperPrintf>
                        break;
    8dc8:	6d85                	lui	s11,0x1
    8dca:	199d8a13          	addi	s4,s11,409 # 1199 <core_list_mergesort+0x7f>
    8dce:	6c91                	lui	s9,0x4
    8dd0:	650d                	lui	a0,0x3
    8dd2:	9bfc8493          	addi	s1,s9,-1601 # 39bf <core_init_matrix+0x273>
    8dd6:	8b52                	mv	s6,s4
    8dd8:	34050913          	addi	s2,a0,832 # 3340 <matrix_test+0x20ca>
    8ddc:	c14ff06f          	j	81f0 <__perf_end+0x80>
                        ee_printf("6k performance run parameters for coremark.\n");
    8de0:	6ec1                	lui	t4,0x10
    8de2:	0f4e8513          	addi	a0,t4,244 # 100f4 <seed3_volatile+0x4>
    8de6:	d3ff70ef          	jal	ra,b24 <whisperPrintf>
                        break;
    8dea:	6f31                	lui	t5,0xc
    8dec:	e52f0a13          	addi	s4,t5,-430 # be52 <_end+0x3006>
    8df0:	6f99                	lui	t6,0x6
    8df2:	6635                	lui	a2,0xd
    8df4:	e47f8493          	addi	s1,t6,-441 # 5e47 <cmp_complex+0xf7>
    8df8:	8b52                	mv	s6,s4
    8dfa:	4b060913          	addi	s2,a2,1200 # d4b0 <_end+0x4664>
    8dfe:	bf2ff06f          	j	81f0 <__perf_end+0x80>
                        ee_printf("2K validation run parameters for coremark.\n");
    8e02:	60c1                	lui	ra,0x10
    8e04:	1b408513          	addi	a0,ra,436 # 101b4 <seed3_volatile+0xc4>
    8e08:	d1df70ef          	jal	ra,b24 <whisperPrintf>
                        break;
    8e0c:	6725                	lui	a4,0x9
    8e0e:	6839                	lui	a6,0xe
    8e10:	d8470493          	addi	s1,a4,-636 # 8d84 <__perf_end+0xc14>
    8e14:	74700a13          	li	s4,1863
    8e18:	74700b13          	li	s6,1863
    8e1c:	3c180913          	addi	s2,a6,961 # e3c1 <_end+0x5575>
    8e20:	bd0ff06f          	j	81f0 <__perf_end+0x80>
                                results[ctx].memblock[i+1]=(char *)(results[ctx].memblock[0])+results[0].size*j;
    8e24:	028c00b3          	mul	ra,s8,s0
    8e28:	001586b3          	add	a3,a1,ra
    8e2c:	d636                	sw	a3,44(sp)
                if ((1<<(ee_u32)i) & results[0].execs) {
    8e2e:	cb8ff06f          	j	82e6 <__perf_end+0x176>
                                results[ctx].memblock[i+1]=(char *)(results[ctx].memblock[0])+results[0].size*j;
    8e32:	028e02b3          	mul	t0,t3,s0
    8e36:	00558733          	add	a4,a1,t0
    8e3a:	d83a                	sw	a4,48(sp)
        for (i=0; i<NUM_ALGORITHMS; i++) {
    8e3c:	cb6ff06f          	j	82f2 <__perf_end+0x182>
        switch (seedcrc) { /* test known output for common seeds */
    8e40:	64c1                	lui	s1,0x10
    8e42:	fff48c93          	addi	s9,s1,-1 # ffff <_end+0x71b3>
    8e46:	547d                	li	s0,-1
    8e48:	6c41                	lui	s8,0x10
    8e4a:	b2dd                	j	8830 <__perf_end+0x6c0>
